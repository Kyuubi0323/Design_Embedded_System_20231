
Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d16c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  0800d310  0800d310  0001d310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede8  0800ede8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edf0  0800edf0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edf0  0800edf0  0001edf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edf4  0800edf4  0001edf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800edf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001f0  0800efe8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800efe8  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b53  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cc  00000000  00000000  00036d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003b520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019785  00000000  00000000  0003c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a477  00000000  00000000  00055e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094605  00000000  00000000  0007029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001048a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  001048f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d2f4 	.word	0x0800d2f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800d2f4 	.word	0x0800d2f4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <MX_GPIO_Init+0x160>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <MX_GPIO_Init+0x160>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <MX_GPIO_Init+0x160>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <MX_GPIO_Init+0x160>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a49      	ldr	r2, [pc, #292]	; (8001188 <MX_GPIO_Init+0x160>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <MX_GPIO_Init+0x160>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <MX_GPIO_Init+0x160>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a42      	ldr	r2, [pc, #264]	; (8001188 <MX_GPIO_Init+0x160>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b40      	ldr	r3, [pc, #256]	; (8001188 <MX_GPIO_Init+0x160>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <MX_GPIO_Init+0x160>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <MX_GPIO_Init+0x160>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b39      	ldr	r3, [pc, #228]	; (8001188 <MX_GPIO_Init+0x160>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|DHT_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010b4:	4835      	ldr	r0, [pc, #212]	; (800118c <MX_GPIO_Init+0x164>)
 80010b6:	f002 f97f 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_LED_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f240 3102 	movw	r1, #770	; 0x302
 80010c0:	4833      	ldr	r0, [pc, #204]	; (8001190 <MX_GPIO_Init+0x168>)
 80010c2:	f002 f979 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80010cc:	4831      	ldr	r0, [pc, #196]	; (8001194 <MX_GPIO_Init+0x16c>)
 80010ce:	f002 f973 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DHT_Pin;
 80010d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4828      	ldr	r0, [pc, #160]	; (800118c <MX_GPIO_Init+0x164>)
 80010ec:	f001 ffc8 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_RST_Pin;
 80010f0:	f240 2302 	movw	r3, #514	; 0x202
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <MX_GPIO_Init+0x168>)
 800110a:	f001 ffb9 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	481b      	ldr	r0, [pc, #108]	; (8001190 <MX_GPIO_Init+0x168>)
 8001124:	f001 ffac 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4815      	ldr	r0, [pc, #84]	; (8001194 <MX_GPIO_Init+0x16c>)
 8001140:	f001 ff9e 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SS_LCD_Pin|SPI1_SS_Touch_Pin;
 8001144:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_GPIO_Init+0x16c>)
 800115e:	f001 ff8f 	bl	8003080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_GPIO_Init+0x168>)
 800117c:	f001 ff80 	bl	8003080 <HAL_GPIO_Init>

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020800 	.word	0x40020800
 8001190:	40020400 	.word	0x40020400
 8001194:	40020000 	.word	0x40020000

08001198 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f002 f923 	bl	8003420 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fb16 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000020c 	.word	0x2000020c
 80011ec:	40005400 	.word	0x40005400
 80011f0:	00061a80 	.word	0x00061a80

080011f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_I2C_MspInit+0x94>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d133      	bne.n	800127e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <HAL_I2C_MspInit+0x98>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001236:	2312      	movs	r3, #18
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001242:	2304      	movs	r3, #4
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <HAL_I2C_MspInit+0x9c>)
 800124e:	f001 ff17 	bl	8003080 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_I2C_MspInit+0x98>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_I2C_MspInit+0x98>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	201f      	movs	r0, #31
 8001274:	f001 fe2d 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001278:	201f      	movs	r0, #31
 800127a:	f001 fe46 	bl	8002f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40005400 	.word	0x40005400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020400 	.word	0x40020400

08001294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f001 fca9 	bl	8002bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 fa17 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f7ff fec1 	bl	8001028 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a6:	f7ff ff77 	bl	8001198 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012aa:	f000 fab7 	bl	800181c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80012ae:	f000 fcb7 	bl	8001c20 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80012b2:	f000 fc6f 	bl	8001b94 <MX_TIM11_Init>
	char Strgbpm[4] ;
	char Strgspo2[4];


	//Display
	ILI9341_Unselect();
 80012b6:	f000 ffc3 	bl	8002240 <ILI9341_Unselect>
	ILI9341_TouchUnselect();
 80012ba:	f001 fba1 	bl	8002a00 <ILI9341_TouchUnselect>
	ILI9341_Init();
 80012be:	f001 f871 	bl	80023a4 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fb8a 	bl	80029dc <ILI9341_FillScreen>
	//Background
	ILI9341_WriteString(10, 10, "Embedded Design System 20231", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80012c8:	4bb6      	ldr	r3, [pc, #728]	; (80015a4 <main+0x310>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4ab3      	ldr	r2, [pc, #716]	; (80015a8 <main+0x314>)
 80012dc:	210a      	movs	r1, #10
 80012de:	200a      	movs	r0, #10
 80012e0:	f001 fac1 	bl	8002866 <ILI9341_WriteString>
	ILI9341_WriteString(30, 40, "20202647", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 80012e4:	4bb1      	ldr	r3, [pc, #708]	; (80015ac <main+0x318>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	9202      	str	r2, [sp, #8]
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	9200      	str	r2, [sp, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4aae      	ldr	r2, [pc, #696]	; (80015b0 <main+0x31c>)
 80012f8:	2128      	movs	r1, #40	; 0x28
 80012fa:	201e      	movs	r0, #30
 80012fc:	f001 fab3 	bl	8002866 <ILI9341_WriteString>
	ILI9341_WriteString(235, 40, "20202543", Font_7x10, ILI9341_WHITE, ILI9341_BLACK);
 8001300:	4baa      	ldr	r3, [pc, #680]	; (80015ac <main+0x318>)
 8001302:	2200      	movs	r2, #0
 8001304:	9202      	str	r2, [sp, #8]
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	9201      	str	r2, [sp, #4]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4aa8      	ldr	r2, [pc, #672]	; (80015b4 <main+0x320>)
 8001314:	2128      	movs	r1, #40	; 0x28
 8001316:	20eb      	movs	r0, #235	; 0xeb
 8001318:	f001 faa5 	bl	8002866 <ILI9341_WriteString>
	ILI9341_DrawLine(0, 55, 320, 55, ILI9341_WHITE);
 800131c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2337      	movs	r3, #55	; 0x37
 8001324:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001328:	2137      	movs	r1, #55	; 0x37
 800132a:	2000      	movs	r0, #0
 800132c:	f001 f9a1 	bl	8002672 <ILI9341_DrawLine>
	ILI9341_DrawLine(0, 200, 320, 200, ILI9341_WHITE);
 8001330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	23c8      	movs	r3, #200	; 0xc8
 8001338:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800133c:	21c8      	movs	r1, #200	; 0xc8
 800133e:	2000      	movs	r0, #0
 8001340:	f001 f997 	bl	8002672 <ILI9341_DrawLine>
	ILI9341_DrawLine(250, 55, 250, 200, ILI9341_WHITE);
 8001344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	23c8      	movs	r3, #200	; 0xc8
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2137      	movs	r1, #55	; 0x37
 8001350:	20fa      	movs	r0, #250	; 0xfa
 8001352:	f001 f98e 	bl	8002672 <ILI9341_DrawLine>
	ILI9341_WriteString(10, 180, "Mode:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 8001356:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <main+0x310>)
 8001358:	2200      	movs	r2, #0
 800135a:	9202      	str	r2, [sp, #8]
 800135c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001360:	9201      	str	r2, [sp, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	9200      	str	r2, [sp, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a93      	ldr	r2, [pc, #588]	; (80015b8 <main+0x324>)
 800136a:	21b4      	movs	r1, #180	; 0xb4
 800136c:	200a      	movs	r0, #10
 800136e:	f001 fa7a 	bl	8002866 <ILI9341_WriteString>
	ILI9341_WriteString(150, 180, "Hello", Font_11x18, ILI9341_YELLOW, ILI9341_BLACK);
 8001372:	4b8c      	ldr	r3, [pc, #560]	; (80015a4 <main+0x310>)
 8001374:	2200      	movs	r2, #0
 8001376:	9202      	str	r2, [sp, #8]
 8001378:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a8d      	ldr	r2, [pc, #564]	; (80015bc <main+0x328>)
 8001386:	21b4      	movs	r1, #180	; 0xb4
 8001388:	2096      	movs	r0, #150	; 0x96
 800138a:	f001 fa6c 	bl	8002866 <ILI9341_WriteString>
	ILI9341_WriteString(100, 210, "MANDEVICES", Font_11x18, ILI9341_RED, ILI9341_BLACK);
 800138e:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <main+0x310>)
 8001390:	2200      	movs	r2, #0
 8001392:	9202      	str	r2, [sp, #8]
 8001394:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <main+0x32c>)
 80013a2:	21d2      	movs	r1, #210	; 0xd2
 80013a4:	2064      	movs	r0, #100	; 0x64
 80013a6:	f001 fa5e 	bl	8002866 <ILI9341_WriteString>

	//Data
	ILI9341_WriteString(10, 60, "Temperature:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80013aa:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <main+0x310>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	9202      	str	r2, [sp, #8]
 80013b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	9200      	str	r2, [sp, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a81      	ldr	r2, [pc, #516]	; (80015c4 <main+0x330>)
 80013be:	213c      	movs	r1, #60	; 0x3c
 80013c0:	200a      	movs	r0, #10
 80013c2:	f001 fa50 	bl	8002866 <ILI9341_WriteString>
	ftoa(Node_1.Temperature, StrgTemp, 1);
 80013c6:	4b80      	ldr	r3, [pc, #512]	; (80015c8 <main+0x334>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	2101      	movs	r1, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	f000 fc9e 	bl	8001d18 <ftoa>
	ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 80013dc:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <main+0x310>)
 80013de:	f107 0110 	add.w	r1, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	460a      	mov	r2, r1
 80013f4:	213c      	movs	r1, #60	; 0x3c
 80013f6:	2096      	movs	r0, #150	; 0x96
 80013f8:	f001 fa35 	bl	8002866 <ILI9341_WriteString>

	ILI9341_WriteString(10, 90, "Humidity:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80013fc:	4b69      	ldr	r3, [pc, #420]	; (80015a4 <main+0x310>)
 80013fe:	2200      	movs	r2, #0
 8001400:	9202      	str	r2, [sp, #8]
 8001402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001406:	9201      	str	r2, [sp, #4]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6f      	ldr	r2, [pc, #444]	; (80015cc <main+0x338>)
 8001410:	215a      	movs	r1, #90	; 0x5a
 8001412:	200a      	movs	r0, #10
 8001414:	f001 fa27 	bl	8002866 <ILI9341_WriteString>
	intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001418:	4b6b      	ldr	r3, [pc, #428]	; (80015c8 <main+0x334>)
 800141a:	edd3 7a01 	vldr	s15, [r3, #4]
 800141e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2202      	movs	r2, #2
 8001428:	4619      	mov	r1, r3
 800142a:	ee17 0a90 	vmov	r0, s15
 800142e:	f000 fccf 	bl	8001dd0 <intToStr>
	ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001432:	4b5c      	ldr	r3, [pc, #368]	; (80015a4 <main+0x310>)
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	9202      	str	r2, [sp, #8]
 800143c:	221f      	movs	r2, #31
 800143e:	9201      	str	r2, [sp, #4]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	9200      	str	r2, [sp, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	460a      	mov	r2, r1
 8001448:	215a      	movs	r1, #90	; 0x5a
 800144a:	2096      	movs	r0, #150	; 0x96
 800144c:	f001 fa0b 	bl	8002866 <ILI9341_WriteString>
	ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001450:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <main+0x310>)
 8001452:	2200      	movs	r2, #0
 8001454:	9202      	str	r2, [sp, #8]
 8001456:	221f      	movs	r2, #31
 8001458:	9201      	str	r2, [sp, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	9200      	str	r2, [sp, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a5b      	ldr	r2, [pc, #364]	; (80015d0 <main+0x33c>)
 8001462:	215a      	movs	r1, #90	; 0x5a
 8001464:	20b4      	movs	r0, #180	; 0xb4
 8001466:	f001 f9fe 	bl	8002866 <ILI9341_WriteString>

	ILI9341_WriteString(10, 120, "BPM:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <main+0x310>)
 800146c:	2200      	movs	r2, #0
 800146e:	9202      	str	r2, [sp, #8]
 8001470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001474:	9201      	str	r2, [sp, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	9200      	str	r2, [sp, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a55      	ldr	r2, [pc, #340]	; (80015d4 <main+0x340>)
 800147e:	2178      	movs	r1, #120	; 0x78
 8001480:	200a      	movs	r0, #10
 8001482:	f001 f9f0 	bl	8002866 <ILI9341_WriteString>
	intToStr(Node_1.bpm, Strgbpm, 2);
 8001486:	4b50      	ldr	r3, [pc, #320]	; (80015c8 <main+0x334>)
 8001488:	7a1b      	ldrb	r3, [r3, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2202      	movs	r2, #2
 8001492:	4619      	mov	r1, r3
 8001494:	f000 fc9c 	bl	8001dd0 <intToStr>
	ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <main+0x310>)
 800149a:	f107 0108 	add.w	r1, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	9202      	str	r2, [sp, #8]
 80014a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014a6:	9201      	str	r2, [sp, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	460a      	mov	r2, r1
 80014b0:	2178      	movs	r1, #120	; 0x78
 80014b2:	2096      	movs	r0, #150	; 0x96
 80014b4:	f001 f9d7 	bl	8002866 <ILI9341_WriteString>

	ILI9341_WriteString(10, 150, "Spo2:", Font_11x18, ILI9341_WHITE, ILI9341_BLACK);
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <main+0x310>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	9202      	str	r2, [sp, #8]
 80014be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	685a      	ldr	r2, [r3, #4]
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <main+0x344>)
 80014cc:	2196      	movs	r1, #150	; 0x96
 80014ce:	200a      	movs	r0, #10
 80014d0:	f001 f9c9 	bl	8002866 <ILI9341_WriteString>
	intToStr(Node_1.spo2, Strgspo2, 2);
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <main+0x334>)
 80014d6:	7a5b      	ldrb	r3, [r3, #9]
 80014d8:	4618      	mov	r0, r3
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2202      	movs	r2, #2
 80014de:	4619      	mov	r1, r3
 80014e0:	f000 fc76 	bl	8001dd0 <intToStr>
	ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 80014e4:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <main+0x310>)
 80014e6:	1d39      	adds	r1, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	9202      	str	r2, [sp, #8]
 80014ec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	460a      	mov	r2, r1
 80014fa:	2196      	movs	r1, #150	; 0x96
 80014fc:	2096      	movs	r0, #150	; 0x96
 80014fe:	f001 f9b2 	bl	8002866 <ILI9341_WriteString>



	HAL_UART_Receive_IT(&huart2, (uint8_t*) rxBuff, 8);
 8001502:	2208      	movs	r2, #8
 8001504:	4935      	ldr	r1, [pc, #212]	; (80015dc <main+0x348>)
 8001506:	4836      	ldr	r0, [pc, #216]	; (80015e0 <main+0x34c>)
 8001508:	f005 fb9f 	bl	8006c4a <HAL_UART_Receive_IT>
	max30102_init();
 800150c:	f001 fa84 	bl	8002a18 <max30102_init>
	DHT_Init(&DHT1, DHT11, &htim11, DHT_GPIO_Port, DHT_Pin);
 8001510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <main+0x350>)
 8001518:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <main+0x354>)
 800151a:	2101      	movs	r1, #1
 800151c:	4833      	ldr	r0, [pc, #204]	; (80015ec <main+0x358>)
 800151e:	f000 fe0d 	bl	800213c <DHT_Init>
//	              uint8_t heartReat = max30102_getHeartRate();
//	              sprintf(str, "HR: %3d, SPO2: %3d\n", heartReat, spo2);
//	          HAL_UART_Transmit(&huart2, (uint8_t*) str, 20, 20);
//	          }

		DHT_ReadTempHum(&DHT1);
 8001522:	4832      	ldr	r0, [pc, #200]	; (80015ec <main+0x358>)
 8001524:	f000 fe31 	bl	800218a <DHT_ReadTempHum>

		Temperature = DHT1.Temp;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <main+0x358>)
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4a30      	ldr	r2, [pc, #192]	; (80015f0 <main+0x35c>)
 800152e:	6013      	str	r3, [r2, #0]
		Humidity = DHT1.Humi;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <main+0x358>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <main+0x360>)
 8001536:	6013      	str	r3, [r2, #0]
		sprintf(str1, "temp: %2f, humd: %2f\n", Temperature, Humidity);
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <main+0x35c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f81b 	bl	8000578 <__aeabi_f2d>
 8001542:	4604      	mov	r4, r0
 8001544:	460d      	mov	r5, r1
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <main+0x360>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f814 	bl	8000578 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9cd 2300 	strd	r2, r3, [sp]
 8001558:	4622      	mov	r2, r4
 800155a:	462b      	mov	r3, r5
 800155c:	4926      	ldr	r1, [pc, #152]	; (80015f8 <main+0x364>)
 800155e:	4827      	ldr	r0, [pc, #156]	; (80015fc <main+0x368>)
 8001560:	f007 f9be 	bl	80088e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) str1, 24, 20);
 8001564:	2314      	movs	r3, #20
 8001566:	2218      	movs	r2, #24
 8001568:	4924      	ldr	r1, [pc, #144]	; (80015fc <main+0x368>)
 800156a:	481d      	ldr	r0, [pc, #116]	; (80015e0 <main+0x34c>)
 800156c:	f005 fadb 	bl	8006b26 <HAL_UART_Transmit>



		//HAL_GPIO_TgglePin(GPIOC, GPIO_PIN_13);
		ftoa(Node_1.Temperature, StrgTemp, 1);
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <main+0x334>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f000 fbc9 	bl	8001d18 <ftoa>
		ILI9341_WriteString(150, 60, StrgTemp, Font_11x18, ILI9341_ORANGE, ILI9341_BLACK);
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <main+0x310>)
 8001588:	f107 0110 	add.w	r1, r7, #16
 800158c:	2200      	movs	r2, #0
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	f64f 5220 	movw	r2, #64800	; 0xfd20
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	460a      	mov	r2, r1
 800159e:	213c      	movs	r1, #60	; 0x3c
 80015a0:	e02e      	b.n	8001600 <main+0x36c>
 80015a2:	bf00      	nop
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	0800d310 	.word	0x0800d310
 80015ac:	20000004 	.word	0x20000004
 80015b0:	0800d330 	.word	0x0800d330
 80015b4:	0800d33c 	.word	0x0800d33c
 80015b8:	0800d348 	.word	0x0800d348
 80015bc:	0800d350 	.word	0x0800d350
 80015c0:	0800d358 	.word	0x0800d358
 80015c4:	0800d364 	.word	0x0800d364
 80015c8:	20000260 	.word	0x20000260
 80015cc:	0800d374 	.word	0x0800d374
 80015d0:	0800d380 	.word	0x0800d380
 80015d4:	0800d384 	.word	0x0800d384
 80015d8:	0800d38c 	.word	0x0800d38c
 80015dc:	2000026c 	.word	0x2000026c
 80015e0:	20000380 	.word	0x20000380
 80015e4:	40020800 	.word	0x40020800
 80015e8:	20000338 	.word	0x20000338
 80015ec:	200002bc 	.word	0x200002bc
 80015f0:	200002d4 	.word	0x200002d4
 80015f4:	200002d8 	.word	0x200002d8
 80015f8:	0800d394 	.word	0x0800d394
 80015fc:	200002a0 	.word	0x200002a0
 8001600:	2096      	movs	r0, #150	; 0x96
 8001602:	f001 f930 	bl	8002866 <ILI9341_WriteString>

		intToStr((int)Node_1.Humidity, StrgHumd, 2);
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <main+0x430>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2202      	movs	r2, #2
 8001616:	4619      	mov	r1, r3
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f000 fbd8 	bl	8001dd0 <intToStr>
		ILI9341_WriteString(150, 90, StrgHumd, Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <main+0x434>)
 8001622:	f107 010c 	add.w	r1, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	9202      	str	r2, [sp, #8]
 800162a:	221f      	movs	r2, #31
 800162c:	9201      	str	r2, [sp, #4]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	460a      	mov	r2, r1
 8001636:	215a      	movs	r1, #90	; 0x5a
 8001638:	2096      	movs	r0, #150	; 0x96
 800163a:	f001 f914 	bl	8002866 <ILI9341_WriteString>
		ILI9341_WriteString(180, 90, "%", Font_11x18, ILI9341_BLUE, ILI9341_BLACK);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <main+0x434>)
 8001640:	2200      	movs	r2, #0
 8001642:	9202      	str	r2, [sp, #8]
 8001644:	221f      	movs	r2, #31
 8001646:	9201      	str	r2, [sp, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1f      	ldr	r2, [pc, #124]	; (80016cc <main+0x438>)
 8001650:	215a      	movs	r1, #90	; 0x5a
 8001652:	20b4      	movs	r0, #180	; 0xb4
 8001654:	f001 f907 	bl	8002866 <ILI9341_WriteString>

		intToStr(Node_1.bpm, Strgbpm, 2);
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <main+0x430>)
 800165a:	7a1b      	ldrb	r3, [r3, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2202      	movs	r2, #2
 8001664:	4619      	mov	r1, r3
 8001666:	f000 fbb3 	bl	8001dd0 <intToStr>
		ILI9341_WriteString(150, 120, Strgbpm, Font_11x18, ILI9341_GREEN, ILI9341_BLACK);
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <main+0x434>)
 800166c:	f107 0108 	add.w	r1, r7, #8
 8001670:	2200      	movs	r2, #0
 8001672:	9202      	str	r2, [sp, #8]
 8001674:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	9200      	str	r2, [sp, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	460a      	mov	r2, r1
 8001682:	2178      	movs	r1, #120	; 0x78
 8001684:	2096      	movs	r0, #150	; 0x96
 8001686:	f001 f8ee 	bl	8002866 <ILI9341_WriteString>

		intToStr(Node_1.spo2, Strgspo2, 2);
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <main+0x430>)
 800168c:	7a5b      	ldrb	r3, [r3, #9]
 800168e:	4618      	mov	r0, r3
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2202      	movs	r2, #2
 8001694:	4619      	mov	r1, r3
 8001696:	f000 fb9b 	bl	8001dd0 <intToStr>
		ILI9341_WriteString(150, 150, Strgspo2, Font_11x18, ILI9341_PINK, ILI9341_BLACK);
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <main+0x434>)
 800169c:	1d39      	adds	r1, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	9202      	str	r2, [sp, #8]
 80016a2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	460a      	mov	r2, r1
 80016b0:	2196      	movs	r1, #150	; 0x96
 80016b2:	2096      	movs	r0, #150	; 0x96
 80016b4:	f001 f8d7 	bl	8002866 <ILI9341_WriteString>
		HAL_Delay(3000);
 80016b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016bc:	f001 fb0a 	bl	8002cd4 <HAL_Delay>
		DHT_ReadTempHum(&DHT1);
 80016c0:	e72f      	b.n	8001522 <main+0x28e>
 80016c2:	bf00      	nop
 80016c4:	20000260 	.word	0x20000260
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	0800d380 	.word	0x0800d380

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0320 	add.w	r3, r7, #32
 80016da:	2230      	movs	r2, #48	; 0x30
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fa76 	bl	8007bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	4b28      	ldr	r3, [pc, #160]	; (800179c <SystemClock_Config+0xcc>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <SystemClock_Config+0xcc>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <SystemClock_Config+0xcc>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <SystemClock_Config+0xd0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <SystemClock_Config+0xd0>)
 800171e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001734:	2301      	movs	r3, #1
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001738:	2310      	movs	r3, #16
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173c:	2302      	movs	r3, #2
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001740:	2300      	movs	r3, #0
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001744:	2308      	movs	r3, #8
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001748:	2354      	movs	r3, #84	; 0x54
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001750:	2304      	movs	r3, #4
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f985 	bl	8005a68 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001764:	f000 f854 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2102      	movs	r1, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fbe7 	bl	8005f58 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001790:	f000 f83e 	bl	8001810 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	; 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	char keyword[] = "toggle\r\n";
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <HAL_UART_RxCpltCallback+0x58>)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b4:	c303      	stmia	r3!, {r0, r1}
 80017b6:	701a      	strb	r2, [r3, #0]
	if (huart == &huart2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_UART_RxCpltCallback+0x5c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d118      	bne.n	80017f2 <HAL_UART_RxCpltCallback+0x4e>
	{
		if (strcmp(rxBuff, keyword) == 0)
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	480f      	ldr	r0, [pc, #60]	; (8001804 <HAL_UART_RxCpltCallback+0x60>)
 80017c8:	f7fe fd0a 	bl	80001e0 <strcmp>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10f      	bne.n	80017f2 <HAL_UART_RxCpltCallback+0x4e>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_UART_RxCpltCallback+0x64>)
 80017d8:	f001 fe07 	bl	80033ea <HAL_GPIO_TogglePin>
			HAL_UART_Transmit(&huart2, (uint8_t*) "TOGGLE\r\n", 8, 10);
 80017dc:	230a      	movs	r3, #10
 80017de:	2208      	movs	r2, #8
 80017e0:	490a      	ldr	r1, [pc, #40]	; (800180c <HAL_UART_RxCpltCallback+0x68>)
 80017e2:	4807      	ldr	r0, [pc, #28]	; (8001800 <HAL_UART_RxCpltCallback+0x5c>)
 80017e4:	f005 f99f 	bl	8006b26 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, (uint8_t*) rxBuff, 8);
 80017e8:	2208      	movs	r2, #8
 80017ea:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_UART_RxCpltCallback+0x60>)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <HAL_UART_RxCpltCallback+0x5c>)
 80017ee:	f005 fa2c 	bl	8006c4a <HAL_UART_Receive_IT>
		}

	}
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	0800d3b8 	.word	0x0800d3b8
 8001800:	20000380 	.word	0x20000380
 8001804:	2000026c 	.word	0x2000026c
 8001808:	40020800 	.word	0x40020800
 800180c:	0800d3ac 	.word	0x0800d3ac

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	e7fe      	b.n	8001818 <Error_Handler+0x8>
	...

0800181c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MX_SPI1_Init+0x64>)
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <MX_SPI1_Init+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_SPI1_Init+0x64>)
 8001828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800182c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_SPI1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_SPI1_Init+0x64>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_SPI1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_SPI1_Init+0x64>)
 8001848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_SPI1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_SPI1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_SPI1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_SPI1_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_SPI1_Init+0x64>)
 8001868:	220a      	movs	r2, #10
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_SPI1_Init+0x64>)
 800186e:	f004 fd53 	bl	8006318 <HAL_SPI_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001878:	f7ff ffca 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200002dc 	.word	0x200002dc
 8001884:	40013000 	.word	0x40013000

08001888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_SPI_MspInit+0x84>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d12b      	bne.n	8001902 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_SPI_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f2:	2305      	movs	r3, #5
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_SPI_MspInit+0x8c>)
 80018fe:	f001 fbbf 	bl	8003080 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40013000 	.word	0x40013000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f001 f96e 	bl	8002c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <I2C1_EV_IRQHandler+0x10>)
 80019c2:	f002 fa07 	bl	8003dd4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000020c 	.word	0x2000020c

080019d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <USART2_IRQHandler+0x10>)
 80019d6:	f005 f969 	bl	8006cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000380 	.word	0x20000380

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019fe:	f006 f8bd 	bl	8007b7c <__errno>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2216      	movs	r2, #22
 8001a06:	601a      	str	r2, [r3, #0]
  return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_exit>:

void _exit (int status)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffe7 	bl	80019f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a26:	e7fe      	b.n	8001a26 <_exit+0x12>

08001a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
  }

  return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
  }
  return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f006 f822 	bl	8007b7c <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20010000 	.word	0x20010000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000334 	.word	0x20000334
 8001b6c:	200003d8 	.word	0x200003d8

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <MX_TIM11_Init+0x44>)
 8001b9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50-1;
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001ba0:	2231      	movs	r2, #49	; 0x31
 8001ba2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001bac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001bb0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_TIM11_Init+0x40>)
 8001bc0:	f004 fe3a 	bl	8006838 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001bca:	f7ff fe21 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000338 	.word	0x20000338
 8001bd8:	40014800 	.word	0x40014800

08001bdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_TIM_Base_MspInit+0x3c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10d      	bne.n	8001c0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_TIM_Base_MspInit+0x40>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_TIM_Base_MspInit+0x40>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <HAL_TIM_Base_MspInit+0x40>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40014800 	.word	0x40014800
 8001c1c:	40023800 	.word	0x40023800

08001c20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <MX_USART2_UART_Init+0x50>)
 8001c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c46:	220c      	movs	r2, #12
 8001c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_USART2_UART_Init+0x4c>)
 8001c58:	f004 ff18 	bl	8006a8c <HAL_UART_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c62:	f7ff fdd5 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000380 	.word	0x20000380
 8001c70:	40004400 	.word	0x40004400

08001c74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_UART_MspInit+0x94>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d133      	bne.n	8001cfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_UART_MspInit+0x98>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cce:	230c      	movs	r3, #12
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_UART_MspInit+0x9c>)
 8001cea:	f001 f9c9 	bl	8003080 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2026      	movs	r0, #38	; 0x26
 8001cf4:	f001 f8ed 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf8:	2026      	movs	r0, #38	; 0x26
 8001cfa:	f001 f906 	bl	8002f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	; 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000
 8001d14:	00000000 	.word	0x00000000

08001d18 <ftoa>:
#include "common.h"
#include <math.h>
#include <stdio.h>
// Converts a floating-point/double number to a string.
void ftoa(float n, char* res, int afterpoint)
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d22:	60b8      	str	r0, [r7, #8]
 8001d24:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	ee17 3a90 	vmov	r3, s15
 8001d32:	61fb      	str	r3, [r7, #28]
    // Extract floating part
    float fpart = n - (float)ipart;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d46:	edc7 7a06 	vstr	s15, [r7, #24]
    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	69f8      	ldr	r0, [r7, #28]
 8001d50:	f000 f83e 	bl	8001dd0 <intToStr>
 8001d54:	6178      	str	r0, [r7, #20]
    // check for display option after point
    if (afterpoint != 0)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d030      	beq.n	8001dbe <ftoa+0xa6>
    {
        res[i] = '.'; // add dot
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4413      	add	r3, r2
 8001d62:	222e      	movs	r2, #46	; 0x2e
 8001d64:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	460d      	mov	r5, r1
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	ec43 2b11 	vmov	d1, r2, r3
 8001d7e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8001dc8 <ftoa+0xb0>
 8001d82:	f00a fb9d 	bl	800c4c0 <pow>
 8001d86:	ec53 2b10 	vmov	r2, r3, d0
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f7fe fc4b 	bl	8000628 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe ff3d 	bl	8000c18 <__aeabi_d2f>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	61bb      	str	r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 8001da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4619      	mov	r1, r3
 8001db6:	ee17 0a90 	vmov	r0, s15
 8001dba:	f000 f809 	bl	8001dd0 <intToStr>
    }
}
 8001dbe:	bf00      	nop
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	40240000 	.word	0x40240000

08001dd0 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
    if (x == 0)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d126      	bne.n	8001e34 <intToStr+0x64>
    {
        str[i++] = '0';
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	617a      	str	r2, [r7, #20]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	2230      	movs	r2, #48	; 0x30
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e029      	b.n	8001e4c <intToStr+0x7c>
    }
    else
    {
        while (x)
        {
            str[i++] = (x % 10) + '0';
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <intToStr+0xa0>)
 8001dfc:	fb83 1302 	smull	r1, r3, r3, r2
 8001e00:	1099      	asrs	r1, r3, #2
 8001e02:	17d3      	asrs	r3, r2, #31
 8001e04:	1ac9      	subs	r1, r1, r3
 8001e06:	460b      	mov	r3, r1
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	1ad1      	subs	r1, r2, r3
 8001e10:	b2ca      	uxtb	r2, r1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	1c59      	adds	r1, r3, #1
 8001e16:	6179      	str	r1, [r7, #20]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3230      	adds	r2, #48	; 0x30
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
            x = x / 10;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <intToStr+0xa0>)
 8001e28:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2c:	1092      	asrs	r2, r2, #2
 8001e2e:	17db      	asrs	r3, r3, #31
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
        while (x)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1de      	bne.n	8001df8 <intToStr+0x28>
        }
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001e3a:	e007      	b.n	8001e4c <intToStr+0x7c>
        str[i++] = '0';
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	617a      	str	r2, [r7, #20]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4413      	add	r3, r2
 8001e48:	2230      	movs	r2, #48	; 0x30
 8001e4a:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf3      	blt.n	8001e3c <intToStr+0x6c>

    reverse(str, i);
 8001e54:	6979      	ldr	r1, [r7, #20]
 8001e56:	68b8      	ldr	r0, [r7, #8]
 8001e58:	f000 f80c 	bl	8001e74 <reverse>
    str[i] = '\0';
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
    return i;
 8001e66:	697b      	ldr	r3, [r7, #20]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	66666667 	.word	0x66666667

08001e74 <reverse>:

void reverse(char* str, int len)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
    while (i < j)
 8001e88:	e018      	b.n	8001ebc <reverse+0x48>
    {
        temp = str[i];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	441a      	add	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
        i++;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
        j--;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
    while (i < j)
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbe2      	blt.n	8001e8a <reverse+0x16>
    }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <DELAY_TIM_Init>:
 */


#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f004 fcfc 	bl	80068d8 <HAL_TIM_Base_Start>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 8001efc:	bf00      	nop
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d3f9      	bcc.n	8001efe <DELAY_TIM_Us+0x16>
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DHT_DelayInit>:
#include "usart.h"

extern UART_HandleTypeDef huart2;

static void DHT_DelayInit(DHT_t* DHT)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DHT->Timer);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ffd4 	bl	8001ed2 <DELAY_TIM_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <DHT_DelayUs>:
static void DHT_DelayUs(DHT_t* DHT, uint16_t Time)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DHT->Timer, Time);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ffce 	bl	8001ee8 <DELAY_TIM_Us>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_t* DHT)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->Pin;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	891b      	ldrh	r3, [r3, #8]
 8001f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f107 020c 	add.w	r2, r7, #12
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 f87b 	bl	8003080 <HAL_GPIO_Init>
}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_t* DHT)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b088      	sub	sp, #32
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->Pin;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	891b      	ldrh	r3, [r3, #8]
 8001fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f107 020c 	add.w	r2, r7, #12
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f001 f85c 	bl	8003080 <HAL_GPIO_Init>
}
 8001fc8:	bf00      	nop
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <DHT_WritePin>:
static void DHT_WritePin(DHT_t* DHT, uint8_t Value)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68d8      	ldr	r0, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	891b      	ldrh	r3, [r3, #8]
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f001 f9e6 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_t* DHT)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	uint8_t Value;
	Value =  HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	891b      	ldrh	r3, [r3, #8]
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f001 f9be 	bl	8003388 <HAL_GPIO_ReadPin>
 800200c:	4603      	mov	r3, r0
 800200e:	73fb      	strb	r3, [r7, #15]
	return Value;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <DHT_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_t* DHT)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinOut(DHT);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff93 	bl	8001f54 <DHT_SetPinOut>

	DHT_WritePin(DHT, 0);
 800202e:	2100      	movs	r1, #0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ffcd 	bl	8001fd0 <DHT_WritePin>

	DHT_DelayUs(DHT, DHT->Type);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	885b      	ldrh	r3, [r3, #2]
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff78 	bl	8001f32 <DHT_DelayUs>

	DHT_SetPinIn(DHT);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa5 	bl	8001f92 <DHT_SetPinIn>

	DHT_DelayUs(DHT, 50);
 8002048:	2132      	movs	r1, #50	; 0x32
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ff71 	bl	8001f32 <DHT_DelayUs>

	if (!DHT_ReadPin(DHT))
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ffcf 	bl	8001ff4 <DHT_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10e      	bne.n	800207a <DHT_Start+0x5e>
	{
		DHT_DelayUs(DHT, 80);
 800205c:	2150      	movs	r1, #80	; 0x50
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ff67 	bl	8001f32 <DHT_DelayUs>
		if(DHT_ReadPin(DHT))
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ffc5 	bl	8001ff4 <DHT_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <DHT_Start+0x5a>
		{
			Response = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e001      	b.n	800207a <DHT_Start+0x5e>
		}
		else Response = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
	}

	while(DHT_ReadPin(DHT));
 800207a:	bf00      	nop
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ffb9 	bl	8001ff4 <DHT_ReadPin>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <DHT_Start+0x60>
	HAL_UART_Transmit(&huart2, (uint8_t*) "checkcheckcheckcheck\r\n", 24, 20);
 8002088:	2314      	movs	r3, #20
 800208a:	2218      	movs	r2, #24
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <DHT_Start+0x84>)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <DHT_Start+0x88>)
 8002090:	f004 fd49 	bl	8006b26 <HAL_UART_Transmit>
	return Response;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800d3c4 	.word	0x0800d3c4
 80020a4:	20000380 	.word	0x20000380

080020a8 <DHT_Read>:
static uint8_t DHT_Read(DHT_t* DHT)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinIn(DHT);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff6c 	bl	8001f92 <DHT_SetPinIn>
	for(int i = 0; i<8; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	e035      	b.n	800212c <DHT_Read+0x84>
	{
		while(!DHT_ReadPin(DHT));
 80020c0:	bf00      	nop
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff96 	bl	8001ff4 <DHT_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f9      	beq.n	80020c2 <DHT_Read+0x1a>
		DHT_DelayUs(DHT, 40);
 80020ce:	2128      	movs	r1, #40	; 0x28
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff2e 	bl	8001f32 <DHT_DelayUs>
		if(!DHT_ReadPin(DHT))
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff8c 	bl	8001ff4 <DHT_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10e      	bne.n	8002100 <DHT_Read+0x58>
		{
			Value &= ~(1<<(7-i));
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f1c3 0307 	rsb	r3, r3, #7
 80020e8:	2201      	movs	r2, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	b25a      	sxtb	r2, r3
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e00b      	b.n	8002118 <DHT_Read+0x70>
		}
		else Value |= 1<<(7-i);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2201      	movs	r2, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	b25a      	sxtb	r2, r3
 800210e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002112:	4313      	orrs	r3, r2
 8002114:	b25b      	sxtb	r3, r3
 8002116:	73fb      	strb	r3, [r7, #15]
		while(DHT_ReadPin(DHT));
 8002118:	bf00      	nop
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff6a 	bl	8001ff4 <DHT_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f9      	bne.n	800211a <DHT_Read+0x72>
	for(int i = 0; i<8; i++)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	3301      	adds	r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b07      	cmp	r3, #7
 8002130:	ddc6      	ble.n	80020c0 <DHT_Read+0x18>
	}
	return Value;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_t* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	460b      	mov	r3, r1
 800214a:	72fb      	strb	r3, [r7, #11]
	if(DHT_Type == DHT11)
 800214c:	7afb      	ldrb	r3, [r7, #11]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d104      	bne.n	800215c <DHT_Init+0x20>
	{
		DHT->Type = DHT11_STARTTIME;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f244 6250 	movw	r2, #18000	; 0x4650
 8002158:	805a      	strh	r2, [r3, #2]
 800215a:	e006      	b.n	800216a <DHT_Init+0x2e>
	}
	else if(DHT_Type == DHT22)
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d103      	bne.n	800216a <DHT_Init+0x2e>
	{
		DHT->Type = DHT22_STARTTIME;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8002168:	805a      	strh	r2, [r3, #2]
	}
	DHT->PORT = DH_PORT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	60da      	str	r2, [r3, #12]
	DHT->Pin = DH_Pin;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8b3a      	ldrh	r2, [r7, #24]
 8002174:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fecb 	bl	8001f18 <DHT_DelayInit>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <DHT_ReadTempHum>:

uint8_t DHT_ReadTempHum(DHT_t* DHT)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]

	DHT->Respone =0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
	uint8_t Temp1, Temp2, RH1, RH2;
	uint16_t Temp, Humi, SUM = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	82fb      	strh	r3, [r7, #22]
	DHT->Respone = DHT_Start(DHT);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff3d 	bl	800201c <DHT_Start>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	701a      	strb	r2, [r3, #0]
	RH1 = DHT_Read(DHT);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff7c 	bl	80020a8 <DHT_Read>
 80021b0:	4603      	mov	r3, r0
 80021b2:	757b      	strb	r3, [r7, #21]
	RH2 = DHT_Read(DHT);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff77 	bl	80020a8 <DHT_Read>
 80021ba:	4603      	mov	r3, r0
 80021bc:	753b      	strb	r3, [r7, #20]
	Temp1 = DHT_Read(DHT);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ff72 	bl	80020a8 <DHT_Read>
 80021c4:	4603      	mov	r3, r0
 80021c6:	74fb      	strb	r3, [r7, #19]
	Temp2 = DHT_Read(DHT);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff6d 	bl	80020a8 <DHT_Read>
 80021ce:	4603      	mov	r3, r0
 80021d0:	74bb      	strb	r3, [r7, #18]
	SUM = DHT_Read(DHT);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff68 	bl	80020a8 <DHT_Read>
 80021d8:	4603      	mov	r3, r0
 80021da:	82fb      	strh	r3, [r7, #22]
	Temp = (Temp1<<8)|Temp2;
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	7cbb      	ldrb	r3, [r7, #18]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	823b      	strh	r3, [r7, #16]
	Humi = (RH1<<8)|RH2;
 80021ec:	7d7b      	ldrb	r3, [r7, #21]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	7d3b      	ldrb	r3, [r7, #20]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	81fb      	strh	r3, [r7, #14]
	DHT->Temp = (float)(Temp1);
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	edc3 7a04 	vstr	s15, [r3, #16]
	DHT->Humi = (float)(RH1);
 800220c:	7d7b      	ldrb	r3, [r7, #21]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	edc3 7a05 	vstr	s15, [r3, #20]
	return SUM;
 800221c:	8afb      	ldrh	r3, [r7, #22]
 800221e:	b2db      	uxtb	r3, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <ILI9341_Select>:
#include "stm32f4xx_hal.h"
#include "ili9341.h"


static void ILI9341_Select()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002232:	4802      	ldr	r0, [pc, #8]	; (800223c <ILI9341_Select+0x14>)
 8002234:	f001 f8c0 	bl	80033b8 <HAL_GPIO_WritePin>

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020000 	.word	0x40020000

08002240 <ILI9341_Unselect>:

void ILI9341_Unselect()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224a:	4802      	ldr	r0, [pc, #8]	; (8002254 <ILI9341_Unselect+0x14>)
 800224c:	f001 f8b4 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40020000 	.word	0x40020000

08002258 <ILI9341_Reset>:

static void ILI9341_Reset()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <ILI9341_Reset+0x28>)
 8002264:	f001 f8a8 	bl	80033b8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002268:	200a      	movs	r0, #10
 800226a:	f000 fd33 	bl	8002cd4 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <ILI9341_Reset+0x28>)
 8002276:	f001 f89f 	bl	80033b8 <HAL_GPIO_WritePin>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40020400 	.word	0x40020400

08002284 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002294:	4806      	ldr	r0, [pc, #24]	; (80022b0 <ILI9341_WriteCommand+0x2c>)
 8002296:	f001 f88f 	bl	80033b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800229a:	1df9      	adds	r1, r7, #7
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	2201      	movs	r2, #1
 80022a2:	4804      	ldr	r0, [pc, #16]	; (80022b4 <ILI9341_WriteCommand+0x30>)
 80022a4:	f004 f8c1 	bl	800642a <HAL_SPI_Transmit>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40020400 	.word	0x40020400
 80022b4:	200002dc 	.word	0x200002dc

080022b8 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c8:	4810      	ldr	r0, [pc, #64]	; (800230c <ILI9341_WriteData+0x54>)
 80022ca:	f001 f875 	bl	80033b8 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80022ce:	e015      	b.n	80022fc <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d6:	bf28      	it	cs
 80022d8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80022dc:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80022de:	89fa      	ldrh	r2, [r7, #14]
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	480a      	ldr	r0, [pc, #40]	; (8002310 <ILI9341_WriteData+0x58>)
 80022e8:	f004 f89f 	bl	800642a <HAL_SPI_Transmit>
        buff += chunk_size;
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e6      	bne.n	80022d0 <ILI9341_WriteData+0x18>
    }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40020400 	.word	0x40020400
 8002310:	200002dc 	.word	0x200002dc

08002314 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	4604      	mov	r4, r0
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	80fb      	strh	r3, [r7, #6]
 8002326:	4603      	mov	r3, r0
 8002328:	80bb      	strh	r3, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	807b      	strh	r3, [r7, #2]
 800232e:	4613      	mov	r3, r2
 8002330:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8002332:	202a      	movs	r0, #42	; 0x2a
 8002334:	f7ff ffa6 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	733b      	strb	r3, [r7, #12]
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	737b      	strb	r3, [r7, #13]
 8002348:	887b      	ldrh	r3, [r7, #2]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	73bb      	strb	r3, [r7, #14]
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2104      	movs	r1, #4
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ffaa 	bl	80022b8 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8002364:	202b      	movs	r0, #43	; 0x2b
 8002366:	f7ff ff8d 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800236a:	88bb      	ldrh	r3, [r7, #4]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	b29b      	uxth	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	723b      	strb	r3, [r7, #8]
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	727b      	strb	r3, [r7, #9]
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	72bb      	strb	r3, [r7, #10]
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	2104      	movs	r1, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff91 	bl	80022b8 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	f7ff ff74 	bl	8002284 <ILI9341_WriteCommand>
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd90      	pop	{r4, r7, pc}

080023a4 <ILI9341_Init>:

void ILI9341_Init()
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b09b      	sub	sp, #108	; 0x6c
 80023a8:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80023aa:	f7ff ff3d 	bl	8002228 <ILI9341_Select>
    ILI9341_Reset();
 80023ae:	f7ff ff53 	bl	8002258 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff ff66 	bl	8002284 <ILI9341_WriteCommand>
    HAL_Delay(500);
 80023b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023bc:	f000 fc8a 	bl	8002cd4 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80023c0:	20cb      	movs	r0, #203	; 0xcb
 80023c2:	f7ff ff5f 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80023c6:	4a8a      	ldr	r2, [pc, #552]	; (80025f0 <ILI9341_Init+0x24c>)
 80023c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d0:	6018      	str	r0, [r3, #0]
 80023d2:	3304      	adds	r3, #4
 80023d4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80023d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023da:	2105      	movs	r1, #5
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff6b 	bl	80022b8 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80023e2:	20cf      	movs	r0, #207	; 0xcf
 80023e4:	f7ff ff4e 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80023e8:	4a82      	ldr	r2, [pc, #520]	; (80025f4 <ILI9341_Init+0x250>)
 80023ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	4611      	mov	r1, r2
 80023f2:	8019      	strh	r1, [r3, #0]
 80023f4:	3302      	adds	r3, #2
 80023f6:	0c12      	lsrs	r2, r2, #16
 80023f8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80023fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023fe:	2103      	movs	r1, #3
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff59 	bl	80022b8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8002406:	20e8      	movs	r0, #232	; 0xe8
 8002408:	f7ff ff3c 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 800240c:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <ILI9341_Init+0x254>)
 800240e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	4611      	mov	r1, r2
 8002416:	8019      	strh	r1, [r3, #0]
 8002418:	3302      	adds	r3, #2
 800241a:	0c12      	lsrs	r2, r2, #16
 800241c:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800241e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002422:	2103      	movs	r1, #3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff47 	bl	80022b8 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 800242a:	20ea      	movs	r0, #234	; 0xea
 800242c:	f7ff ff2a 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8002430:	2300      	movs	r3, #0
 8002432:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        ILI9341_WriteData(data, sizeof(data));
 8002436:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800243a:	2102      	movs	r1, #2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff3b 	bl	80022b8 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8002442:	20ed      	movs	r0, #237	; 0xed
 8002444:	f7ff ff1e 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <ILI9341_Init+0x258>)
 800244a:	653b      	str	r3, [r7, #80]	; 0x50
        ILI9341_WriteData(data, sizeof(data));
 800244c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002450:	2104      	movs	r1, #4
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff30 	bl	80022b8 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8002458:	20f7      	movs	r0, #247	; 0xf7
 800245a:	f7ff ff13 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800245e:	2320      	movs	r3, #32
 8002460:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8002464:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff24 	bl	80022b8 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8002470:	20c0      	movs	r0, #192	; 0xc0
 8002472:	f7ff ff07 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8002476:	2323      	movs	r3, #35	; 0x23
 8002478:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        ILI9341_WriteData(data, sizeof(data));
 800247c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002480:	2101      	movs	r1, #1
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff18 	bl	80022b8 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8002488:	20c1      	movs	r0, #193	; 0xc1
 800248a:	f7ff fefb 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800248e:	2310      	movs	r3, #16
 8002490:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        ILI9341_WriteData(data, sizeof(data));
 8002494:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002498:	2101      	movs	r1, #1
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff0c 	bl	80022b8 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 80024a0:	20c5      	movs	r0, #197	; 0xc5
 80024a2:	f7ff feef 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 80024a6:	f642 033e 	movw	r3, #10302	; 0x283e
 80024aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        ILI9341_WriteData(data, sizeof(data));
 80024ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff feff 	bl	80022b8 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80024ba:	20c7      	movs	r0, #199	; 0xc7
 80024bc:	f7ff fee2 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80024c0:	2386      	movs	r3, #134	; 0x86
 80024c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80024c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fef3 	bl	80022b8 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80024d2:	2036      	movs	r0, #54	; 0x36
 80024d4:	f7ff fed6 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80024d8:	2348      	movs	r3, #72	; 0x48
 80024da:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        ILI9341_WriteData(data, sizeof(data));
 80024de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024e2:	2101      	movs	r1, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fee7 	bl	80022b8 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80024ea:	203a      	movs	r0, #58	; 0x3a
 80024ec:	f7ff feca 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80024f0:	2355      	movs	r3, #85	; 0x55
 80024f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        ILI9341_WriteData(data, sizeof(data));
 80024f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fedb 	bl	80022b8 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8002502:	20b1      	movs	r0, #177	; 0xb1
 8002504:	f7ff febe 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8002508:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800250c:	863b      	strh	r3, [r7, #48]	; 0x30
        ILI9341_WriteData(data, sizeof(data));
 800250e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fecf 	bl	80022b8 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 800251a:	20b6      	movs	r0, #182	; 0xb6
 800251c:	f7ff feb2 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8002520:	4a37      	ldr	r2, [pc, #220]	; (8002600 <ILI9341_Init+0x25c>)
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4611      	mov	r1, r2
 800252a:	8019      	strh	r1, [r3, #0]
 800252c:	3302      	adds	r3, #2
 800252e:	0c12      	lsrs	r2, r2, #16
 8002530:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8002532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002536:	2103      	movs	r1, #3
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff febd 	bl	80022b8 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800253e:	20f2      	movs	r0, #242	; 0xf2
 8002540:	f7ff fea0 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        ILI9341_WriteData(data, sizeof(data));
 800254a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254e:	2101      	movs	r1, #1
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff feb1 	bl	80022b8 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8002556:	2026      	movs	r0, #38	; 0x26
 8002558:	f7ff fe94 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800255c:	2301      	movs	r3, #1
 800255e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        ILI9341_WriteData(data, sizeof(data));
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	2101      	movs	r1, #1
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fea5 	bl	80022b8 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800256e:	20e0      	movs	r0, #224	; 0xe0
 8002570:	f7ff fe88 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8002574:	4b23      	ldr	r3, [pc, #140]	; (8002604 <ILI9341_Init+0x260>)
 8002576:	f107 0414 	add.w	r4, r7, #20
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	c407      	stmia	r4!, {r0, r1, r2}
 800257e:	8023      	strh	r3, [r4, #0]
 8002580:	3402      	adds	r4, #2
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	7023      	strb	r3, [r4, #0]
                            0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	210f      	movs	r1, #15
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fe93 	bl	80022b8 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8002592:	20e1      	movs	r0, #225	; 0xe1
 8002594:	f7ff fe76 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <ILI9341_Init+0x264>)
 800259a:	1d3c      	adds	r4, r7, #4
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	c407      	stmia	r4!, {r0, r1, r2}
 80025a0:	8023      	strh	r3, [r4, #0]
 80025a2:	3402      	adds	r4, #2
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	7023      	strb	r3, [r4, #0]
                            0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	210f      	movs	r1, #15
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fe83 	bl	80022b8 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80025b2:	2011      	movs	r0, #17
 80025b4:	f7ff fe66 	bl	8002284 <ILI9341_WriteCommand>
    HAL_Delay(120);
 80025b8:	2078      	movs	r0, #120	; 0x78
 80025ba:	f000 fb8b 	bl	8002cd4 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80025be:	2029      	movs	r0, #41	; 0x29
 80025c0:	f7ff fe60 	bl	8002284 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80025c4:	2036      	movs	r0, #54	; 0x36
 80025c6:	f7ff fe5d 	bl	8002284 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80025ca:	23e8      	movs	r3, #232	; 0xe8
 80025cc:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80025ce:	463b      	mov	r3, r7
 80025d0:	2101      	movs	r1, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe70 	bl	80022b8 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80025d8:	f7ff fe32 	bl	8002240 <ILI9341_Unselect>

    HAL_GPIO_WritePin(ILI9341_LED_GPIO_Port, ILI9341_LED_Pin, SET);
 80025dc:	2201      	movs	r2, #1
 80025de:	2102      	movs	r1, #2
 80025e0:	480a      	ldr	r0, [pc, #40]	; (800260c <ILI9341_Init+0x268>)
 80025e2:	f000 fee9 	bl	80033b8 <HAL_GPIO_WritePin>
}
 80025e6:	bf00      	nop
 80025e8:	376c      	adds	r7, #108	; 0x6c
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	0800d3dc 	.word	0x0800d3dc
 80025f4:	0800d3e4 	.word	0x0800d3e4
 80025f8:	0800d3e8 	.word	0x0800d3e8
 80025fc:	81120364 	.word	0x81120364
 8002600:	0800d3ec 	.word	0x0800d3ec
 8002604:	0800d3f0 	.word	0x0800d3f0
 8002608:	0800d400 	.word	0x0800d400
 800260c:	40020400 	.word	0x40020400

08002610 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
 800261a:	460b      	mov	r3, r1
 800261c:	80bb      	strh	r3, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002628:	d21f      	bcs.n	800266a <ILI9341_DrawPixel+0x5a>
 800262a:	88bb      	ldrh	r3, [r7, #4]
 800262c:	2bef      	cmp	r3, #239	; 0xef
 800262e:	d81c      	bhi.n	800266a <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8002630:	f7ff fdfa 	bl	8002228 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	3301      	adds	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	88bb      	ldrh	r3, [r7, #4]
 800263c:	3301      	adds	r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	88b9      	ldrh	r1, [r7, #4]
 8002642:	88f8      	ldrh	r0, [r7, #6]
 8002644:	f7ff fe66 	bl	8002314 <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002648:	887b      	ldrh	r3, [r7, #2]
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	b29b      	uxth	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	733b      	strb	r3, [r7, #12]
 8002652:	887b      	ldrh	r3, [r7, #2]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	2102      	movs	r1, #2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe2a 	bl	80022b8 <ILI9341_WriteData>

    ILI9341_Unselect();
 8002664:	f7ff fdec 	bl	8002240 <ILI9341_Unselect>
 8002668:	e000      	b.n	800266c <ILI9341_DrawPixel+0x5c>
        return;
 800266a:	bf00      	nop
}
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b08d      	sub	sp, #52	; 0x34
 8002676:	af00      	add	r7, sp, #0
 8002678:	4604      	mov	r4, r0
 800267a:	4608      	mov	r0, r1
 800267c:	4611      	mov	r1, r2
 800267e:	461a      	mov	r2, r3
 8002680:	4623      	mov	r3, r4
 8002682:	80fb      	strh	r3, [r7, #6]
 8002684:	4603      	mov	r3, r0
 8002686:	80bb      	strh	r3, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	803b      	strh	r3, [r7, #0]
    uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8002690:	2300      	movs	r3, #0
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;

	delta_x = x2 - x1;
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 80026a0:	883a      	ldrh	r2, [r7, #0]
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 80026ac:	88bb      	ldrh	r3, [r7, #4]
 80026ae:	60bb      	str	r3, [r7, #8]

	if (delta_x > 0)
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dd02      	ble.n	80026bc <ILI9341_DrawLine+0x4a>
        incx = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e00b      	b.n	80026d4 <ILI9341_DrawLine+0x62>
	else if (delta_x == 0)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <ILI9341_DrawLine+0x56>
        incx = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e005      	b.n	80026d4 <ILI9341_DrawLine+0x62>
	else
    {
        incx = -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	617b      	str	r3, [r7, #20]
        delta_x = -delta_x;
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	425b      	negs	r3, r3
 80026d2:	623b      	str	r3, [r7, #32]
    }

    if (delta_y > 0)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	dd02      	ble.n	80026e0 <ILI9341_DrawLine+0x6e>
        incy = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e00b      	b.n	80026f8 <ILI9341_DrawLine+0x86>
	else if (delta_y==0)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <ILI9341_DrawLine+0x7a>
        incy = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e005      	b.n	80026f8 <ILI9341_DrawLine+0x86>
	else
    {
        incy = -1;
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	613b      	str	r3, [r7, #16]
        delta_y = -delta_y;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	425b      	negs	r3, r3
 80026f6:	61fb      	str	r3, [r7, #28]
    }

	if (delta_x > delta_y)
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dd02      	ble.n	8002706 <ILI9341_DrawLine+0x94>
        distance = delta_x;
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e001      	b.n	800270a <ILI9341_DrawLine+0x98>
	else
        distance = delta_y;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	61bb      	str	r3, [r7, #24]

	for(t = 0; t <= distance + 1; t++)
 800270a:	2300      	movs	r3, #0
 800270c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800270e:	e02b      	b.n	8002768 <ILI9341_DrawLine+0xf6>
	{
		ILI9341_DrawPixel(uRow, uCol, color);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	b29b      	uxth	r3, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	b291      	uxth	r1, r2
 8002718:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff77 	bl	8002610 <ILI9341_DrawPixel>

		xerr += delta_x;
 8002722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	4413      	add	r3, r2
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	627b      	str	r3, [r7, #36]	; 0x24

		if (xerr > distance)
 8002732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	429a      	cmp	r2, r3
 8002738:	dd07      	ble.n	800274a <ILI9341_DrawLine+0xd8>
		{
			xerr -= distance;
 800273a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	429a      	cmp	r2, r3
 8002750:	dd07      	ble.n	8002762 <ILI9341_DrawLine+0xf0>
		{
			yerr -= distance;
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
	for(t = 0; t <= distance + 1; t++)
 8002762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002764:	3301      	adds	r3, #1
 8002766:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002768:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	3301      	adds	r3, #1
 800276e:	429a      	cmp	r2, r3
 8002770:	ddce      	ble.n	8002710 <ILI9341_DrawLine+0x9e>
		}
	}
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3734      	adds	r7, #52	; 0x34
 8002778:	46bd      	mov	sp, r7
 800277a:	bd90      	pop	{r4, r7, pc}

0800277c <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800277c:	b082      	sub	sp, #8
 800277e:	b590      	push	{r4, r7, lr}
 8002780:	b089      	sub	sp, #36	; 0x24
 8002782:	af00      	add	r7, sp, #0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	460b      	mov	r3, r1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002792:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002796:	b29a      	uxth	r2, r3
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	4413      	add	r3, r2
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29c      	uxth	r4, r3
 80027a2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	88bb      	ldrh	r3, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	88b9      	ldrh	r1, [r7, #4]
 80027b4:	88f8      	ldrh	r0, [r7, #6]
 80027b6:	4622      	mov	r2, r4
 80027b8:	f7ff fdac 	bl	8002314 <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	e043      	b.n	800284a <ILI9341_WriteChar+0xce>
        b = font.data[(ch - 32) * font.height + i];
 80027c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	3b20      	subs	r3, #32
 80027c8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4619      	mov	r1, r3
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	440b      	add	r3, r1
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	e029      	b.n	8002838 <ILI9341_WriteChar+0xbc>
            if((b << j) & 0x8000)  {
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <ILI9341_WriteChar+0x96>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80027f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	743b      	strb	r3, [r7, #16]
 80027fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002800:	b2db      	uxtb	r3, r3
 8002802:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fd54 	bl	80022b8 <ILI9341_WriteData>
 8002810:	e00f      	b.n	8002832 <ILI9341_WriteChar+0xb6>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	733b      	strb	r3, [r7, #12]
 800281e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002822:	b2db      	uxtb	r3, r3
 8002824:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	2102      	movs	r1, #2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fd43 	bl	80022b8 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	3301      	adds	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800283c:	461a      	mov	r2, r3
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4293      	cmp	r3, r2
 8002842:	d3cf      	bcc.n	80027e4 <ILI9341_WriteChar+0x68>
    for(i = 0; i < font.height; i++) {
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3301      	adds	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800284e:	461a      	mov	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4293      	cmp	r3, r2
 8002854:	d3b5      	bcc.n	80027c2 <ILI9341_WriteChar+0x46>
            }
        }
    }
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002862:	b002      	add	sp, #8
 8002864:	4770      	bx	lr

08002866 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002866:	b082      	sub	sp, #8
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af04      	add	r7, sp, #16
 800286e:	603a      	str	r2, [r7, #0]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
 8002876:	460b      	mov	r3, r1
 8002878:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 800287a:	f7ff fcd5 	bl	8002228 <ILI9341_Select>

    while(*str) {
 800287e:	e02e      	b.n	80028de <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	7d3a      	ldrb	r2, [r7, #20]
 8002884:	4413      	add	r3, r2
 8002886:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800288a:	db13      	blt.n	80028b4 <ILI9341_WriteString+0x4e>
            x = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002890:	7d7b      	ldrb	r3, [r7, #21]
 8002892:	b29a      	uxth	r2, r3
 8002894:	88bb      	ldrh	r3, [r7, #4]
 8002896:	4413      	add	r3, r2
 8002898:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	7d7a      	ldrb	r2, [r7, #21]
 800289e:	4413      	add	r3, r2
 80028a0:	2bef      	cmp	r3, #239	; 0xef
 80028a2:	dc21      	bgt.n	80028e8 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d103      	bne.n	80028b4 <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	603b      	str	r3, [r7, #0]
                continue;
 80028b2:	e014      	b.n	80028de <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	88b9      	ldrh	r1, [r7, #4]
 80028ba:	88f8      	ldrh	r0, [r7, #6]
 80028bc:	8c3b      	ldrh	r3, [r7, #32]
 80028be:	9302      	str	r3, [sp, #8]
 80028c0:	8bbb      	ldrh	r3, [r7, #28]
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f7ff ff57 	bl	800277c <ILI9341_WriteChar>
        x += font.width;
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	4413      	add	r3, r2
 80028d6:	80fb      	strh	r3, [r7, #6]
        str++;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	603b      	str	r3, [r7, #0]
    while(*str) {
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1cc      	bne.n	8002880 <ILI9341_WriteString+0x1a>
 80028e6:	e000      	b.n	80028ea <ILI9341_WriteString+0x84>
                break;
 80028e8:	bf00      	nop
    }

    ILI9341_Unselect();
 80028ea:	f7ff fca9 	bl	8002240 <ILI9341_Unselect>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028f8:	b002      	add	sp, #8
 80028fa:	4770      	bx	lr

080028fc <ILI9341_FillRectangle>:
    ILI9341_DrawLine(x, y, x, y + h, color);
    ILI9341_DrawLine(x, y + h, x + w, y + h, color);
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	4604      	mov	r4, r0
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	461a      	mov	r2, r3
 800290a:	4623      	mov	r3, r4
 800290c:	80fb      	strh	r3, [r7, #6]
 800290e:	4603      	mov	r3, r0
 8002910:	80bb      	strh	r3, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	807b      	strh	r3, [r7, #2]
 8002916:	4613      	mov	r3, r2
 8002918:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002920:	d253      	bcs.n	80029ca <ILI9341_FillRectangle+0xce>
 8002922:	88bb      	ldrh	r3, [r7, #4]
 8002924:	2bef      	cmp	r3, #239	; 0xef
 8002926:	d850      	bhi.n	80029ca <ILI9341_FillRectangle+0xce>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8002928:	88fa      	ldrh	r2, [r7, #6]
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	4413      	add	r3, r2
 800292e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002932:	dd03      	ble.n	800293c <ILI9341_FillRectangle+0x40>
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 800293a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 800293c:	88ba      	ldrh	r2, [r7, #4]
 800293e:	883b      	ldrh	r3, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	2bf0      	cmp	r3, #240	; 0xf0
 8002944:	dd03      	ble.n	800294e <ILI9341_FillRectangle+0x52>
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800294c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 800294e:	f7ff fc6b 	bl	8002228 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002952:	88fa      	ldrh	r2, [r7, #6]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4413      	add	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29c      	uxth	r4, r3
 800295e:	88ba      	ldrh	r2, [r7, #4]
 8002960:	883b      	ldrh	r3, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	88b9      	ldrh	r1, [r7, #4]
 800296c:	88f8      	ldrh	r0, [r7, #6]
 800296e:	4622      	mov	r2, r4
 8002970:	f7ff fcd0 	bl	8002314 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002974:	8c3b      	ldrh	r3, [r7, #32]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	733b      	strb	r3, [r7, #12]
 800297e:	8c3b      	ldrh	r3, [r7, #32]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8002984:	2201      	movs	r2, #1
 8002986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800298a:	4812      	ldr	r0, [pc, #72]	; (80029d4 <ILI9341_FillRectangle+0xd8>)
 800298c:	f000 fd14 	bl	80033b8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002990:	883b      	ldrh	r3, [r7, #0]
 8002992:	80bb      	strh	r3, [r7, #4]
 8002994:	e013      	b.n	80029be <ILI9341_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	80fb      	strh	r3, [r7, #6]
 800299a:	e00a      	b.n	80029b2 <ILI9341_FillRectangle+0xb6>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800299c:	f107 010c 	add.w	r1, r7, #12
 80029a0:	f04f 33ff 	mov.w	r3, #4294967295
 80029a4:	2202      	movs	r2, #2
 80029a6:	480c      	ldr	r0, [pc, #48]	; (80029d8 <ILI9341_FillRectangle+0xdc>)
 80029a8:	f003 fd3f 	bl	800642a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	80fb      	strh	r3, [r7, #6]
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f1      	bne.n	800299c <ILI9341_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 80029b8:	88bb      	ldrh	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	80bb      	strh	r3, [r7, #4]
 80029be:	88bb      	ldrh	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e8      	bne.n	8002996 <ILI9341_FillRectangle+0x9a>
        }
    }

    ILI9341_Unselect();
 80029c4:	f7ff fc3c 	bl	8002240 <ILI9341_Unselect>
 80029c8:	e000      	b.n	80029cc <ILI9341_FillRectangle+0xd0>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80029ca:	bf00      	nop
}
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40020400 	.word	0x40020400
 80029d8:	200002dc 	.word	0x200002dc

080029dc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	23f0      	movs	r3, #240	; 0xf0
 80029ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029f0:	2100      	movs	r1, #0
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7ff ff82 	bl	80028fc <ILI9341_FillRectangle>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <ILI9341_TouchUnselect>:

static void ILI9341_TouchSelect() {
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_RESET);
}

void ILI9341_TouchUnselect() {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_TOUCH_CS_GPIO_Port, ILI9341_TOUCH_CS_Pin, GPIO_PIN_SET);
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a0a:	4802      	ldr	r0, [pc, #8]	; (8002a14 <ILI9341_TouchUnselect+0x14>)
 8002a0c:	f000 fcd4 	bl	80033b8 <HAL_GPIO_WritePin>
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40020000 	.word	0x40020000

08002a18 <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af02      	add	r7, sp, #8
    uint8_t data = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	71fb      	strb	r3, [r7, #7]

    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	2209      	movs	r2, #9
 8002a32:	21ae      	movs	r1, #174	; 0xae
 8002a34:	4840      	ldr	r0, [pc, #256]	; (8002b38 <max30102_init+0x120>)
 8002a36:	f001 f85d 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    //osDelay(1);
    do
    {
        HAL_I2C_Mem_Read_IT(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2301      	movs	r3, #1
 8002a44:	2209      	movs	r2, #9
 8002a46:	21af      	movs	r1, #175	; 0xaf
 8002a48:	483b      	ldr	r0, [pc, #236]	; (8002b38 <max30102_init+0x120>)
 8002a4a:	f001 f905 	bl	8003c58 <HAL_I2C_Mem_Read_IT>
    } while (data & 0x40);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <max30102_init+0x22>

    /*新数据中断*/
    data = 0x40;
 8002a58:	2340      	movs	r3, #64	; 0x40
 8002a5a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2301      	movs	r3, #1
 8002a66:	2202      	movs	r2, #2
 8002a68:	21ae      	movs	r1, #174	; 0xae
 8002a6a:	4833      	ldr	r0, [pc, #204]	; (8002b38 <max30102_init+0x120>)
 8002a6c:	f001 f842 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 8002a70:	2363      	movs	r3, #99	; 0x63
 8002a72:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002a74:	2301      	movs	r3, #1
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	1dfb      	adds	r3, r7, #7
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	220a      	movs	r2, #10
 8002a80:	21ae      	movs	r1, #174	; 0xae
 8002a82:	482d      	ldr	r0, [pc, #180]	; (8002b38 <max30102_init+0x120>)
 8002a84:	f001 f836 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    /*灯的亮度*/
    data = 0x47;
 8002a88:	2347      	movs	r3, #71	; 0x47
 8002a8a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	1dfb      	adds	r3, r7, #7
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2301      	movs	r3, #1
 8002a96:	220c      	movs	r2, #12
 8002a98:	21ae      	movs	r1, #174	; 0xae
 8002a9a:	4827      	ldr	r0, [pc, #156]	; (8002b38 <max30102_init+0x120>)
 8002a9c:	f001 f82a 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PULSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	220d      	movs	r2, #13
 8002aac:	21ae      	movs	r1, #174	; 0xae
 8002aae:	4822      	ldr	r0, [pc, #136]	; (8002b38 <max30102_init+0x120>)
 8002ab0:	f001 f820 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PULSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	2210      	movs	r2, #16
 8002ac0:	21ae      	movs	r1, #174	; 0xae
 8002ac2:	481d      	ldr	r0, [pc, #116]	; (8002b38 <max30102_init+0x120>)
 8002ac4:	f001 f816 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    /*FIFO clear*/
    data = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002acc:	2301      	movs	r3, #1
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	21ae      	movs	r1, #174	; 0xae
 8002ada:	4817      	ldr	r0, [pc, #92]	; (8002b38 <max30102_init+0x120>)
 8002adc:	f001 f80a 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2301      	movs	r3, #1
 8002aea:	2205      	movs	r2, #5
 8002aec:	21ae      	movs	r1, #174	; 0xae
 8002aee:	4812      	ldr	r0, [pc, #72]	; (8002b38 <max30102_init+0x120>)
 8002af0:	f001 f800 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002af4:	2301      	movs	r3, #1
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2301      	movs	r3, #1
 8002afe:	2206      	movs	r2, #6
 8002b00:	21ae      	movs	r1, #174	; 0xae
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <max30102_init+0x120>)
 8002b04:	f000 fff6 	bl	8003af4 <HAL_I2C_Mem_Write_IT>

    /*interrupt status clear*/
    max30102_getStatus();
 8002b08:	f000 f81c 	bl	8002b44 <max30102_getStatus>

    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write_IT(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1);
 8002b10:	2301      	movs	r3, #1
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2301      	movs	r3, #1
 8002b1a:	2209      	movs	r2, #9
 8002b1c:	21ae      	movs	r1, #174	; 0xae
 8002b1e:	4806      	ldr	r0, [pc, #24]	; (8002b38 <max30102_init+0x120>)
 8002b20:	f000 ffe8 	bl	8003af4 <HAL_I2C_Mem_Write_IT>
    HAL_UART_Transmit(&huart2, (uint8_t *) "\x1B[34m[Action]: Max30102\r\n", 27, 50);
 8002b24:	2332      	movs	r3, #50	; 0x32
 8002b26:	221b      	movs	r2, #27
 8002b28:	4904      	ldr	r1, [pc, #16]	; (8002b3c <max30102_init+0x124>)
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <max30102_init+0x128>)
 8002b2c:	f003 fffb 	bl	8006b26 <HAL_UART_Transmit>
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000020c 	.word	0x2000020c
 8002b3c:	0800d410 	.word	0x0800d410
 8002b40:	20000380 	.word	0x20000380

08002b44 <max30102_getStatus>:
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
    }
}

uint8_t max30102_getStatus()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	71fb      	strb	r3, [r7, #7]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8002b52:	230a      	movs	r3, #10
 8002b54:	9302      	str	r3, [sp, #8]
 8002b56:	2301      	movs	r3, #1
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	1dbb      	adds	r3, r7, #6
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2200      	movs	r2, #0
 8002b62:	21af      	movs	r1, #175	; 0xaf
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <max30102_getStatus+0x54>)
 8002b66:	f000 fd9f 	bl	80036a8 <HAL_I2C_Mem_Read>
    data = dataTemp;
 8002b6a:	79bb      	ldrb	r3, [r7, #6]
 8002b6c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8002b6e:	230a      	movs	r3, #10
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	1dbb      	adds	r3, r7, #6
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	21af      	movs	r1, #175	; 0xaf
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <max30102_getStatus+0x54>)
 8002b82:	f000 fd91 	bl	80036a8 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 8002b86:	79ba      	ldrb	r2, [r7, #6]
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000020c 	.word	0x2000020c

08002b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb8:	4c0b      	ldr	r4, [pc, #44]	; (8002be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bc6:	f7fe ffd3 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bca:	f004 ffdd 	bl	8007b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bce:	f7fe fb61 	bl	8001294 <main>
  bx  lr    
 8002bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bd4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bdc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002be0:	0800edf8 	.word	0x0800edf8
  ldr r2, =_sbss
 8002be4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002be8:	200003d8 	.word	0x200003d8

08002bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC_IRQHandler>
	...

08002bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <HAL_Init+0x40>)
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <HAL_Init+0x40>)
 8002c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c0c:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <HAL_Init+0x40>)
 8002c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c18:	2003      	movs	r0, #3
 8002c1a:	f000 f94f 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f000 f808 	bl	8002c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c24:	f7fe fe78 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00

08002c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_InitTick+0x54>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_InitTick+0x58>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 f967 	bl	8002f26 <HAL_SYSTICK_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e00e      	b.n	8002c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b0f      	cmp	r3, #15
 8002c66:	d80a      	bhi.n	8002c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c68:	2200      	movs	r2, #0
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	f000 f92f 	bl	8002ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c74:	4a06      	ldr	r2, [pc, #24]	; (8002c90 <HAL_InitTick+0x5c>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e000      	b.n	8002c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000018 	.word	0x20000018
 8002c90:	20000014 	.word	0x20000014

08002c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <HAL_IncTick+0x20>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_IncTick+0x24>)
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000018 	.word	0x20000018
 8002cb8:	200003c4 	.word	0x200003c4

08002cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_GetTick+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	200003c4 	.word	0x200003c4

08002cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cdc:	f7ff ffee 	bl	8002cbc <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d005      	beq.n	8002cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_Delay+0x44>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cfa:	bf00      	nop
 8002cfc:	f7ff ffde 	bl	8002cbc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d8f7      	bhi.n	8002cfc <HAL_Delay+0x28>
  {
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000018 	.word	0x20000018

08002d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <__NVIC_GetPriorityGrouping+0x18>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0307 	and.w	r3, r3, #7
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db0b      	blt.n	8002daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <__NVIC_EnableIRQ+0x38>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2001      	movs	r0, #1
 8002da2:	fa00 f202 	lsl.w	r2, r0, r2
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f7ff ff8e 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff29 	bl	8002d1c <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff3e 	bl	8002d64 <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff8e 	bl	8002e10 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5d 	bl	8002dbc <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff31 	bl	8002d80 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa2 	bl	8002e78 <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f4c:	f7ff feb6 	bl	8002cbc <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d008      	beq.n	8002f70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e052      	b.n	8003016 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0216 	bic.w	r2, r2, #22
 8002f7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d103      	bne.n	8002fa0 <HAL_DMA_Abort+0x62>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d007      	beq.n	8002fb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0208 	bic.w	r2, r2, #8
 8002fae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc0:	e013      	b.n	8002fea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fc2:	f7ff fe7b 	bl	8002cbc <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d90c      	bls.n	8002fea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2203      	movs	r2, #3
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e015      	b.n	8003016 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e4      	bne.n	8002fc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	223f      	movs	r2, #63	; 0x3f
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d004      	beq.n	800303c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e00c      	b.n	8003056 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2205      	movs	r2, #5
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003070:	b2db      	uxtb	r3, r3
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003096:	2300      	movs	r3, #0
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e159      	b.n	8003350 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	f040 8148 	bne.w	800334a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d005      	beq.n	80030d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d130      	bne.n	8003134 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	091b      	lsrs	r3, r3, #4
 800311e:	f003 0201 	and.w	r2, r3, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b03      	cmp	r3, #3
 800313e:	d017      	beq.n	8003170 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d123      	bne.n	80031c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	08da      	lsrs	r2, r3, #3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3208      	adds	r2, #8
 8003184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	220f      	movs	r2, #15
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3208      	adds	r2, #8
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80a2 	beq.w	800334a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	4b57      	ldr	r3, [pc, #348]	; (8003368 <HAL_GPIO_Init+0x2e8>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a56      	ldr	r2, [pc, #344]	; (8003368 <HAL_GPIO_Init+0x2e8>)
 8003210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_GPIO_Init+0x2e8>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003222:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_GPIO_Init+0x2ec>)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	089b      	lsrs	r3, r3, #2
 8003228:	3302      	adds	r3, #2
 800322a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_GPIO_Init+0x2f0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d019      	beq.n	8003282 <HAL_GPIO_Init+0x202>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a48      	ldr	r2, [pc, #288]	; (8003374 <HAL_GPIO_Init+0x2f4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d013      	beq.n	800327e <HAL_GPIO_Init+0x1fe>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a47      	ldr	r2, [pc, #284]	; (8003378 <HAL_GPIO_Init+0x2f8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00d      	beq.n	800327a <HAL_GPIO_Init+0x1fa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a46      	ldr	r2, [pc, #280]	; (800337c <HAL_GPIO_Init+0x2fc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <HAL_GPIO_Init+0x1f6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a45      	ldr	r2, [pc, #276]	; (8003380 <HAL_GPIO_Init+0x300>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <HAL_GPIO_Init+0x1f2>
 800326e:	2304      	movs	r3, #4
 8003270:	e008      	b.n	8003284 <HAL_GPIO_Init+0x204>
 8003272:	2307      	movs	r3, #7
 8003274:	e006      	b.n	8003284 <HAL_GPIO_Init+0x204>
 8003276:	2303      	movs	r3, #3
 8003278:	e004      	b.n	8003284 <HAL_GPIO_Init+0x204>
 800327a:	2302      	movs	r3, #2
 800327c:	e002      	b.n	8003284 <HAL_GPIO_Init+0x204>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_GPIO_Init+0x204>
 8003282:	2300      	movs	r3, #0
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	f002 0203 	and.w	r2, r2, #3
 800328a:	0092      	lsls	r2, r2, #2
 800328c:	4093      	lsls	r3, r2
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003294:	4935      	ldr	r1, [pc, #212]	; (800336c <HAL_GPIO_Init+0x2ec>)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032a2:	4b38      	ldr	r3, [pc, #224]	; (8003384 <HAL_GPIO_Init+0x304>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032c6:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <HAL_GPIO_Init+0x304>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <HAL_GPIO_Init+0x304>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_GPIO_Init+0x304>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_GPIO_Init+0x304>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4013      	ands	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_GPIO_Init+0x304>)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <HAL_GPIO_Init+0x304>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003344:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <HAL_GPIO_Init+0x304>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b0f      	cmp	r3, #15
 8003354:	f67f aea2 	bls.w	800309c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	3724      	adds	r7, #36	; 0x24
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800
 800336c:	40013800 	.word	0x40013800
 8003370:	40020000 	.word	0x40020000
 8003374:	40020400 	.word	0x40020400
 8003378:	40020800 	.word	0x40020800
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40021000 	.word	0x40021000
 8003384:	40013c00 	.word	0x40013c00

08003388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
 80033a4:	e001      	b.n	80033aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d4:	e003      	b.n	80033de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	041a      	lsls	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033fc:	887a      	ldrh	r2, [r7, #2]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	041a      	lsls	r2, r3, #16
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43d9      	mvns	r1, r3
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	400b      	ands	r3, r1
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e12b      	b.n	800368a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fed4 	bl	80011f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003482:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003484:	f002 ff20 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8003488:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a81      	ldr	r2, [pc, #516]	; (8003694 <HAL_I2C_Init+0x274>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d807      	bhi.n	80034a4 <HAL_I2C_Init+0x84>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a80      	ldr	r2, [pc, #512]	; (8003698 <HAL_I2C_Init+0x278>)
 8003498:	4293      	cmp	r3, r2
 800349a:	bf94      	ite	ls
 800349c:	2301      	movls	r3, #1
 800349e:	2300      	movhi	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e006      	b.n	80034b2 <HAL_I2C_Init+0x92>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a7d      	ldr	r2, [pc, #500]	; (800369c <HAL_I2C_Init+0x27c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	bf94      	ite	ls
 80034ac:	2301      	movls	r3, #1
 80034ae:	2300      	movhi	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0e7      	b.n	800368a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4a78      	ldr	r2, [pc, #480]	; (80036a0 <HAL_I2C_Init+0x280>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	4a6a      	ldr	r2, [pc, #424]	; (8003694 <HAL_I2C_Init+0x274>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d802      	bhi.n	80034f4 <HAL_I2C_Init+0xd4>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	3301      	adds	r3, #1
 80034f2:	e009      	b.n	8003508 <HAL_I2C_Init+0xe8>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	4a69      	ldr	r2, [pc, #420]	; (80036a4 <HAL_I2C_Init+0x284>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	099b      	lsrs	r3, r3, #6
 8003506:	3301      	adds	r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800351a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	495c      	ldr	r1, [pc, #368]	; (8003694 <HAL_I2C_Init+0x274>)
 8003524:	428b      	cmp	r3, r1
 8003526:	d819      	bhi.n	800355c <HAL_I2C_Init+0x13c>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	1c59      	adds	r1, r3, #1
 8003538:	f640 73fc 	movw	r3, #4092	; 0xffc
 800353c:	400b      	ands	r3, r1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HAL_I2C_Init+0x138>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1e59      	subs	r1, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003556:	e051      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 8003558:	2304      	movs	r3, #4
 800355a:	e04f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <HAL_I2C_Init+0x168>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e58      	subs	r0, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	440b      	add	r3, r1
 8003572:	fbb0 f3f3 	udiv	r3, r0, r3
 8003576:	3301      	adds	r3, #1
 8003578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800357c:	2b00      	cmp	r3, #0
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e012      	b.n	80035ae <HAL_I2C_Init+0x18e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	1e58      	subs	r0, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	0099      	lsls	r1, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	fbb0 f3f3 	udiv	r3, r0, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Init+0x196>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e022      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10e      	bne.n	80035dc <HAL_I2C_Init+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1e58      	subs	r0, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	460b      	mov	r3, r1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035da:	e00f      	b.n	80035fc <HAL_I2C_Init+0x1dc>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e58      	subs	r0, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	0099      	lsls	r1, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f2:	3301      	adds	r3, #1
 80035f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	6809      	ldr	r1, [r1, #0]
 8003600:	4313      	orrs	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6911      	ldr	r1, [r2, #16]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68d2      	ldr	r2, [r2, #12]
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6812      	ldr	r2, [r2, #0]
 800363c:	430b      	orrs	r3, r1
 800363e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	000186a0 	.word	0x000186a0
 8003698:	001e847f 	.word	0x001e847f
 800369c:	003d08ff 	.word	0x003d08ff
 80036a0:	431bde83 	.word	0x431bde83
 80036a4:	10624dd3 	.word	0x10624dd3

080036a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08c      	sub	sp, #48	; 0x30
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	817b      	strh	r3, [r7, #10]
 80036ba:	460b      	mov	r3, r1
 80036bc:	813b      	strh	r3, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c2:	f7ff fafb 	bl	8002cbc <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	f040 8208 	bne.w	8003ae6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2319      	movs	r3, #25
 80036dc:	2201      	movs	r2, #1
 80036de:	497b      	ldr	r1, [pc, #492]	; (80038cc <HAL_I2C_Mem_Read+0x224>)
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 ffd7 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
 80036ee:	e1fb      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Mem_Read+0x56>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e1f4      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d007      	beq.n	8003724 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2240      	movs	r2, #64	; 0x40
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800374e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4a5b      	ldr	r2, [pc, #364]	; (80038d0 <HAL_I2C_Mem_Read+0x228>)
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003766:	88f8      	ldrh	r0, [r7, #6]
 8003768:	893a      	ldrh	r2, [r7, #8]
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	4603      	mov	r3, r0
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f001 fdfc 	bl	8005374 <I2C_RequestMemoryRead>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e1b0      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d113      	bne.n	80037b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	623b      	str	r3, [r7, #32]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e184      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d11b      	bne.n	80037f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e164      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d11b      	bne.n	8003836 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	e144      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800384c:	e138      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b03      	cmp	r3, #3
 8003854:	f200 80f1 	bhi.w	8003a3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	2b01      	cmp	r3, #1
 800385e:	d123      	bne.n	80038a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f002 f85f 	bl	8005928 <I2C_WaitOnRXNEFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e139      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038a6:	e10b      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d14e      	bne.n	800394e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	2200      	movs	r2, #0
 80038b8:	4906      	ldr	r1, [pc, #24]	; (80038d4 <HAL_I2C_Mem_Read+0x22c>)
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 feea 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e10e      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
 80038ca:	bf00      	nop
 80038cc:	00100002 	.word	0x00100002
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800394c:	e0b8      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	4966      	ldr	r1, [pc, #408]	; (8003af0 <HAL_I2C_Mem_Read+0x448>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 fe9b 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0bf      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2200      	movs	r2, #0
 80039b2:	494f      	ldr	r1, [pc, #316]	; (8003af0 <HAL_I2C_Mem_Read+0x448>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f001 fe6d 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e091      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a38:	e042      	b.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f001 ff72 	bl	8005928 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e04c      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d118      	bne.n	8003ac0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f47f aec2 	bne.w	800384e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3728      	adds	r7, #40	; 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	00010004 	.word	0x00010004

08003af4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	460b      	mov	r3, r1
 8003b08:	813b      	strh	r3, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	f040 808e 	bne.w	8003c3c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b20:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_I2C_Mem_Write_IT+0x158>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	08db      	lsrs	r3, r3, #3
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_I2C_Mem_Write_IT+0x15c>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0a1a      	lsrs	r2, r3, #8
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009a      	lsls	r2, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e064      	b.n	8003c3e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d0db      	beq.n	8003b3a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2C_Mem_Write_IT+0x9c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e056      	b.n	8003c3e <HAL_I2C_Mem_Write_IT+0x14a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d007      	beq.n	8003bb6 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2221      	movs	r2, #33	; 0x21
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2240      	movs	r2, #64	; 0x40
 8003bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_I2C_Mem_Write_IT+0x160>)
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003bf8:	897a      	ldrh	r2, [r7, #10]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003bfe:	893a      	ldrh	r2, [r7, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c36:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	14f8b589 	.word	0x14f8b589
 8003c54:	ffff0000 	.word	0xffff0000

08003c58 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	f040 809a 	bne.w	8003db8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_I2C_Mem_Read_IT+0x170>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	4a50      	ldr	r2, [pc, #320]	; (8003dcc <HAL_I2C_Mem_Read_IT+0x174>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0a1a      	lsrs	r2, r3, #8
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009a      	lsls	r2, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e070      	b.n	8003dba <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d0db      	beq.n	8003c9e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_I2C_Mem_Read_IT+0x9c>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e062      	b.n	8003dba <HAL_I2C_Mem_Read_IT+0x162>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d007      	beq.n	8003d1a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0201 	orr.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2222      	movs	r2, #34	; 0x22
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2240      	movs	r2, #64	; 0x40
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a3a      	ldr	r2, [r7, #32]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <HAL_I2C_Mem_Read_IT+0x178>)
 8003d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d5c:	897a      	ldrh	r2, [r7, #10]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003d62:	893a      	ldrh	r2, [r7, #8]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d82:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d92:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003db2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	14f8b589 	.word	0x14f8b589
 8003dd0:	ffff0000 	.word	0xffff0000

08003dd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b10      	cmp	r3, #16
 8003e02:	d003      	beq.n	8003e0c <HAL_I2C_EV_IRQHandler+0x38>
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	f040 80c1 	bne.w	8003f8e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10d      	bne.n	8003e42 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e2c:	d003      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x62>
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e34:	d101      	bne.n	8003e3a <HAL_I2C_EV_IRQHandler+0x66>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x68>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	f000 8132 	beq.w	80040a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <HAL_I2C_EV_IRQHandler+0x92>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	0a5b      	lsrs	r3, r3, #9
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d006      	beq.n	8003e66 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f001 fdea 	bl	8005a32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fcdc 	bl	800481c <I2C_Master_SB>
 8003e64:	e092      	b.n	8003f8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	08db      	lsrs	r3, r3, #3
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0xb2>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	0a5b      	lsrs	r3, r3, #9
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fd52 	bl	8004928 <I2C_Master_ADD10>
 8003e84:	e082      	b.n	8003f8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fd6c 	bl	800497c <I2C_Master_ADDR>
 8003ea4:	e072      	b.n	8003f8c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d03b      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ec0:	f000 80f3 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	09db      	lsrs	r3, r3, #7
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00f      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f94c 	bl	8004186 <I2C_MasterTransmit_TXE>
 8003eee:	e04d      	b.n	8003f8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80d6 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80cf 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f0c:	7bbb      	ldrb	r3, [r7, #14]
 8003f0e:	2b21      	cmp	r3, #33	; 0x21
 8003f10:	d103      	bne.n	8003f1a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9d3 	bl	80042be <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f18:	e0c7      	b.n	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b40      	cmp	r3, #64	; 0x40
 8003f1e:	f040 80c4 	bne.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fa41 	bl	80043aa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f28:	e0bf      	b.n	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	f000 80b7 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	099b      	lsrs	r3, r3, #6
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x194>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0a9b      	lsrs	r3, r3, #10
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x194>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d103      	bne.n	8003f68 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fab6 	bl	80044d2 <I2C_MasterReceive_RXNE>
 8003f66:	e011      	b.n	8003f8c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	089b      	lsrs	r3, r3, #2
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 809a 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	0a5b      	lsrs	r3, r3, #9
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8093 	beq.w	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb5f 	bl	8004648 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8a:	e08e      	b.n	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f8c:	e08d      	b.n	80040aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e007      	b.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	0a5b      	lsrs	r3, r3, #9
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fd8:	69b9      	ldr	r1, [r7, #24]
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 ff1d 	bl	8004e1a <I2C_Slave_ADDR>
 8003fe0:	e066      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0x22e>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ff58 	bl	8004eb0 <I2C_Slave_STOPF>
 8004000:	e056      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004002:	7bbb      	ldrb	r3, [r7, #14]
 8004004:	2b21      	cmp	r3, #33	; 0x21
 8004006:	d002      	beq.n	800400e <HAL_I2C_EV_IRQHandler+0x23a>
 8004008:	7bbb      	ldrb	r3, [r7, #14]
 800400a:	2b29      	cmp	r3, #41	; 0x29
 800400c:	d125      	bne.n	800405a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00f      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x266>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	0a9b      	lsrs	r3, r3, #10
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x266>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fe33 	bl	8004c9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004038:	e039      	b.n	80040ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d033      	beq.n	80040ae <HAL_I2C_EV_IRQHandler+0x2da>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02d      	beq.n	80040ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fe60 	bl	8004d18 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004058:	e029      	b.n	80040ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00f      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	0a9b      	lsrs	r3, r3, #10
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fe6b 	bl	8004d5a <I2C_SlaveReceive_RXNE>
 8004084:	e014      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00e      	beq.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	0a5b      	lsrs	r3, r3, #9
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fe99 	bl	8004dd6 <I2C_SlaveReceive_BTF>
 80040a4:	e004      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80040a6:	bf00      	nop
 80040a8:	e002      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80040b0:	3720      	adds	r7, #32
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
 8004112:	4613      	mov	r3, r2
 8004114:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d150      	bne.n	800424e <I2C_MasterTransmit_TXE+0xc8>
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b21      	cmp	r3, #33	; 0x21
 80041b0:	d14d      	bne.n	800424e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d01d      	beq.n	80041f4 <I2C_MasterTransmit_TXE+0x6e>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d01a      	beq.n	80041f4 <I2C_MasterTransmit_TXE+0x6e>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041c4:	d016      	beq.n	80041f4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041d4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2211      	movs	r2, #17
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff62 	bl	80040b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041f2:	e060      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004202:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d107      	bne.n	800423e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff7d 	bl	8004136 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800423c:	e03b      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff ff35 	bl	80040b6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800424c:	e033      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b21      	cmp	r3, #33	; 0x21
 8004252:	d005      	beq.n	8004260 <I2C_MasterTransmit_TXE+0xda>
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	2b40      	cmp	r3, #64	; 0x40
 8004258:	d12d      	bne.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b22      	cmp	r3, #34	; 0x22
 800425e:	d12a      	bne.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800427a:	e01c      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d103      	bne.n	8004290 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f88e 	bl	80043aa <I2C_MemoryTransmit_TXE_BTF>
}
 800428e:	e012      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042b4:	e7ff      	b.n	80042b6 <I2C_MasterTransmit_TXE+0x130>
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b21      	cmp	r3, #33	; 0x21
 80042d6:	d164      	bne.n	80043a2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d012      	beq.n	8004308 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004306:	e04c      	b.n	80043a2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b08      	cmp	r3, #8
 800430c:	d01d      	beq.n	800434a <I2C_MasterTransmit_BTF+0x8c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b20      	cmp	r3, #32
 8004312:	d01a      	beq.n	800434a <I2C_MasterTransmit_BTF+0x8c>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800431a:	d016      	beq.n	800434a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800432a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2211      	movs	r2, #17
 8004330:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff feb7 	bl	80040b6 <HAL_I2C_MasterTxCpltCallback>
}
 8004348:	e02b      	b.n	80043a2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004358:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d107      	bne.n	8004394 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff fed2 	bl	8004136 <HAL_I2C_MemTxCpltCallback>
}
 8004392:	e006      	b.n	80043a2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fe8a 	bl	80040b6 <HAL_I2C_MasterTxCpltCallback>
}
 80043a2:	bf00      	nop
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d11d      	bne.n	80043fe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d10b      	bne.n	80043e2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80043e0:	e073      	b.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	121b      	asrs	r3, r3, #8
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043fc:	e065      	b.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10b      	bne.n	800441e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	b2da      	uxtb	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800441c:	e055      	b.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004422:	2b02      	cmp	r3, #2
 8004424:	d151      	bne.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b22      	cmp	r3, #34	; 0x22
 800442a:	d10d      	bne.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004446:	e040      	b.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d015      	beq.n	800447e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b21      	cmp	r3, #33	; 0x21
 8004456:	d112      	bne.n	800447e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800447c:	e025      	b.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d120      	bne.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	2b21      	cmp	r3, #33	; 0x21
 800448c:	d11d      	bne.n	80044ca <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800449c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fe36 	bl	8004136 <HAL_I2C_MemTxCpltCallback>
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	f040 80ac 	bne.w	8004640 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d921      	bls.n	800453a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b03      	cmp	r3, #3
 8004524:	f040 808c 	bne.w	8004640 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004536:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004538:	e082      	b.n	8004640 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	2b02      	cmp	r3, #2
 8004540:	d075      	beq.n	800462e <I2C_MasterReceive_RXNE+0x15c>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d002      	beq.n	800454e <I2C_MasterReceive_RXNE+0x7c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d16f      	bne.n	800462e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 f9b8 	bl	80058c4 <I2C_WaitOnSTOPRequestThroughIT>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d142      	bne.n	80045e0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004568:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004578:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d10a      	bne.n	80045ca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fdc1 	bl	800414a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045c8:	e03a      	b.n	8004640 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2212      	movs	r2, #18
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fd76 	bl	80040ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045de:	e02f      	b.n	8004640 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fd99 	bl	800415e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800462c:	e008      	b.n	8004640 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463c:	605a      	str	r2, [r3, #4]
}
 800463e:	e7ff      	b.n	8004640 <I2C_MasterReceive_RXNE+0x16e>
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b04      	cmp	r3, #4
 800465e:	d11b      	bne.n	8004698 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004696:	e0bd      	b.n	8004814 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d129      	bne.n	80046f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d00a      	beq.n	80046ce <I2C_MasterReceive_BTF+0x86>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d007      	beq.n	80046ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046f4:	e08e      	b.n	8004814 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d176      	bne.n	80047ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d002      	beq.n	800470c <I2C_MasterReceive_BTF+0xc4>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d108      	bne.n	800471e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e019      	b.n	8004752 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d002      	beq.n	800472a <I2C_MasterReceive_BTF+0xe2>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d108      	bne.n	800473c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00a      	b.n	8004752 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b10      	cmp	r3, #16
 8004740:	d007      	beq.n	8004752 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004750:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d10a      	bne.n	80047d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff fcba 	bl	800414a <HAL_I2C_MemRxCpltCallback>
}
 80047d6:	e01d      	b.n	8004814 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2212      	movs	r2, #18
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fc6f 	bl	80040ca <HAL_I2C_MasterRxCpltCallback>
}
 80047ec:	e012      	b.n	8004814 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d117      	bne.n	8004860 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004848:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800484a:	e067      	b.n	800491c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	b2da      	uxtb	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	611a      	str	r2, [r3, #16]
}
 800485e:	e05d      	b.n	800491c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004868:	d133      	bne.n	80048d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b21      	cmp	r3, #33	; 0x21
 8004874:	d109      	bne.n	800488a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004886:	611a      	str	r2, [r3, #16]
 8004888:	e008      	b.n	800489c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	b2da      	uxtb	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <I2C_Master_SB+0x92>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d108      	bne.n	80048c0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d032      	beq.n	800491c <I2C_Master_SB+0x100>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02d      	beq.n	800491c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ce:	605a      	str	r2, [r3, #4]
}
 80048d0:	e024      	b.n	800491c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	b29b      	uxth	r3, r3
 80048e0:	11db      	asrs	r3, r3, #7
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f003 0306 	and.w	r3, r3, #6
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	f063 030f 	orn	r3, r3, #15
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	611a      	str	r2, [r3, #16]
}
 80048f6:	e011      	b.n	800491c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10d      	bne.n	800491c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	b29b      	uxth	r3, r3
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030e 	orn	r3, r3, #14
 8004914:	b2da      	uxtb	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	b2da      	uxtb	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <I2C_Master_ADD10+0x26>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d108      	bne.n	8004960 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <I2C_Master_ADD10+0x48>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800497c:	b480      	push	{r7}
 800497e:	b091      	sub	sp, #68	; 0x44
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b22      	cmp	r3, #34	; 0x22
 80049a4:	f040 8169 	bne.w	8004c7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10f      	bne.n	80049d0 <I2C_Master_ADDR+0x54>
 80049b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d10b      	bne.n	80049d0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b8:	2300      	movs	r3, #0
 80049ba:	633b      	str	r3, [r7, #48]	; 0x30
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	e160      	b.n	8004c92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <I2C_Master_ADDR+0x98>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049e0:	d118      	bne.n	8004a14 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e2:	2300      	movs	r3, #0
 80049e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a06:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	651a      	str	r2, [r3, #80]	; 0x50
 8004a12:	e13e      	b.n	8004c92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e115      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 808a 	bne.w	8004b66 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a58:	d137      	bne.n	8004aca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a68:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a78:	d113      	bne.n	8004aa2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	e0e7      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	623b      	str	r3, [r7, #32]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e0d3      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d02e      	beq.n	8004b2e <I2C_Master_ADDR+0x1b2>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d02b      	beq.n	8004b2e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad8:	2b12      	cmp	r3, #18
 8004ada:	d102      	bne.n	8004ae2 <I2C_Master_ADDR+0x166>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d125      	bne.n	8004b2e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d00e      	beq.n	8004b06 <I2C_Master_ADDR+0x18a>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d00b      	beq.n	8004b06 <I2C_Master_ADDR+0x18a>
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d008      	beq.n	8004b06 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e007      	b.n	8004b16 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b14:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	e0a1      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e085      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d14d      	bne.n	8004c0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d016      	beq.n	8004ba4 <I2C_Master_ADDR+0x228>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d013      	beq.n	8004ba4 <I2C_Master_ADDR+0x228>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	2b10      	cmp	r3, #16
 8004b80:	d010      	beq.n	8004ba4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b90:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e007      	b.n	8004bb4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d117      	bne.n	8004bf4 <I2C_Master_ADDR+0x278>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bca:	d00b      	beq.n	8004be4 <I2C_Master_ADDR+0x268>
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d008      	beq.n	8004be4 <I2C_Master_ADDR+0x268>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d005      	beq.n	8004be4 <I2C_Master_ADDR+0x268>
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d002      	beq.n	8004be4 <I2C_Master_ADDR+0x268>
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d107      	bne.n	8004bf4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bf2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e032      	b.n	8004c72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d117      	bne.n	8004c5c <I2C_Master_ADDR+0x2e0>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c32:	d00b      	beq.n	8004c4c <I2C_Master_ADDR+0x2d0>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d008      	beq.n	8004c4c <I2C_Master_ADDR+0x2d0>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d005      	beq.n	8004c4c <I2C_Master_ADDR+0x2d0>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d002      	beq.n	8004c4c <I2C_Master_ADDR+0x2d0>
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d107      	bne.n	8004c5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c78:	e00b      	b.n	8004c92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	e7ff      	b.n	8004c92 <I2C_Master_ADDR+0x316>
 8004c92:	bf00      	nop
 8004c94:	3744      	adds	r7, #68	; 0x44
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02b      	beq.n	8004d10 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	781a      	ldrb	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d114      	bne.n	8004d10 <I2C_SlaveTransmit_TXE+0x72>
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b29      	cmp	r3, #41	; 0x29
 8004cea:	d111      	bne.n	8004d10 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2221      	movs	r2, #33	; 0x21
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2228      	movs	r2, #40	; 0x28
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff f9e7 	bl	80040de <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d011      	beq.n	8004d4e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	781a      	ldrb	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d02c      	beq.n	8004dce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d114      	bne.n	8004dce <I2C_SlaveReceive_RXNE+0x74>
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
 8004da6:	2b2a      	cmp	r3, #42	; 0x2a
 8004da8:	d111      	bne.n	8004dce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2222      	movs	r2, #34	; 0x22
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2228      	movs	r2, #40	; 0x28
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff f992 	bl	80040f2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dce:	bf00      	nop
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e34:	2b28      	cmp	r3, #40	; 0x28
 8004e36:	d127      	bne.n	8004e88 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	09db      	lsrs	r3, r3, #7
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	81bb      	strh	r3, [r7, #12]
 8004e6a:	e002      	b.n	8004e72 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e7a:	89ba      	ldrh	r2, [r7, #12]
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff f940 	bl	8004106 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e86:	e00e      	b.n	8004ea6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ece:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0c:	d172      	bne.n	8004ff4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b22      	cmp	r3, #34	; 0x22
 8004f12:	d002      	beq.n	8004f1a <I2C_Slave_STOPF+0x6a>
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b2a      	cmp	r3, #42	; 0x2a
 8004f18:	d135      	bne.n	8004f86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fe f885 	bl	8003062 <HAL_DMA_GetState>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d049      	beq.n	8004ff2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	4a69      	ldr	r2, [pc, #420]	; (8005108 <I2C_Slave_STOPF+0x258>)
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe f857 	bl	800301e <HAL_DMA_Abort_IT>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d03d      	beq.n	8004ff2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f80:	4610      	mov	r0, r2
 8004f82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f84:	e035      	b.n	8004ff2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe f84f 	bl	8003062 <HAL_DMA_GetState>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d014      	beq.n	8004ff4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4a4e      	ldr	r2, [pc, #312]	; (8005108 <I2C_Slave_STOPF+0x258>)
 8004fd0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fe f821 	bl	800301e <HAL_DMA_Abort_IT>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
 8004ff0:	e000      	b.n	8004ff4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ff2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d03e      	beq.n	800507c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d112      	bne.n	8005032 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d112      	bne.n	8005066 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f043 0204 	orr.w	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f843 	bl	8005110 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800508a:	e039      	b.n	8005100 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b2a      	cmp	r3, #42	; 0x2a
 8005090:	d109      	bne.n	80050a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2228      	movs	r2, #40	; 0x28
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff f826 	bl	80040f2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b28      	cmp	r3, #40	; 0x28
 80050b0:	d111      	bne.n	80050d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a15      	ldr	r2, [pc, #84]	; (800510c <I2C_Slave_STOPF+0x25c>)
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff f827 	bl	8004122 <HAL_I2C_ListenCpltCallback>
}
 80050d4:	e014      	b.n	8005100 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	2b22      	cmp	r3, #34	; 0x22
 80050dc:	d002      	beq.n	80050e4 <I2C_Slave_STOPF+0x234>
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b22      	cmp	r3, #34	; 0x22
 80050e2:	d10d      	bne.n	8005100 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fe fff9 	bl	80040f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	08005545 	.word	0x08005545
 800510c:	ffff0000 	.word	0xffff0000

08005110 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005126:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005128:	7bbb      	ldrb	r3, [r7, #14]
 800512a:	2b10      	cmp	r3, #16
 800512c:	d002      	beq.n	8005134 <I2C_ITError+0x24>
 800512e:	7bbb      	ldrb	r3, [r7, #14]
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d10a      	bne.n	800514a <I2C_ITError+0x3a>
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b22      	cmp	r3, #34	; 0x22
 8005138:	d107      	bne.n	800514a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005148:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005150:	2b28      	cmp	r3, #40	; 0x28
 8005152:	d107      	bne.n	8005164 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2228      	movs	r2, #40	; 0x28
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005162:	e015      	b.n	8005190 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d00a      	beq.n	800518a <I2C_ITError+0x7a>
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2b60      	cmp	r3, #96	; 0x60
 8005178:	d007      	beq.n	800518a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519e:	d162      	bne.n	8005266 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d020      	beq.n	8005200 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	4a6a      	ldr	r2, [pc, #424]	; (800536c <I2C_ITError+0x25c>)
 80051c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fd ff27 	bl	800301e <HAL_DMA_Abort_IT>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 8089 	beq.w	80052ea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051fa:	4610      	mov	r0, r2
 80051fc:	4798      	blx	r3
 80051fe:	e074      	b.n	80052ea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	4a59      	ldr	r2, [pc, #356]	; (800536c <I2C_ITError+0x25c>)
 8005206:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	4618      	mov	r0, r3
 800520e:	f7fd ff06 	bl	800301e <HAL_DMA_Abort_IT>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d068      	beq.n	80052ea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d10b      	bne.n	800523e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
 8005264:	e041      	b.n	80052ea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b60      	cmp	r3, #96	; 0x60
 8005270:	d125      	bne.n	80052be <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d10b      	bne.n	80052a6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0201 	bic.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fe ff5b 	bl	8004172 <HAL_I2C_AbortCpltCallback>
 80052bc:	e015      	b.n	80052ea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c8:	2b40      	cmp	r3, #64	; 0x40
 80052ca:	d10b      	bne.n	80052e4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fe ff3a 	bl	800415e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10e      	bne.n	8005318 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800530a:	2b00      	cmp	r3, #0
 800530c:	d104      	bne.n	8005318 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d113      	bne.n	8005364 <I2C_ITError+0x254>
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b28      	cmp	r3, #40	; 0x28
 8005340:	d110      	bne.n	8005364 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <I2C_ITError+0x260>)
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fe fedf 	bl	8004122 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	08005545 	.word	0x08005545
 8005370:	ffff0000 	.word	0xffff0000

08005374 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800539c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f96a 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d4:	d103      	bne.n	80053de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0aa      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	6a3a      	ldr	r2, [r7, #32]
 80053f6:	4952      	ldr	r1, [pc, #328]	; (8005540 <I2C_RequestMemoryRead+0x1cc>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f9a2 	bl	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e097      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa0c 	bl	8005840 <I2C_WaitOnTXEFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00d      	beq.n	800544a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	2b04      	cmp	r3, #4
 8005434:	d107      	bne.n	8005446 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005444:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e076      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800544a:	88fb      	ldrh	r3, [r7, #6]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d105      	bne.n	800545c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005450:	893b      	ldrh	r3, [r7, #8]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	611a      	str	r2, [r3, #16]
 800545a:	e021      	b.n	80054a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800545c:	893b      	ldrh	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	b29b      	uxth	r3, r3
 8005462:	b2da      	uxtb	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546c:	6a39      	ldr	r1, [r7, #32]
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f9e6 	bl	8005840 <I2C_WaitOnTXEFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b04      	cmp	r3, #4
 8005480:	d107      	bne.n	8005492 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e050      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005496:	893b      	ldrh	r3, [r7, #8]
 8005498:	b2da      	uxtb	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	6a39      	ldr	r1, [r7, #32]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9cb 	bl	8005840 <I2C_WaitOnTXEFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00d      	beq.n	80054cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d107      	bne.n	80054c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e035      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f8d3 	bl	8005694 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00d      	beq.n	8005510 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d103      	bne.n	800550c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800550a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e013      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005510:	897b      	ldrh	r3, [r7, #10]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	4906      	ldr	r1, [pc, #24]	; (8005540 <I2C_RequestMemoryRead+0x1cc>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f90b 	bl	8005742 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	00010002 	.word	0x00010002

08005544 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800555e:	4b4b      	ldr	r3, [pc, #300]	; (800568c <I2C_DMAAbort+0x148>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	4a4a      	ldr	r2, [pc, #296]	; (8005690 <I2C_DMAAbort+0x14c>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0a1a      	lsrs	r2, r3, #8
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	00da      	lsls	r2, r3, #3
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005582:	f043 0220 	orr.w	r2, r3, #32
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800558a:	e00a      	b.n	80055a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b01      	subs	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800559c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a0:	d0ea      	beq.n	8005578 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2200      	movs	r2, #0
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	2200      	movs	r2, #0
 80055c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	2200      	movs	r2, #0
 80055e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	2200      	movs	r2, #0
 80055f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b60      	cmp	r3, #96	; 0x60
 8005612:	d10e      	bne.n	8005632 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	2200      	movs	r2, #0
 8005628:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800562a:	6978      	ldr	r0, [r7, #20]
 800562c:	f7fe fda1 	bl	8004172 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005630:	e027      	b.n	8005682 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005638:	2b28      	cmp	r3, #40	; 0x28
 800563a:	d117      	bne.n	800566c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800565a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2228      	movs	r2, #40	; 0x28
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800566a:	e007      	b.n	800567c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800567c:	6978      	ldr	r0, [r7, #20]
 800567e:	f7fe fd6e 	bl	800415e <HAL_I2C_ErrorCallback>
}
 8005682:	bf00      	nop
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000000 	.word	0x20000000
 8005690:	14f8b589 	.word	0x14f8b589

08005694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	4613      	mov	r3, r2
 80056a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056a4:	e025      	b.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ac:	d021      	beq.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fd fb05 	bl	8002cbc <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d116      	bne.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e023      	b.n	800573a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10d      	bne.n	8005718 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	43da      	mvns	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4013      	ands	r3, r2
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	e00c      	b.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	43da      	mvns	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	429a      	cmp	r2, r3
 8005736:	d0b6      	beq.n	80056a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005750:	e051      	b.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800575c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005760:	d123      	bne.n	80057aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005770:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f043 0204 	orr.w	r2, r3, #4
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e046      	b.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d021      	beq.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b2:	f7fd fa83 	bl	8002cbc <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e020      	b.n	8005838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10c      	bne.n	800581a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	43da      	mvns	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e00b      	b.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	43da      	mvns	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d18d      	bne.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800584c:	e02d      	b.n	80058aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f8c0 	bl	80059d4 <I2C_IsAcknowledgeFailed>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e02d      	b.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d021      	beq.n	80058aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005866:	f7fd fa29 	bl	8002cbc <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	d302      	bcc.n	800587c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d116      	bne.n	80058aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e007      	b.n	80058ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d1ca      	bne.n	800584e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
	...

080058c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058d0:	4b13      	ldr	r3, [pc, #76]	; (8005920 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	08db      	lsrs	r3, r3, #3
 80058d6:	4a13      	ldr	r2, [pc, #76]	; (8005924 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058d8:	fba2 2303 	umull	r2, r3, r2, r3
 80058dc:	0a1a      	lsrs	r2, r3, #8
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e008      	b.n	8005914 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005910:	d0e9      	beq.n	80058e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000000 	.word	0x20000000
 8005924:	14f8b589 	.word	0x14f8b589

08005928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005934:	e042      	b.n	80059bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0310 	and.w	r3, r3, #16
 8005940:	2b10      	cmp	r3, #16
 8005942:	d119      	bne.n	8005978 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0210 	mvn.w	r2, #16
 800594c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e029      	b.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005978:	f7fd f9a0 	bl	8002cbc <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	429a      	cmp	r2, r3
 8005986:	d302      	bcc.n	800598e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d116      	bne.n	80059bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d1b5      	bne.n	8005936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ea:	d11b      	bne.n	8005a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	f043 0204 	orr.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a42:	d103      	bne.n	8005a4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a4a:	e007      	b.n	8005a5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a54:	d102      	bne.n	8005a5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e267      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d075      	beq.n	8005b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a86:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f003 030c 	and.w	r3, r3, #12
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d00c      	beq.n	8005aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a92:	4b85      	ldr	r3, [pc, #532]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d112      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a9e:	4b82      	ldr	r3, [pc, #520]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aac:	4b7e      	ldr	r3, [pc, #504]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d05b      	beq.n	8005b70 <HAL_RCC_OscConfig+0x108>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d157      	bne.n	8005b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e242      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x74>
 8005ace:	4b76      	ldr	r3, [pc, #472]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a75      	ldr	r2, [pc, #468]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad8:	6013      	str	r3, [r2, #0]
 8005ada:	e01d      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x98>
 8005ae6:	4b70      	ldr	r3, [pc, #448]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6f      	ldr	r2, [pc, #444]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b6d      	ldr	r3, [pc, #436]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6c      	ldr	r2, [pc, #432]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e00b      	b.n	8005b18 <HAL_RCC_OscConfig+0xb0>
 8005b00:	4b69      	ldr	r3, [pc, #420]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a65      	ldr	r2, [pc, #404]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d013      	beq.n	8005b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b20:	f7fd f8cc 	bl	8002cbc <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b28:	f7fd f8c8 	bl	8002cbc <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b64      	cmp	r3, #100	; 0x64
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e207      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	4b5b      	ldr	r3, [pc, #364]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0xc0>
 8005b46:	e014      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd f8b8 	bl	8002cbc <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fd f8b4 	bl	8002cbc <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e1f3      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0xe8>
 8005b6e:	e000      	b.n	8005b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d063      	beq.n	8005c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b8a:	4b47      	ldr	r3, [pc, #284]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d11c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba2:	4b41      	ldr	r3, [pc, #260]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_RCC_OscConfig+0x152>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e1c7      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bba:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4937      	ldr	r1, [pc, #220]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bce:	e03a      	b.n	8005c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d020      	beq.n	8005c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd8:	4b34      	ldr	r3, [pc, #208]	; (8005cac <HAL_RCC_OscConfig+0x244>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bde:	f7fd f86d 	bl	8002cbc <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005be6:	f7fd f869 	bl	8002cbc <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e1a8      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	4b2b      	ldr	r3, [pc, #172]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	4b28      	ldr	r3, [pc, #160]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4925      	ldr	r1, [pc, #148]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
 8005c18:	e015      	b.n	8005c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c1a:	4b24      	ldr	r3, [pc, #144]	; (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fd f84c 	bl	8002cbc <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c28:	f7fd f848 	bl	8002cbc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e187      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d036      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d016      	beq.n	8005c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_RCC_OscConfig+0x248>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c60:	f7fd f82c 	bl	8002cbc <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c68:	f7fd f828 	bl	8002cbc <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e167      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0x200>
 8005c86:	e01b      	b.n	8005cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <HAL_RCC_OscConfig+0x248>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8e:	f7fd f815 	bl	8002cbc <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c94:	e00e      	b.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c96:	f7fd f811 	bl	8002cbc <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d907      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e150      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	42470000 	.word	0x42470000
 8005cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1ea      	bne.n	8005c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8097 	beq.w	8005dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd2:	4b81      	ldr	r3, [pc, #516]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10f      	bne.n	8005cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	4b7d      	ldr	r3, [pc, #500]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a7c      	ldr	r2, [pc, #496]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b7a      	ldr	r3, [pc, #488]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfe:	4b77      	ldr	r3, [pc, #476]	; (8005edc <HAL_RCC_OscConfig+0x474>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d118      	bne.n	8005d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d0a:	4b74      	ldr	r3, [pc, #464]	; (8005edc <HAL_RCC_OscConfig+0x474>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a73      	ldr	r2, [pc, #460]	; (8005edc <HAL_RCC_OscConfig+0x474>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d16:	f7fc ffd1 	bl	8002cbc <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1e:	f7fc ffcd 	bl	8002cbc <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e10c      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <HAL_RCC_OscConfig+0x474>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d106      	bne.n	8005d52 <HAL_RCC_OscConfig+0x2ea>
 8005d44:	4b64      	ldr	r3, [pc, #400]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	4a63      	ldr	r2, [pc, #396]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d50:	e01c      	b.n	8005d8c <HAL_RCC_OscConfig+0x324>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	d10c      	bne.n	8005d74 <HAL_RCC_OscConfig+0x30c>
 8005d5a:	4b5f      	ldr	r3, [pc, #380]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4a5e      	ldr	r2, [pc, #376]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d60:	f043 0304 	orr.w	r3, r3, #4
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70
 8005d66:	4b5c      	ldr	r3, [pc, #368]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4a5b      	ldr	r2, [pc, #364]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
 8005d72:	e00b      	b.n	8005d8c <HAL_RCC_OscConfig+0x324>
 8005d74:	4b58      	ldr	r3, [pc, #352]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a57      	ldr	r2, [pc, #348]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	4b55      	ldr	r3, [pc, #340]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a54      	ldr	r2, [pc, #336]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005d86:	f023 0304 	bic.w	r3, r3, #4
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fc ff92 	bl	8002cbc <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fc ff8e 	bl	8002cbc <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e0cb      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db2:	4b49      	ldr	r3, [pc, #292]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ee      	beq.n	8005d9c <HAL_RCC_OscConfig+0x334>
 8005dbe:	e014      	b.n	8005dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc0:	f7fc ff7c 	bl	8002cbc <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc6:	e00a      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dc8:	f7fc ff78 	bl	8002cbc <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e0b5      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dde:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1ee      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d105      	bne.n	8005dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df0:	4b39      	ldr	r3, [pc, #228]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	4a38      	ldr	r2, [pc, #224]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80a1 	beq.w	8005f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e06:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d05c      	beq.n	8005ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d141      	bne.n	8005e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1a:	4b31      	ldr	r3, [pc, #196]	; (8005ee0 <HAL_RCC_OscConfig+0x478>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fc ff4c 	bl	8002cbc <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fc ff48 	bl	8002cbc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e087      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f0      	bne.n	8005e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	019b      	lsls	r3, r3, #6
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	061b      	lsls	r3, r3, #24
 8005e6a:	491b      	ldr	r1, [pc, #108]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e70:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <HAL_RCC_OscConfig+0x478>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e76:	f7fc ff21 	bl	8002cbc <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e7e:	f7fc ff1d 	bl	8002cbc <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e05c      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e90:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x416>
 8005e9c:	e054      	b.n	8005f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9e:	4b10      	ldr	r3, [pc, #64]	; (8005ee0 <HAL_RCC_OscConfig+0x478>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea4:	f7fc ff0a 	bl	8002cbc <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eac:	f7fc ff06 	bl	8002cbc <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e045      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x444>
 8005eca:	e03d      	b.n	8005f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e038      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40007000 	.word	0x40007000
 8005ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_RCC_OscConfig+0x4ec>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d028      	beq.n	8005f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d121      	bne.n	8005f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d11a      	bne.n	8005f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d111      	bne.n	8005f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d107      	bne.n	8005f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800

08005f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0cc      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b68      	ldr	r3, [pc, #416]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d90c      	bls.n	8005f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b65      	ldr	r3, [pc, #404]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b63      	ldr	r3, [pc, #396]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0b8      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fac:	4b59      	ldr	r3, [pc, #356]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4a58      	ldr	r2, [pc, #352]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fc4:	4b53      	ldr	r3, [pc, #332]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd0:	4b50      	ldr	r3, [pc, #320]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	494d      	ldr	r1, [pc, #308]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d044      	beq.n	8006078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff6:	4b47      	ldr	r3, [pc, #284]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d119      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e07f      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d003      	beq.n	8006016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006012:	2b03      	cmp	r3, #3
 8006014:	d107      	bne.n	8006026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006016:	4b3f      	ldr	r3, [pc, #252]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e06f      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006026:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e067      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006036:	4b37      	ldr	r3, [pc, #220]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 0203 	bic.w	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	4934      	ldr	r1, [pc, #208]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	4313      	orrs	r3, r2
 8006046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006048:	f7fc fe38 	bl	8002cbc <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604e:	e00a      	b.n	8006066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006050:	f7fc fe34 	bl	8002cbc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e04f      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006066:	4b2b      	ldr	r3, [pc, #172]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 020c 	and.w	r2, r3, #12
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	429a      	cmp	r2, r3
 8006076:	d1eb      	bne.n	8006050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d20c      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b22      	ldr	r3, [pc, #136]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <HAL_RCC_ClockConfig+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e032      	b.n	8006106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ac:	4b19      	ldr	r3, [pc, #100]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4916      	ldr	r1, [pc, #88]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	490e      	ldr	r1, [pc, #56]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060de:	f000 f821 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 80060e2:	4602      	mov	r2, r0
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	490a      	ldr	r1, [pc, #40]	; (8006118 <HAL_RCC_ClockConfig+0x1c0>)
 80060f0:	5ccb      	ldrb	r3, [r1, r3]
 80060f2:	fa22 f303 	lsr.w	r3, r2, r3
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <HAL_RCC_ClockConfig+0x1c4>)
 80060f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <HAL_RCC_ClockConfig+0x1c8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fc fd98 	bl	8002c34 <HAL_InitTick>

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40023c00 	.word	0x40023c00
 8006114:	40023800 	.word	0x40023800
 8006118:	0800d42c 	.word	0x0800d42c
 800611c:	20000000 	.word	0x20000000
 8006120:	20000014 	.word	0x20000014

08006124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006128:	b090      	sub	sp, #64	; 0x40
 800612a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	2300      	movs	r3, #0
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006134:	2300      	movs	r3, #0
 8006136:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800613c:	4b59      	ldr	r3, [pc, #356]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	2b08      	cmp	r3, #8
 8006146:	d00d      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x40>
 8006148:	2b08      	cmp	r3, #8
 800614a:	f200 80a1 	bhi.w	8006290 <HAL_RCC_GetSysClockFreq+0x16c>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_RCC_GetSysClockFreq+0x34>
 8006152:	2b04      	cmp	r3, #4
 8006154:	d003      	beq.n	800615e <HAL_RCC_GetSysClockFreq+0x3a>
 8006156:	e09b      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006158:	4b53      	ldr	r3, [pc, #332]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800615a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800615c:	e09b      	b.n	8006296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800615e:	4b53      	ldr	r3, [pc, #332]	; (80062ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006162:	e098      	b.n	8006296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006164:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800616e:	4b4d      	ldr	r3, [pc, #308]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d028      	beq.n	80061cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617a:	4b4a      	ldr	r3, [pc, #296]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	099b      	lsrs	r3, r3, #6
 8006180:	2200      	movs	r2, #0
 8006182:	623b      	str	r3, [r7, #32]
 8006184:	627a      	str	r2, [r7, #36]	; 0x24
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800618c:	2100      	movs	r1, #0
 800618e:	4b47      	ldr	r3, [pc, #284]	; (80062ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006190:	fb03 f201 	mul.w	r2, r3, r1
 8006194:	2300      	movs	r3, #0
 8006196:	fb00 f303 	mul.w	r3, r0, r3
 800619a:	4413      	add	r3, r2
 800619c:	4a43      	ldr	r2, [pc, #268]	; (80062ac <HAL_RCC_GetSysClockFreq+0x188>)
 800619e:	fba0 1202 	umull	r1, r2, r0, r2
 80061a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a4:	460a      	mov	r2, r1
 80061a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80061a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061aa:	4413      	add	r3, r2
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2200      	movs	r2, #0
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	61fa      	str	r2, [r7, #28]
 80061b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80061be:	f7fa fd7b 	bl	8000cb8 <__aeabi_uldivmod>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4613      	mov	r3, r2
 80061c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ca:	e053      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	099b      	lsrs	r3, r3, #6
 80061d2:	2200      	movs	r2, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	617a      	str	r2, [r7, #20]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061de:	f04f 0b00 	mov.w	fp, #0
 80061e2:	4652      	mov	r2, sl
 80061e4:	465b      	mov	r3, fp
 80061e6:	f04f 0000 	mov.w	r0, #0
 80061ea:	f04f 0100 	mov.w	r1, #0
 80061ee:	0159      	lsls	r1, r3, #5
 80061f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061f4:	0150      	lsls	r0, r2, #5
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	ebb2 080a 	subs.w	r8, r2, sl
 80061fe:	eb63 090b 	sbc.w	r9, r3, fp
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800620e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006216:	ebb2 0408 	subs.w	r4, r2, r8
 800621a:	eb63 0509 	sbc.w	r5, r3, r9
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	00eb      	lsls	r3, r5, #3
 8006228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800622c:	00e2      	lsls	r2, r4, #3
 800622e:	4614      	mov	r4, r2
 8006230:	461d      	mov	r5, r3
 8006232:	eb14 030a 	adds.w	r3, r4, sl
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	eb45 030b 	adc.w	r3, r5, fp
 800623c:	607b      	str	r3, [r7, #4]
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800624a:	4629      	mov	r1, r5
 800624c:	028b      	lsls	r3, r1, #10
 800624e:	4621      	mov	r1, r4
 8006250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006254:	4621      	mov	r1, r4
 8006256:	028a      	lsls	r2, r1, #10
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	2200      	movs	r2, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	60fa      	str	r2, [r7, #12]
 8006264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006268:	f7fa fd26 	bl	8000cb8 <__aeabi_uldivmod>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4613      	mov	r3, r2
 8006272:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	0c1b      	lsrs	r3, r3, #16
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	3301      	adds	r3, #1
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006284:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800628e:	e002      	b.n	8006296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006290:	4b05      	ldr	r3, [pc, #20]	; (80062a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006292:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006298:	4618      	mov	r0, r3
 800629a:	3740      	adds	r7, #64	; 0x40
 800629c:	46bd      	mov	sp, r7
 800629e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	00f42400 	.word	0x00f42400
 80062ac:	017d7840 	.word	0x017d7840

080062b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b4:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062b6:	681b      	ldr	r3, [r3, #0]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	20000000 	.word	0x20000000

080062c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062cc:	f7ff fff0 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062d0:	4602      	mov	r2, r0
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	0a9b      	lsrs	r3, r3, #10
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	4903      	ldr	r1, [pc, #12]	; (80062ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80062de:	5ccb      	ldrb	r3, [r1, r3]
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	0800d43c 	.word	0x0800d43c

080062f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062f4:	f7ff ffdc 	bl	80062b0 <HAL_RCC_GetHCLKFreq>
 80062f8:	4602      	mov	r2, r0
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	0b5b      	lsrs	r3, r3, #13
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	4903      	ldr	r1, [pc, #12]	; (8006314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006306:	5ccb      	ldrb	r3, [r1, r3]
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40023800 	.word	0x40023800
 8006314:	0800d43c 	.word	0x0800d43c

08006318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e07b      	b.n	8006422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d108      	bne.n	8006344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633a:	d009      	beq.n	8006350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	61da      	str	r2, [r3, #28]
 8006342:	e005      	b.n	8006350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb fa8c 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	ea42 0103 	orr.w	r1, r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	f003 0104 	and.w	r1, r3, #4
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	f003 0210 	and.w	r2, r3, #16
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b088      	sub	sp, #32
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_SPI_Transmit+0x22>
 8006448:	2302      	movs	r3, #2
 800644a:	e126      	b.n	800669a <HAL_SPI_Transmit+0x270>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006454:	f7fc fc32 	bl	8002cbc <HAL_GetTick>
 8006458:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d002      	beq.n	8006470 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800646e:	e10b      	b.n	8006688 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_SPI_Transmit+0x52>
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006480:	e102      	b.n	8006688 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2203      	movs	r2, #3
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	d10f      	bne.n	80064ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006510:	d14b      	bne.n	80065aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0xf6>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d13e      	bne.n	800659e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	881a      	ldrh	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	1c9a      	adds	r2, r3, #2
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006544:	e02b      	b.n	800659e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d112      	bne.n	800657a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
 8006578:	e011      	b.n	800659e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657a:	f7fc fb9f 	bl	8002cbc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d803      	bhi.n	8006592 <HAL_SPI_Transmit+0x168>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Transmit+0x16e>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800659c:	e074      	b.n	8006688 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1ce      	bne.n	8006546 <HAL_SPI_Transmit+0x11c>
 80065a8:	e04c      	b.n	8006644 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_Transmit+0x18e>
 80065b2:	8afb      	ldrh	r3, [r7, #22]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d140      	bne.n	800663a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	1c5a      	adds	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065de:	e02c      	b.n	800663a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d113      	bne.n	8006616 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	86da      	strh	r2, [r3, #54]	; 0x36
 8006614:	e011      	b.n	800663a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006616:	f7fc fb51 	bl	8002cbc <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d803      	bhi.n	800662e <HAL_SPI_Transmit+0x204>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d102      	bne.n	8006634 <HAL_SPI_Transmit+0x20a>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006638:	e026      	b.n	8006688 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1cd      	bne.n	80065e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f8b3 	bl	80067b4 <SPI_EndRxTxTransaction>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2220      	movs	r2, #32
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006662:	2300      	movs	r3, #0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e000      	b.n	8006688 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006686:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006698:	7ffb      	ldrb	r3, [r7, #31]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3720      	adds	r7, #32
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	603b      	str	r3, [r7, #0]
 80066b0:	4613      	mov	r3, r2
 80066b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066b4:	f7fc fb02 	bl	8002cbc <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	4413      	add	r3, r2
 80066c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066c4:	f7fc fafa 	bl	8002cbc <HAL_GetTick>
 80066c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066ca:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	015b      	lsls	r3, r3, #5
 80066d0:	0d1b      	lsrs	r3, r3, #20
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	fb02 f303 	mul.w	r3, r2, r3
 80066d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066da:	e054      	b.n	8006786 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d050      	beq.n	8006786 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066e4:	f7fc faea 	bl	8002cbc <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d902      	bls.n	80066fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d13d      	bne.n	8006776 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006708:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006712:	d111      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800671c:	d004      	beq.n	8006728 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006726:	d107      	bne.n	8006738 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006736:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006740:	d10f      	bne.n	8006762 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e017      	b.n	80067a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	3b01      	subs	r3, #1
 8006784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4013      	ands	r3, r2
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d19b      	bne.n	80066dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000000 	.word	0x20000000

080067b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <SPI_EndRxTxTransaction+0x7c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <SPI_EndRxTxTransaction+0x80>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	0d5b      	lsrs	r3, r3, #21
 80067cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067d0:	fb02 f303 	mul.w	r3, r2, r3
 80067d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067de:	d112      	bne.n	8006806 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2200      	movs	r2, #0
 80067e8:	2180      	movs	r1, #128	; 0x80
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f7ff ff5a 	bl	80066a4 <SPI_WaitFlagStateUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d016      	beq.n	8006824 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	f043 0220 	orr.w	r2, r3, #32
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e00f      	b.n	8006826 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	3b01      	subs	r3, #1
 8006810:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681c:	2b80      	cmp	r3, #128	; 0x80
 800681e:	d0f2      	beq.n	8006806 <SPI_EndRxTxTransaction+0x52>
 8006820:	e000      	b.n	8006824 <SPI_EndRxTxTransaction+0x70>
        break;
 8006822:	bf00      	nop
  }

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	20000000 	.word	0x20000000
 8006834:	165e9f81 	.word	0x165e9f81

08006838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e041      	b.n	80068ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb f9bc 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f000 f888 	bl	800698c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d001      	beq.n	80068f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e03c      	b.n	800696a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <HAL_TIM_Base_Start+0xa0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d018      	beq.n	8006934 <HAL_TIM_Base_Start+0x5c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690a:	d013      	beq.n	8006934 <HAL_TIM_Base_Start+0x5c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1a      	ldr	r2, [pc, #104]	; (800697c <HAL_TIM_Base_Start+0xa4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00e      	beq.n	8006934 <HAL_TIM_Base_Start+0x5c>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a19      	ldr	r2, [pc, #100]	; (8006980 <HAL_TIM_Base_Start+0xa8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d009      	beq.n	8006934 <HAL_TIM_Base_Start+0x5c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a17      	ldr	r2, [pc, #92]	; (8006984 <HAL_TIM_Base_Start+0xac>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <HAL_TIM_Base_Start+0x5c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <HAL_TIM_Base_Start+0xb0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d111      	bne.n	8006958 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b06      	cmp	r3, #6
 8006944:	d010      	beq.n	8006968 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	e007      	b.n	8006968 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40014000 	.word	0x40014000

0800698c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <TIM_Base_SetConfig+0xe4>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00f      	beq.n	80069c4 <TIM_Base_SetConfig+0x38>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d00b      	beq.n	80069c4 <TIM_Base_SetConfig+0x38>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <TIM_Base_SetConfig+0xe8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_Base_SetConfig+0x38>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a30      	ldr	r2, [pc, #192]	; (8006a78 <TIM_Base_SetConfig+0xec>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0x38>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a2f      	ldr	r2, [pc, #188]	; (8006a7c <TIM_Base_SetConfig+0xf0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d108      	bne.n	80069d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <TIM_Base_SetConfig+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d01b      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e4:	d017      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a22      	ldr	r2, [pc, #136]	; (8006a74 <TIM_Base_SetConfig+0xe8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <TIM_Base_SetConfig+0xec>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00f      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <TIM_Base_SetConfig+0xf0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00b      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <TIM_Base_SetConfig+0xf4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d007      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1e      	ldr	r2, [pc, #120]	; (8006a84 <TIM_Base_SetConfig+0xf8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_Base_SetConfig+0x8a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <TIM_Base_SetConfig+0xfc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d108      	bne.n	8006a28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a08      	ldr	r2, [pc, #32]	; (8006a70 <TIM_Base_SetConfig+0xe4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d103      	bne.n	8006a5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	615a      	str	r2, [r3, #20]
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e03f      	b.n	8006b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fb f8de 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2224      	movs	r2, #36	; 0x24
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fddf 	bl	8007694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695a      	ldr	r2, [r3, #20]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08a      	sub	sp, #40	; 0x28
 8006b2a:	af02      	add	r7, sp, #8
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d17c      	bne.n	8006c40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_UART_Transmit+0x2c>
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e075      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_UART_Transmit+0x3e>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e06e      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2221      	movs	r2, #33	; 0x21
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b7a:	f7fc f89f 	bl	8002cbc <HAL_GetTick>
 8006b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	88fa      	ldrh	r2, [r7, #6]
 8006b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	88fa      	ldrh	r2, [r7, #6]
 8006b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d108      	bne.n	8006ba8 <HAL_UART_Transmit+0x82>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	e003      	b.n	8006bb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bb8:	e02a      	b.n	8006c10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 fb1f 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e036      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10b      	bne.n	8006bf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	3302      	adds	r3, #2
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	e007      	b.n	8006c02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	781a      	ldrb	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1cf      	bne.n	8006bba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2140      	movs	r1, #64	; 0x40
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 faef 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e006      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b084      	sub	sp, #16
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	4613      	mov	r3, r2
 8006c56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d11d      	bne.n	8006ca0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_UART_Receive_IT+0x26>
 8006c6a:	88fb      	ldrh	r3, [r7, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e016      	b.n	8006ca2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Receive_IT+0x38>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e00f      	b.n	8006ca2 <HAL_UART_Receive_IT+0x58>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	461a      	mov	r2, r3
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fb24 	bl	80072e4 <UART_Start_Receive_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	e000      	b.n	8006ca2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
  }
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b0ba      	sub	sp, #232	; 0xe8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10f      	bne.n	8006d12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf6:	f003 0320 	and.w	r3, r3, #32
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <HAL_UART_IRQHandler+0x66>
 8006cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 fc07 	bl	800751e <UART_Receive_IT>
      return;
 8006d10:	e256      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80de 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x22c>
 8006d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80d1 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <HAL_UART_IRQHandler+0xae>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f043 0201 	orr.w	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f043 0202 	orr.w	r2, r3, #2
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <HAL_UART_IRQHandler+0xf6>
 8006d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f043 0204 	orr.w	r2, r3, #4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d011      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x126>
 8006dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d105      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f043 0208 	orr.w	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 81ed 	beq.w	80071b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_UART_IRQHandler+0x14e>
 8006de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dec:	f003 0320 	and.w	r3, r3, #32
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fb92 	bl	800751e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	bf0c      	ite	eq
 8006e08:	2301      	moveq	r3, #1
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <HAL_UART_IRQHandler+0x17a>
 8006e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d04f      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa9a 	bl	8007360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d141      	bne.n	8006ebe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3314      	adds	r3, #20
 8006e62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1d9      	bne.n	8006e3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d013      	beq.n	8006eb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	4a7d      	ldr	r2, [pc, #500]	; (8007088 <HAL_UART_IRQHandler+0x3dc>)
 8006e94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fc f8bf 	bl	800301e <HAL_DMA_Abort_IT>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb4:	e00e      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f990 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ebc:	e00a      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f98c 	bl	80071dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec4:	e006      	b.n	8006ed4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f988 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ed2:	e170      	b.n	80071b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed4:	bf00      	nop
    return;
 8006ed6:	e16e      	b.n	80071b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f040 814a 	bne.w	8007176 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 8143 	beq.w	8007176 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 813c 	beq.w	8007176 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60bb      	str	r3, [r7, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60bb      	str	r3, [r7, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	f040 80b4 	bne.w	800708c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8140 	beq.w	80071ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f42:	429a      	cmp	r2, r3
 8006f44:	f080 8139 	bcs.w	80071ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5a:	f000 8088 	beq.w	800706e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f9a:	e841 2300 	strex	r3, r2, [r1]
 8006f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1d9      	bne.n	8006f5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3314      	adds	r3, #20
 8006fca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e1      	bne.n	8006faa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3314      	adds	r3, #20
 8006fec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800700a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800700c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007010:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e3      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800703c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800703e:	f023 0310 	bic.w	r3, r3, #16
 8007042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007050:	65ba      	str	r2, [r7, #88]	; 0x58
 8007052:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800705e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e3      	bne.n	800702c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	4618      	mov	r0, r3
 800706a:	f7fb ff68 	bl	8002f3e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007076:	b29b      	uxth	r3, r3
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	b29b      	uxth	r3, r3
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8b6 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007084:	e099      	b.n	80071ba <HAL_UART_IRQHandler+0x50e>
 8007086:	bf00      	nop
 8007088:	08007427 	.word	0x08007427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007094:	b29b      	uxth	r3, r3
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 808b 	beq.w	80071be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80070a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 8086 	beq.w	80071be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330c      	adds	r3, #12
 80070b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070d6:	647a      	str	r2, [r7, #68]	; 0x44
 80070d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e3      	bne.n	80070b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	623b      	str	r3, [r7, #32]
   return(result);
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f023 0301 	bic.w	r3, r3, #1
 8007100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800710e:	633a      	str	r2, [r7, #48]	; 0x30
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0310 	bic.w	r3, r3, #16
 8007146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007154:	61fa      	str	r2, [r7, #28]
 8007156:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	69b9      	ldr	r1, [r7, #24]
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	617b      	str	r3, [r7, #20]
   return(result);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e3      	bne.n	8007130 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f83e 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007174:	e023      	b.n	80071be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <HAL_UART_IRQHandler+0x4ea>
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f95d 	bl	800744e <UART_Transmit_IT>
    return;
 8007194:	e014      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00e      	beq.n	80071c0 <HAL_UART_IRQHandler+0x514>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f99d 	bl	80074ee <UART_EndTransmit_IT>
    return;
 80071b4:	e004      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
    return;
 80071b6:	bf00      	nop
 80071b8:	e002      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
      return;
 80071ba:	bf00      	nop
 80071bc:	e000      	b.n	80071c0 <HAL_UART_IRQHandler+0x514>
      return;
 80071be:	bf00      	nop
  }
}
 80071c0:	37e8      	adds	r7, #232	; 0xe8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop

080071c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b090      	sub	sp, #64	; 0x40
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007218:	e050      	b.n	80072bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d04c      	beq.n	80072bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0x30>
 8007228:	f7fb fd48 	bl	8002cbc <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007234:	429a      	cmp	r2, r3
 8007236:	d241      	bcs.n	80072bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007258:	637a      	str	r2, [r7, #52]	; 0x34
 800725a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800725e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e5      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3314      	adds	r3, #20
 8007272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	613b      	str	r3, [r7, #16]
   return(result);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f023 0301 	bic.w	r3, r3, #1
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3314      	adds	r3, #20
 800728a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728c:	623a      	str	r2, [r7, #32]
 800728e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	6a3a      	ldr	r2, [r7, #32]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	61bb      	str	r3, [r7, #24]
   return(result);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e5      	bne.n	800726c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e00f      	b.n	80072dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4013      	ands	r3, r2
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	bf0c      	ite	eq
 80072cc:	2301      	moveq	r3, #1
 80072ce:	2300      	movne	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d09f      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3740      	adds	r7, #64	; 0x40
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	88fa      	ldrh	r2, [r7, #6]
 80072fc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	88fa      	ldrh	r2, [r7, #6]
 8007302:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2222      	movs	r2, #34	; 0x22
 800730e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007330:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695a      	ldr	r2, [r3, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0201 	orr.w	r2, r2, #1
 8007340:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0220 	orr.w	r2, r2, #32
 8007350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b095      	sub	sp, #84	; 0x54
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	330c      	adds	r3, #12
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007388:	643a      	str	r2, [r7, #64]	; 0x40
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800738e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e5      	bne.n	800739c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d119      	bne.n	800740c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f023 0310 	bic.w	r3, r3, #16
 80073ee:	647b      	str	r3, [r7, #68]	; 0x44
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073f8:	61ba      	str	r2, [r7, #24]
 80073fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6979      	ldr	r1, [r7, #20]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	613b      	str	r3, [r7, #16]
   return(result);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e5      	bne.n	80073d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800741a:	bf00      	nop
 800741c:	3754      	adds	r7, #84	; 0x54
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff fecb 	bl	80071dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b21      	cmp	r3, #33	; 0x21
 8007460:	d13e      	bne.n	80074e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746a:	d114      	bne.n	8007496 <UART_Transmit_IT+0x48>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d110      	bne.n	8007496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	1c9a      	adds	r2, r3, #2
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	621a      	str	r2, [r3, #32]
 8007494:	e008      	b.n	80074a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	1c59      	adds	r1, r3, #1
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6211      	str	r1, [r2, #32]
 80074a0:	781a      	ldrb	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	4619      	mov	r1, r3
 80074b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10f      	bne.n	80074dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	e000      	b.n	80074e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074e0:	2302      	movs	r3, #2
  }
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fe5a 	bl	80071c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b08c      	sub	sp, #48	; 0x30
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b22      	cmp	r3, #34	; 0x22
 8007530:	f040 80ab 	bne.w	800768a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753c:	d117      	bne.n	800756e <UART_Receive_IT+0x50>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d113      	bne.n	800756e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	b29b      	uxth	r3, r3
 8007558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755c:	b29a      	uxth	r2, r3
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	1c9a      	adds	r2, r3, #2
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
 800756c:	e026      	b.n	80075bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007580:	d007      	beq.n	8007592 <UART_Receive_IT+0x74>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <UART_Receive_IT+0x82>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	e008      	b.n	80075b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	4619      	mov	r1, r3
 80075ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d15a      	bne.n	8007686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0220 	bic.w	r2, r2, #32
 80075de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695a      	ldr	r2, [r3, #20]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	2b01      	cmp	r3, #1
 800760e:	d135      	bne.n	800767c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	613b      	str	r3, [r7, #16]
   return(result);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007636:	623a      	str	r2, [r7, #32]
 8007638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	69f9      	ldr	r1, [r7, #28]
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	61bb      	str	r3, [r7, #24]
   return(result);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	2b10      	cmp	r3, #16
 8007656:	d10a      	bne.n	800766e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff fdbb 	bl	80071f0 <HAL_UARTEx_RxEventCallback>
 800767a:	e002      	b.n	8007682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fa f891 	bl	80017a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	e002      	b.n	800768c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3730      	adds	r7, #48	; 0x30
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007698:	b0c0      	sub	sp, #256	; 0x100
 800769a:	af00      	add	r7, sp, #0
 800769c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b0:	68d9      	ldr	r1, [r3, #12]
 80076b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	ea40 0301 	orr.w	r3, r0, r1
 80076bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4313      	orrs	r3, r2
 80076dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076ec:	f021 010c 	bic.w	r1, r1, #12
 80076f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076fa:	430b      	orrs	r3, r1
 80076fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770e:	6999      	ldr	r1, [r3, #24]
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	ea40 0301 	orr.w	r3, r0, r1
 800771a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b8f      	ldr	r3, [pc, #572]	; (8007960 <UART_SetConfig+0x2cc>)
 8007724:	429a      	cmp	r2, r3
 8007726:	d005      	beq.n	8007734 <UART_SetConfig+0xa0>
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4b8d      	ldr	r3, [pc, #564]	; (8007964 <UART_SetConfig+0x2d0>)
 8007730:	429a      	cmp	r2, r3
 8007732:	d104      	bne.n	800773e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007734:	f7fe fddc 	bl	80062f0 <HAL_RCC_GetPCLK2Freq>
 8007738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800773c:	e003      	b.n	8007746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800773e:	f7fe fdc3 	bl	80062c8 <HAL_RCC_GetPCLK1Freq>
 8007742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007750:	f040 810c 	bne.w	800796c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800775e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007766:	4622      	mov	r2, r4
 8007768:	462b      	mov	r3, r5
 800776a:	1891      	adds	r1, r2, r2
 800776c:	65b9      	str	r1, [r7, #88]	; 0x58
 800776e:	415b      	adcs	r3, r3
 8007770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007776:	4621      	mov	r1, r4
 8007778:	eb12 0801 	adds.w	r8, r2, r1
 800777c:	4629      	mov	r1, r5
 800777e:	eb43 0901 	adc.w	r9, r3, r1
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800778e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007796:	4690      	mov	r8, r2
 8007798:	4699      	mov	r9, r3
 800779a:	4623      	mov	r3, r4
 800779c:	eb18 0303 	adds.w	r3, r8, r3
 80077a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077a4:	462b      	mov	r3, r5
 80077a6:	eb49 0303 	adc.w	r3, r9, r3
 80077aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077c2:	460b      	mov	r3, r1
 80077c4:	18db      	adds	r3, r3, r3
 80077c6:	653b      	str	r3, [r7, #80]	; 0x50
 80077c8:	4613      	mov	r3, r2
 80077ca:	eb42 0303 	adc.w	r3, r2, r3
 80077ce:	657b      	str	r3, [r7, #84]	; 0x54
 80077d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80077d8:	f7f9 fa6e 	bl	8000cb8 <__aeabi_uldivmod>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4b61      	ldr	r3, [pc, #388]	; (8007968 <UART_SetConfig+0x2d4>)
 80077e2:	fba3 2302 	umull	r2, r3, r3, r2
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	011c      	lsls	r4, r3, #4
 80077ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80077f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	1891      	adds	r1, r2, r2
 8007802:	64b9      	str	r1, [r7, #72]	; 0x48
 8007804:	415b      	adcs	r3, r3
 8007806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800780c:	4641      	mov	r1, r8
 800780e:	eb12 0a01 	adds.w	sl, r2, r1
 8007812:	4649      	mov	r1, r9
 8007814:	eb43 0b01 	adc.w	fp, r3, r1
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800782c:	4692      	mov	sl, r2
 800782e:	469b      	mov	fp, r3
 8007830:	4643      	mov	r3, r8
 8007832:	eb1a 0303 	adds.w	r3, sl, r3
 8007836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800783a:	464b      	mov	r3, r9
 800783c:	eb4b 0303 	adc.w	r3, fp, r3
 8007840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007858:	460b      	mov	r3, r1
 800785a:	18db      	adds	r3, r3, r3
 800785c:	643b      	str	r3, [r7, #64]	; 0x40
 800785e:	4613      	mov	r3, r2
 8007860:	eb42 0303 	adc.w	r3, r2, r3
 8007864:	647b      	str	r3, [r7, #68]	; 0x44
 8007866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800786a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800786e:	f7f9 fa23 	bl	8000cb8 <__aeabi_uldivmod>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4611      	mov	r1, r2
 8007878:	4b3b      	ldr	r3, [pc, #236]	; (8007968 <UART_SetConfig+0x2d4>)
 800787a:	fba3 2301 	umull	r2, r3, r3, r1
 800787e:	095b      	lsrs	r3, r3, #5
 8007880:	2264      	movs	r2, #100	; 0x64
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	1acb      	subs	r3, r1, r3
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800788e:	4b36      	ldr	r3, [pc, #216]	; (8007968 <UART_SetConfig+0x2d4>)
 8007890:	fba3 2302 	umull	r2, r3, r3, r2
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800789c:	441c      	add	r4, r3
 800789e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	1891      	adds	r1, r2, r2
 80078b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80078b8:	415b      	adcs	r3, r3
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078c0:	4641      	mov	r1, r8
 80078c2:	1851      	adds	r1, r2, r1
 80078c4:	6339      	str	r1, [r7, #48]	; 0x30
 80078c6:	4649      	mov	r1, r9
 80078c8:	414b      	adcs	r3, r1
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80078d8:	4659      	mov	r1, fp
 80078da:	00cb      	lsls	r3, r1, #3
 80078dc:	4651      	mov	r1, sl
 80078de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078e2:	4651      	mov	r1, sl
 80078e4:	00ca      	lsls	r2, r1, #3
 80078e6:	4610      	mov	r0, r2
 80078e8:	4619      	mov	r1, r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	4642      	mov	r2, r8
 80078ee:	189b      	adds	r3, r3, r2
 80078f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078f4:	464b      	mov	r3, r9
 80078f6:	460a      	mov	r2, r1
 80078f8:	eb42 0303 	adc.w	r3, r2, r3
 80078fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800790c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007914:	460b      	mov	r3, r1
 8007916:	18db      	adds	r3, r3, r3
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
 800791a:	4613      	mov	r3, r2
 800791c:	eb42 0303 	adc.w	r3, r2, r3
 8007920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800792a:	f7f9 f9c5 	bl	8000cb8 <__aeabi_uldivmod>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <UART_SetConfig+0x2d4>)
 8007934:	fba3 1302 	umull	r1, r3, r3, r2
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	2164      	movs	r1, #100	; 0x64
 800793c:	fb01 f303 	mul.w	r3, r1, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	00db      	lsls	r3, r3, #3
 8007944:	3332      	adds	r3, #50	; 0x32
 8007946:	4a08      	ldr	r2, [pc, #32]	; (8007968 <UART_SetConfig+0x2d4>)
 8007948:	fba2 2303 	umull	r2, r3, r2, r3
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	f003 0207 	and.w	r2, r3, #7
 8007952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4422      	add	r2, r4
 800795a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800795c:	e105      	b.n	8007b6a <UART_SetConfig+0x4d6>
 800795e:	bf00      	nop
 8007960:	40011000 	.word	0x40011000
 8007964:	40011400 	.word	0x40011400
 8007968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800796c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800797a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800797e:	4642      	mov	r2, r8
 8007980:	464b      	mov	r3, r9
 8007982:	1891      	adds	r1, r2, r2
 8007984:	6239      	str	r1, [r7, #32]
 8007986:	415b      	adcs	r3, r3
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
 800798a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800798e:	4641      	mov	r1, r8
 8007990:	1854      	adds	r4, r2, r1
 8007992:	4649      	mov	r1, r9
 8007994:	eb43 0501 	adc.w	r5, r3, r1
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	00eb      	lsls	r3, r5, #3
 80079a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079a6:	00e2      	lsls	r2, r4, #3
 80079a8:	4614      	mov	r4, r2
 80079aa:	461d      	mov	r5, r3
 80079ac:	4643      	mov	r3, r8
 80079ae:	18e3      	adds	r3, r4, r3
 80079b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079b4:	464b      	mov	r3, r9
 80079b6:	eb45 0303 	adc.w	r3, r5, r3
 80079ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80079da:	4629      	mov	r1, r5
 80079dc:	008b      	lsls	r3, r1, #2
 80079de:	4621      	mov	r1, r4
 80079e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079e4:	4621      	mov	r1, r4
 80079e6:	008a      	lsls	r2, r1, #2
 80079e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80079ec:	f7f9 f964 	bl	8000cb8 <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4b60      	ldr	r3, [pc, #384]	; (8007b78 <UART_SetConfig+0x4e4>)
 80079f6:	fba3 2302 	umull	r2, r3, r3, r2
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	011c      	lsls	r4, r3, #4
 80079fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a10:	4642      	mov	r2, r8
 8007a12:	464b      	mov	r3, r9
 8007a14:	1891      	adds	r1, r2, r2
 8007a16:	61b9      	str	r1, [r7, #24]
 8007a18:	415b      	adcs	r3, r3
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a20:	4641      	mov	r1, r8
 8007a22:	1851      	adds	r1, r2, r1
 8007a24:	6139      	str	r1, [r7, #16]
 8007a26:	4649      	mov	r1, r9
 8007a28:	414b      	adcs	r3, r1
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	f04f 0300 	mov.w	r3, #0
 8007a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a38:	4659      	mov	r1, fp
 8007a3a:	00cb      	lsls	r3, r1, #3
 8007a3c:	4651      	mov	r1, sl
 8007a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a42:	4651      	mov	r1, sl
 8007a44:	00ca      	lsls	r2, r1, #3
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	189b      	adds	r3, r3, r2
 8007a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a54:	464b      	mov	r3, r9
 8007a56:	460a      	mov	r2, r1
 8007a58:	eb42 0303 	adc.w	r3, r2, r3
 8007a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a78:	4649      	mov	r1, r9
 8007a7a:	008b      	lsls	r3, r1, #2
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a82:	4641      	mov	r1, r8
 8007a84:	008a      	lsls	r2, r1, #2
 8007a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a8a:	f7f9 f915 	bl	8000cb8 <__aeabi_uldivmod>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4b39      	ldr	r3, [pc, #228]	; (8007b78 <UART_SetConfig+0x4e4>)
 8007a94:	fba3 1302 	umull	r1, r3, r3, r2
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	2164      	movs	r1, #100	; 0x64
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	3332      	adds	r3, #50	; 0x32
 8007aa6:	4a34      	ldr	r2, [pc, #208]	; (8007b78 <UART_SetConfig+0x4e4>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab2:	441c      	add	r4, r3
 8007ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab8:	2200      	movs	r2, #0
 8007aba:	673b      	str	r3, [r7, #112]	; 0x70
 8007abc:	677a      	str	r2, [r7, #116]	; 0x74
 8007abe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ac2:	4642      	mov	r2, r8
 8007ac4:	464b      	mov	r3, r9
 8007ac6:	1891      	adds	r1, r2, r2
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	415b      	adcs	r3, r3
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	1851      	adds	r1, r2, r1
 8007ad6:	6039      	str	r1, [r7, #0]
 8007ad8:	4649      	mov	r1, r9
 8007ada:	414b      	adcs	r3, r1
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007aea:	4659      	mov	r1, fp
 8007aec:	00cb      	lsls	r3, r1, #3
 8007aee:	4651      	mov	r1, sl
 8007af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007af4:	4651      	mov	r1, sl
 8007af6:	00ca      	lsls	r2, r1, #3
 8007af8:	4610      	mov	r0, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	4642      	mov	r2, r8
 8007b00:	189b      	adds	r3, r3, r2
 8007b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b04:	464b      	mov	r3, r9
 8007b06:	460a      	mov	r2, r1
 8007b08:	eb42 0303 	adc.w	r3, r2, r3
 8007b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	663b      	str	r3, [r7, #96]	; 0x60
 8007b18:	667a      	str	r2, [r7, #100]	; 0x64
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b26:	4649      	mov	r1, r9
 8007b28:	008b      	lsls	r3, r1, #2
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b30:	4641      	mov	r1, r8
 8007b32:	008a      	lsls	r2, r1, #2
 8007b34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b38:	f7f9 f8be 	bl	8000cb8 <__aeabi_uldivmod>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <UART_SetConfig+0x4e4>)
 8007b42:	fba3 1302 	umull	r1, r3, r3, r2
 8007b46:	095b      	lsrs	r3, r3, #5
 8007b48:	2164      	movs	r1, #100	; 0x64
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	3332      	adds	r3, #50	; 0x32
 8007b54:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <UART_SetConfig+0x4e4>)
 8007b56:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	f003 020f 	and.w	r2, r3, #15
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4422      	add	r2, r4
 8007b68:	609a      	str	r2, [r3, #8]
}
 8007b6a:	bf00      	nop
 8007b6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b70:	46bd      	mov	sp, r7
 8007b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b76:	bf00      	nop
 8007b78:	51eb851f 	.word	0x51eb851f

08007b7c <__errno>:
 8007b7c:	4b01      	ldr	r3, [pc, #4]	; (8007b84 <__errno+0x8>)
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	2000001c 	.word	0x2000001c

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4d0d      	ldr	r5, [pc, #52]	; (8007bc0 <__libc_init_array+0x38>)
 8007b8c:	4c0d      	ldr	r4, [pc, #52]	; (8007bc4 <__libc_init_array+0x3c>)
 8007b8e:	1b64      	subs	r4, r4, r5
 8007b90:	10a4      	asrs	r4, r4, #2
 8007b92:	2600      	movs	r6, #0
 8007b94:	42a6      	cmp	r6, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	4d0b      	ldr	r5, [pc, #44]	; (8007bc8 <__libc_init_array+0x40>)
 8007b9a:	4c0c      	ldr	r4, [pc, #48]	; (8007bcc <__libc_init_array+0x44>)
 8007b9c:	f005 fbaa 	bl	800d2f4 <_init>
 8007ba0:	1b64      	subs	r4, r4, r5
 8007ba2:	10a4      	asrs	r4, r4, #2
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb0:	4798      	blx	r3
 8007bb2:	3601      	adds	r6, #1
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bba:	4798      	blx	r3
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	0800edf0 	.word	0x0800edf0
 8007bc4:	0800edf0 	.word	0x0800edf0
 8007bc8:	0800edf0 	.word	0x0800edf0
 8007bcc:	0800edf4 	.word	0x0800edf4

08007bd0 <memset>:
 8007bd0:	4402      	add	r2, r0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d100      	bne.n	8007bda <memset+0xa>
 8007bd8:	4770      	bx	lr
 8007bda:	f803 1b01 	strb.w	r1, [r3], #1
 8007bde:	e7f9      	b.n	8007bd4 <memset+0x4>

08007be0 <__cvt>:
 8007be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	ec55 4b10 	vmov	r4, r5, d0
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	460e      	mov	r6, r1
 8007bec:	4619      	mov	r1, r3
 8007bee:	462b      	mov	r3, r5
 8007bf0:	bfbb      	ittet	lt
 8007bf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bf6:	461d      	movlt	r5, r3
 8007bf8:	2300      	movge	r3, #0
 8007bfa:	232d      	movlt	r3, #45	; 0x2d
 8007bfc:	700b      	strb	r3, [r1, #0]
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c04:	4691      	mov	r9, r2
 8007c06:	f023 0820 	bic.w	r8, r3, #32
 8007c0a:	bfbc      	itt	lt
 8007c0c:	4622      	movlt	r2, r4
 8007c0e:	4614      	movlt	r4, r2
 8007c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c14:	d005      	beq.n	8007c22 <__cvt+0x42>
 8007c16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c1a:	d100      	bne.n	8007c1e <__cvt+0x3e>
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	2102      	movs	r1, #2
 8007c20:	e000      	b.n	8007c24 <__cvt+0x44>
 8007c22:	2103      	movs	r1, #3
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	ab02      	add	r3, sp, #8
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	ec45 4b10 	vmov	d0, r4, r5
 8007c30:	4653      	mov	r3, sl
 8007c32:	4632      	mov	r2, r6
 8007c34:	f001 fdac 	bl	8009790 <_dtoa_r>
 8007c38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	d102      	bne.n	8007c46 <__cvt+0x66>
 8007c40:	f019 0f01 	tst.w	r9, #1
 8007c44:	d022      	beq.n	8007c8c <__cvt+0xac>
 8007c46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c4a:	eb07 0906 	add.w	r9, r7, r6
 8007c4e:	d110      	bne.n	8007c72 <__cvt+0x92>
 8007c50:	783b      	ldrb	r3, [r7, #0]
 8007c52:	2b30      	cmp	r3, #48	; 0x30
 8007c54:	d10a      	bne.n	8007c6c <__cvt+0x8c>
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 ff4b 	bl	8000af8 <__aeabi_dcmpeq>
 8007c62:	b918      	cbnz	r0, 8007c6c <__cvt+0x8c>
 8007c64:	f1c6 0601 	rsb	r6, r6, #1
 8007c68:	f8ca 6000 	str.w	r6, [sl]
 8007c6c:	f8da 3000 	ldr.w	r3, [sl]
 8007c70:	4499      	add	r9, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	2300      	movs	r3, #0
 8007c76:	4620      	mov	r0, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7f8 ff3d 	bl	8000af8 <__aeabi_dcmpeq>
 8007c7e:	b108      	cbz	r0, 8007c84 <__cvt+0xa4>
 8007c80:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c84:	2230      	movs	r2, #48	; 0x30
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	454b      	cmp	r3, r9
 8007c8a:	d307      	bcc.n	8007c9c <__cvt+0xbc>
 8007c8c:	9b03      	ldr	r3, [sp, #12]
 8007c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c90:	1bdb      	subs	r3, r3, r7
 8007c92:	4638      	mov	r0, r7
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	b004      	add	sp, #16
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	1c59      	adds	r1, r3, #1
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e7f0      	b.n	8007c86 <__cvt+0xa6>

08007ca4 <__exponent>:
 8007ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	bfb8      	it	lt
 8007cac:	4249      	neglt	r1, r1
 8007cae:	f803 2b02 	strb.w	r2, [r3], #2
 8007cb2:	bfb4      	ite	lt
 8007cb4:	222d      	movlt	r2, #45	; 0x2d
 8007cb6:	222b      	movge	r2, #43	; 0x2b
 8007cb8:	2909      	cmp	r1, #9
 8007cba:	7042      	strb	r2, [r0, #1]
 8007cbc:	dd2a      	ble.n	8007d14 <__exponent+0x70>
 8007cbe:	f10d 0407 	add.w	r4, sp, #7
 8007cc2:	46a4      	mov	ip, r4
 8007cc4:	270a      	movs	r7, #10
 8007cc6:	46a6      	mov	lr, r4
 8007cc8:	460a      	mov	r2, r1
 8007cca:	fb91 f6f7 	sdiv	r6, r1, r7
 8007cce:	fb07 1516 	mls	r5, r7, r6, r1
 8007cd2:	3530      	adds	r5, #48	; 0x30
 8007cd4:	2a63      	cmp	r2, #99	; 0x63
 8007cd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cde:	4631      	mov	r1, r6
 8007ce0:	dcf1      	bgt.n	8007cc6 <__exponent+0x22>
 8007ce2:	3130      	adds	r1, #48	; 0x30
 8007ce4:	f1ae 0502 	sub.w	r5, lr, #2
 8007ce8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cec:	1c44      	adds	r4, r0, #1
 8007cee:	4629      	mov	r1, r5
 8007cf0:	4561      	cmp	r1, ip
 8007cf2:	d30a      	bcc.n	8007d0a <__exponent+0x66>
 8007cf4:	f10d 0209 	add.w	r2, sp, #9
 8007cf8:	eba2 020e 	sub.w	r2, r2, lr
 8007cfc:	4565      	cmp	r5, ip
 8007cfe:	bf88      	it	hi
 8007d00:	2200      	movhi	r2, #0
 8007d02:	4413      	add	r3, r2
 8007d04:	1a18      	subs	r0, r3, r0
 8007d06:	b003      	add	sp, #12
 8007d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d12:	e7ed      	b.n	8007cf0 <__exponent+0x4c>
 8007d14:	2330      	movs	r3, #48	; 0x30
 8007d16:	3130      	adds	r1, #48	; 0x30
 8007d18:	7083      	strb	r3, [r0, #2]
 8007d1a:	70c1      	strb	r1, [r0, #3]
 8007d1c:	1d03      	adds	r3, r0, #4
 8007d1e:	e7f1      	b.n	8007d04 <__exponent+0x60>

08007d20 <_printf_float>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	ed2d 8b02 	vpush	{d8}
 8007d28:	b08d      	sub	sp, #52	; 0x34
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d30:	4616      	mov	r6, r2
 8007d32:	461f      	mov	r7, r3
 8007d34:	4605      	mov	r5, r0
 8007d36:	f002 fe89 	bl	800aa4c <_localeconv_r>
 8007d3a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d3e:	4650      	mov	r0, sl
 8007d40:	f7f8 fa58 	bl	80001f4 <strlen>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930a      	str	r3, [sp, #40]	; 0x28
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d54:	3307      	adds	r3, #7
 8007d56:	f023 0307 	bic.w	r3, r3, #7
 8007d5a:	f103 0208 	add.w	r2, r3, #8
 8007d5e:	f8c8 2000 	str.w	r2, [r8]
 8007d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d72:	9307      	str	r3, [sp, #28]
 8007d74:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d78:	ee08 0a10 	vmov	s16, r0
 8007d7c:	4b9f      	ldr	r3, [pc, #636]	; (8007ffc <_printf_float+0x2dc>)
 8007d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	f7f8 fee9 	bl	8000b5c <__aeabi_dcmpun>
 8007d8a:	bb88      	cbnz	r0, 8007df0 <_printf_float+0xd0>
 8007d8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d90:	4b9a      	ldr	r3, [pc, #616]	; (8007ffc <_printf_float+0x2dc>)
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295
 8007d96:	f7f8 fec3 	bl	8000b20 <__aeabi_dcmple>
 8007d9a:	bb48      	cbnz	r0, 8007df0 <_printf_float+0xd0>
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4640      	mov	r0, r8
 8007da2:	4649      	mov	r1, r9
 8007da4:	f7f8 feb2 	bl	8000b0c <__aeabi_dcmplt>
 8007da8:	b110      	cbz	r0, 8007db0 <_printf_float+0x90>
 8007daa:	232d      	movs	r3, #45	; 0x2d
 8007dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007db0:	4b93      	ldr	r3, [pc, #588]	; (8008000 <_printf_float+0x2e0>)
 8007db2:	4894      	ldr	r0, [pc, #592]	; (8008004 <_printf_float+0x2e4>)
 8007db4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007db8:	bf94      	ite	ls
 8007dba:	4698      	movls	r8, r3
 8007dbc:	4680      	movhi	r8, r0
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	f023 0204 	bic.w	r2, r3, #4
 8007dc8:	6022      	str	r2, [r4, #0]
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	9700      	str	r7, [sp, #0]
 8007dd0:	4633      	mov	r3, r6
 8007dd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f9d8 	bl	800818c <_printf_common>
 8007ddc:	3001      	adds	r0, #1
 8007dde:	f040 8090 	bne.w	8007f02 <_printf_float+0x1e2>
 8007de2:	f04f 30ff 	mov.w	r0, #4294967295
 8007de6:	b00d      	add	sp, #52	; 0x34
 8007de8:	ecbd 8b02 	vpop	{d8}
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	4642      	mov	r2, r8
 8007df2:	464b      	mov	r3, r9
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 feb0 	bl	8000b5c <__aeabi_dcmpun>
 8007dfc:	b140      	cbz	r0, 8007e10 <_printf_float+0xf0>
 8007dfe:	464b      	mov	r3, r9
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbc      	itt	lt
 8007e04:	232d      	movlt	r3, #45	; 0x2d
 8007e06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e0a:	487f      	ldr	r0, [pc, #508]	; (8008008 <_printf_float+0x2e8>)
 8007e0c:	4b7f      	ldr	r3, [pc, #508]	; (800800c <_printf_float+0x2ec>)
 8007e0e:	e7d1      	b.n	8007db4 <_printf_float+0x94>
 8007e10:	6863      	ldr	r3, [r4, #4]
 8007e12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e16:	9206      	str	r2, [sp, #24]
 8007e18:	1c5a      	adds	r2, r3, #1
 8007e1a:	d13f      	bne.n	8007e9c <_printf_float+0x17c>
 8007e1c:	2306      	movs	r3, #6
 8007e1e:	6063      	str	r3, [r4, #4]
 8007e20:	9b05      	ldr	r3, [sp, #20]
 8007e22:	6861      	ldr	r1, [r4, #4]
 8007e24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8007e2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e32:	ab09      	add	r3, sp, #36	; 0x24
 8007e34:	ec49 8b10 	vmov	d0, r8, r9
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	6022      	str	r2, [r4, #0]
 8007e3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e40:	4628      	mov	r0, r5
 8007e42:	f7ff fecd 	bl	8007be0 <__cvt>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e4a:	2b47      	cmp	r3, #71	; 0x47
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	d108      	bne.n	8007e62 <_printf_float+0x142>
 8007e50:	1cc8      	adds	r0, r1, #3
 8007e52:	db02      	blt.n	8007e5a <_printf_float+0x13a>
 8007e54:	6863      	ldr	r3, [r4, #4]
 8007e56:	4299      	cmp	r1, r3
 8007e58:	dd41      	ble.n	8007ede <_printf_float+0x1be>
 8007e5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e5e:	fa5f fb8b 	uxtb.w	fp, fp
 8007e62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e66:	d820      	bhi.n	8007eaa <_printf_float+0x18a>
 8007e68:	3901      	subs	r1, #1
 8007e6a:	465a      	mov	r2, fp
 8007e6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e70:	9109      	str	r1, [sp, #36]	; 0x24
 8007e72:	f7ff ff17 	bl	8007ca4 <__exponent>
 8007e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e78:	1813      	adds	r3, r2, r0
 8007e7a:	2a01      	cmp	r2, #1
 8007e7c:	4681      	mov	r9, r0
 8007e7e:	6123      	str	r3, [r4, #16]
 8007e80:	dc02      	bgt.n	8007e88 <_printf_float+0x168>
 8007e82:	6822      	ldr	r2, [r4, #0]
 8007e84:	07d2      	lsls	r2, r2, #31
 8007e86:	d501      	bpl.n	8007e8c <_printf_float+0x16c>
 8007e88:	3301      	adds	r3, #1
 8007e8a:	6123      	str	r3, [r4, #16]
 8007e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d09c      	beq.n	8007dce <_printf_float+0xae>
 8007e94:	232d      	movs	r3, #45	; 0x2d
 8007e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9a:	e798      	b.n	8007dce <_printf_float+0xae>
 8007e9c:	9a06      	ldr	r2, [sp, #24]
 8007e9e:	2a47      	cmp	r2, #71	; 0x47
 8007ea0:	d1be      	bne.n	8007e20 <_printf_float+0x100>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1bc      	bne.n	8007e20 <_printf_float+0x100>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e7b9      	b.n	8007e1e <_printf_float+0xfe>
 8007eaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eae:	d118      	bne.n	8007ee2 <_printf_float+0x1c2>
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	dd0b      	ble.n	8007ece <_printf_float+0x1ae>
 8007eb6:	6121      	str	r1, [r4, #16]
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_printf_float+0x1a0>
 8007eba:	6822      	ldr	r2, [r4, #0]
 8007ebc:	07d0      	lsls	r0, r2, #31
 8007ebe:	d502      	bpl.n	8007ec6 <_printf_float+0x1a6>
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	440b      	add	r3, r1
 8007ec4:	6123      	str	r3, [r4, #16]
 8007ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ec8:	f04f 0900 	mov.w	r9, #0
 8007ecc:	e7de      	b.n	8007e8c <_printf_float+0x16c>
 8007ece:	b913      	cbnz	r3, 8007ed6 <_printf_float+0x1b6>
 8007ed0:	6822      	ldr	r2, [r4, #0]
 8007ed2:	07d2      	lsls	r2, r2, #31
 8007ed4:	d501      	bpl.n	8007eda <_printf_float+0x1ba>
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	e7f4      	b.n	8007ec4 <_printf_float+0x1a4>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7f2      	b.n	8007ec4 <_printf_float+0x1a4>
 8007ede:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	db05      	blt.n	8007ef4 <_printf_float+0x1d4>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	6121      	str	r1, [r4, #16]
 8007eec:	07d8      	lsls	r0, r3, #31
 8007eee:	d5ea      	bpl.n	8007ec6 <_printf_float+0x1a6>
 8007ef0:	1c4b      	adds	r3, r1, #1
 8007ef2:	e7e7      	b.n	8007ec4 <_printf_float+0x1a4>
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	bfd4      	ite	le
 8007ef8:	f1c1 0202 	rsble	r2, r1, #2
 8007efc:	2201      	movgt	r2, #1
 8007efe:	4413      	add	r3, r2
 8007f00:	e7e0      	b.n	8007ec4 <_printf_float+0x1a4>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	055a      	lsls	r2, r3, #21
 8007f06:	d407      	bmi.n	8007f18 <_printf_float+0x1f8>
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	4642      	mov	r2, r8
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	d12c      	bne.n	8007f70 <_printf_float+0x250>
 8007f16:	e764      	b.n	8007de2 <_printf_float+0xc2>
 8007f18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f1c:	f240 80e0 	bls.w	80080e0 <_printf_float+0x3c0>
 8007f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f24:	2200      	movs	r2, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	f7f8 fde6 	bl	8000af8 <__aeabi_dcmpeq>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d034      	beq.n	8007f9a <_printf_float+0x27a>
 8007f30:	4a37      	ldr	r2, [pc, #220]	; (8008010 <_printf_float+0x2f0>)
 8007f32:	2301      	movs	r3, #1
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af51 	beq.w	8007de2 <_printf_float+0xc2>
 8007f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f44:	429a      	cmp	r2, r3
 8007f46:	db02      	blt.n	8007f4e <_printf_float+0x22e>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07d8      	lsls	r0, r3, #31
 8007f4c:	d510      	bpl.n	8007f70 <_printf_float+0x250>
 8007f4e:	ee18 3a10 	vmov	r3, s16
 8007f52:	4652      	mov	r2, sl
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f af41 	beq.w	8007de2 <_printf_float+0xc2>
 8007f60:	f04f 0800 	mov.w	r8, #0
 8007f64:	f104 091a 	add.w	r9, r4, #26
 8007f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	4543      	cmp	r3, r8
 8007f6e:	dc09      	bgt.n	8007f84 <_printf_float+0x264>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	079b      	lsls	r3, r3, #30
 8007f74:	f100 8105 	bmi.w	8008182 <_printf_float+0x462>
 8007f78:	68e0      	ldr	r0, [r4, #12]
 8007f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f7c:	4298      	cmp	r0, r3
 8007f7e:	bfb8      	it	lt
 8007f80:	4618      	movlt	r0, r3
 8007f82:	e730      	b.n	8007de6 <_printf_float+0xc6>
 8007f84:	2301      	movs	r3, #1
 8007f86:	464a      	mov	r2, r9
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	47b8      	blx	r7
 8007f8e:	3001      	adds	r0, #1
 8007f90:	f43f af27 	beq.w	8007de2 <_printf_float+0xc2>
 8007f94:	f108 0801 	add.w	r8, r8, #1
 8007f98:	e7e6      	b.n	8007f68 <_printf_float+0x248>
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc39      	bgt.n	8008014 <_printf_float+0x2f4>
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <_printf_float+0x2f0>)
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	47b8      	blx	r7
 8007faa:	3001      	adds	r0, #1
 8007fac:	f43f af19 	beq.w	8007de2 <_printf_float+0xc2>
 8007fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	d102      	bne.n	8007fbe <_printf_float+0x29e>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	d5d8      	bpl.n	8007f70 <_printf_float+0x250>
 8007fbe:	ee18 3a10 	vmov	r3, s16
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	4631      	mov	r1, r6
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	47b8      	blx	r7
 8007fca:	3001      	adds	r0, #1
 8007fcc:	f43f af09 	beq.w	8007de2 <_printf_float+0xc2>
 8007fd0:	f04f 0900 	mov.w	r9, #0
 8007fd4:	f104 0a1a 	add.w	sl, r4, #26
 8007fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fda:	425b      	negs	r3, r3
 8007fdc:	454b      	cmp	r3, r9
 8007fde:	dc01      	bgt.n	8007fe4 <_printf_float+0x2c4>
 8007fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe2:	e792      	b.n	8007f0a <_printf_float+0x1ea>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f aef7 	beq.w	8007de2 <_printf_float+0xc2>
 8007ff4:	f109 0901 	add.w	r9, r9, #1
 8007ff8:	e7ee      	b.n	8007fd8 <_printf_float+0x2b8>
 8007ffa:	bf00      	nop
 8007ffc:	7fefffff 	.word	0x7fefffff
 8008000:	0800e910 	.word	0x0800e910
 8008004:	0800e914 	.word	0x0800e914
 8008008:	0800e91c 	.word	0x0800e91c
 800800c:	0800e918 	.word	0x0800e918
 8008010:	0800e920 	.word	0x0800e920
 8008014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008018:	429a      	cmp	r2, r3
 800801a:	bfa8      	it	ge
 800801c:	461a      	movge	r2, r3
 800801e:	2a00      	cmp	r2, #0
 8008020:	4691      	mov	r9, r2
 8008022:	dc37      	bgt.n	8008094 <_printf_float+0x374>
 8008024:	f04f 0b00 	mov.w	fp, #0
 8008028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800802c:	f104 021a 	add.w	r2, r4, #26
 8008030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	eba3 0309 	sub.w	r3, r3, r9
 8008038:	455b      	cmp	r3, fp
 800803a:	dc33      	bgt.n	80080a4 <_printf_float+0x384>
 800803c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008040:	429a      	cmp	r2, r3
 8008042:	db3b      	blt.n	80080bc <_printf_float+0x39c>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	07da      	lsls	r2, r3, #31
 8008048:	d438      	bmi.n	80080bc <_printf_float+0x39c>
 800804a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800804c:	9a05      	ldr	r2, [sp, #20]
 800804e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008050:	1a9a      	subs	r2, r3, r2
 8008052:	eba3 0901 	sub.w	r9, r3, r1
 8008056:	4591      	cmp	r9, r2
 8008058:	bfa8      	it	ge
 800805a:	4691      	movge	r9, r2
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	dc35      	bgt.n	80080ce <_printf_float+0x3ae>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800806a:	f104 0a1a 	add.w	sl, r4, #26
 800806e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	eba3 0309 	sub.w	r3, r3, r9
 8008078:	4543      	cmp	r3, r8
 800807a:	f77f af79 	ble.w	8007f70 <_printf_float+0x250>
 800807e:	2301      	movs	r3, #1
 8008080:	4652      	mov	r2, sl
 8008082:	4631      	mov	r1, r6
 8008084:	4628      	mov	r0, r5
 8008086:	47b8      	blx	r7
 8008088:	3001      	adds	r0, #1
 800808a:	f43f aeaa 	beq.w	8007de2 <_printf_float+0xc2>
 800808e:	f108 0801 	add.w	r8, r8, #1
 8008092:	e7ec      	b.n	800806e <_printf_float+0x34e>
 8008094:	4613      	mov	r3, r2
 8008096:	4631      	mov	r1, r6
 8008098:	4642      	mov	r2, r8
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d1c0      	bne.n	8008024 <_printf_float+0x304>
 80080a2:	e69e      	b.n	8007de2 <_printf_float+0xc2>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	9205      	str	r2, [sp, #20]
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f ae97 	beq.w	8007de2 <_printf_float+0xc2>
 80080b4:	9a05      	ldr	r2, [sp, #20]
 80080b6:	f10b 0b01 	add.w	fp, fp, #1
 80080ba:	e7b9      	b.n	8008030 <_printf_float+0x310>
 80080bc:	ee18 3a10 	vmov	r3, s16
 80080c0:	4652      	mov	r2, sl
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	d1be      	bne.n	800804a <_printf_float+0x32a>
 80080cc:	e689      	b.n	8007de2 <_printf_float+0xc2>
 80080ce:	9a05      	ldr	r2, [sp, #20]
 80080d0:	464b      	mov	r3, r9
 80080d2:	4442      	add	r2, r8
 80080d4:	4631      	mov	r1, r6
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	d1c1      	bne.n	8008062 <_printf_float+0x342>
 80080de:	e680      	b.n	8007de2 <_printf_float+0xc2>
 80080e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e2:	2a01      	cmp	r2, #1
 80080e4:	dc01      	bgt.n	80080ea <_printf_float+0x3ca>
 80080e6:	07db      	lsls	r3, r3, #31
 80080e8:	d538      	bpl.n	800815c <_printf_float+0x43c>
 80080ea:	2301      	movs	r3, #1
 80080ec:	4642      	mov	r2, r8
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae74 	beq.w	8007de2 <_printf_float+0xc2>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f ae6b 	beq.w	8007de2 <_printf_float+0xc2>
 800810c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	f7f8 fcf0 	bl	8000af8 <__aeabi_dcmpeq>
 8008118:	b9d8      	cbnz	r0, 8008152 <_printf_float+0x432>
 800811a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811c:	f108 0201 	add.w	r2, r8, #1
 8008120:	3b01      	subs	r3, #1
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	d10e      	bne.n	800814a <_printf_float+0x42a>
 800812c:	e659      	b.n	8007de2 <_printf_float+0xc2>
 800812e:	2301      	movs	r3, #1
 8008130:	4652      	mov	r2, sl
 8008132:	4631      	mov	r1, r6
 8008134:	4628      	mov	r0, r5
 8008136:	47b8      	blx	r7
 8008138:	3001      	adds	r0, #1
 800813a:	f43f ae52 	beq.w	8007de2 <_printf_float+0xc2>
 800813e:	f108 0801 	add.w	r8, r8, #1
 8008142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008144:	3b01      	subs	r3, #1
 8008146:	4543      	cmp	r3, r8
 8008148:	dcf1      	bgt.n	800812e <_printf_float+0x40e>
 800814a:	464b      	mov	r3, r9
 800814c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008150:	e6dc      	b.n	8007f0c <_printf_float+0x1ec>
 8008152:	f04f 0800 	mov.w	r8, #0
 8008156:	f104 0a1a 	add.w	sl, r4, #26
 800815a:	e7f2      	b.n	8008142 <_printf_float+0x422>
 800815c:	2301      	movs	r3, #1
 800815e:	4642      	mov	r2, r8
 8008160:	e7df      	b.n	8008122 <_printf_float+0x402>
 8008162:	2301      	movs	r3, #1
 8008164:	464a      	mov	r2, r9
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae38 	beq.w	8007de2 <_printf_float+0xc2>
 8008172:	f108 0801 	add.w	r8, r8, #1
 8008176:	68e3      	ldr	r3, [r4, #12]
 8008178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	4543      	cmp	r3, r8
 800817e:	dcf0      	bgt.n	8008162 <_printf_float+0x442>
 8008180:	e6fa      	b.n	8007f78 <_printf_float+0x258>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	f104 0919 	add.w	r9, r4, #25
 800818a:	e7f4      	b.n	8008176 <_printf_float+0x456>

0800818c <_printf_common>:
 800818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008190:	4616      	mov	r6, r2
 8008192:	4699      	mov	r9, r3
 8008194:	688a      	ldr	r2, [r1, #8]
 8008196:	690b      	ldr	r3, [r1, #16]
 8008198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800819c:	4293      	cmp	r3, r2
 800819e:	bfb8      	it	lt
 80081a0:	4613      	movlt	r3, r2
 80081a2:	6033      	str	r3, [r6, #0]
 80081a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081a8:	4607      	mov	r7, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b10a      	cbz	r2, 80081b2 <_printf_common+0x26>
 80081ae:	3301      	adds	r3, #1
 80081b0:	6033      	str	r3, [r6, #0]
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	0699      	lsls	r1, r3, #26
 80081b6:	bf42      	ittt	mi
 80081b8:	6833      	ldrmi	r3, [r6, #0]
 80081ba:	3302      	addmi	r3, #2
 80081bc:	6033      	strmi	r3, [r6, #0]
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	f015 0506 	ands.w	r5, r5, #6
 80081c4:	d106      	bne.n	80081d4 <_printf_common+0x48>
 80081c6:	f104 0a19 	add.w	sl, r4, #25
 80081ca:	68e3      	ldr	r3, [r4, #12]
 80081cc:	6832      	ldr	r2, [r6, #0]
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	dc26      	bgt.n	8008222 <_printf_common+0x96>
 80081d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081d8:	1e13      	subs	r3, r2, #0
 80081da:	6822      	ldr	r2, [r4, #0]
 80081dc:	bf18      	it	ne
 80081de:	2301      	movne	r3, #1
 80081e0:	0692      	lsls	r2, r2, #26
 80081e2:	d42b      	bmi.n	800823c <_printf_common+0xb0>
 80081e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081e8:	4649      	mov	r1, r9
 80081ea:	4638      	mov	r0, r7
 80081ec:	47c0      	blx	r8
 80081ee:	3001      	adds	r0, #1
 80081f0:	d01e      	beq.n	8008230 <_printf_common+0xa4>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	68e5      	ldr	r5, [r4, #12]
 80081f6:	6832      	ldr	r2, [r6, #0]
 80081f8:	f003 0306 	and.w	r3, r3, #6
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	bf08      	it	eq
 8008200:	1aad      	subeq	r5, r5, r2
 8008202:	68a3      	ldr	r3, [r4, #8]
 8008204:	6922      	ldr	r2, [r4, #16]
 8008206:	bf0c      	ite	eq
 8008208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800820c:	2500      	movne	r5, #0
 800820e:	4293      	cmp	r3, r2
 8008210:	bfc4      	itt	gt
 8008212:	1a9b      	subgt	r3, r3, r2
 8008214:	18ed      	addgt	r5, r5, r3
 8008216:	2600      	movs	r6, #0
 8008218:	341a      	adds	r4, #26
 800821a:	42b5      	cmp	r5, r6
 800821c:	d11a      	bne.n	8008254 <_printf_common+0xc8>
 800821e:	2000      	movs	r0, #0
 8008220:	e008      	b.n	8008234 <_printf_common+0xa8>
 8008222:	2301      	movs	r3, #1
 8008224:	4652      	mov	r2, sl
 8008226:	4649      	mov	r1, r9
 8008228:	4638      	mov	r0, r7
 800822a:	47c0      	blx	r8
 800822c:	3001      	adds	r0, #1
 800822e:	d103      	bne.n	8008238 <_printf_common+0xac>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008238:	3501      	adds	r5, #1
 800823a:	e7c6      	b.n	80081ca <_printf_common+0x3e>
 800823c:	18e1      	adds	r1, r4, r3
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	2030      	movs	r0, #48	; 0x30
 8008242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008246:	4422      	add	r2, r4
 8008248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800824c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008250:	3302      	adds	r3, #2
 8008252:	e7c7      	b.n	80081e4 <_printf_common+0x58>
 8008254:	2301      	movs	r3, #1
 8008256:	4622      	mov	r2, r4
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d0e6      	beq.n	8008230 <_printf_common+0xa4>
 8008262:	3601      	adds	r6, #1
 8008264:	e7d9      	b.n	800821a <_printf_common+0x8e>
	...

08008268 <_printf_i>:
 8008268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	7e0f      	ldrb	r7, [r1, #24]
 800826e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008270:	2f78      	cmp	r7, #120	; 0x78
 8008272:	4691      	mov	r9, r2
 8008274:	4680      	mov	r8, r0
 8008276:	460c      	mov	r4, r1
 8008278:	469a      	mov	sl, r3
 800827a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800827e:	d807      	bhi.n	8008290 <_printf_i+0x28>
 8008280:	2f62      	cmp	r7, #98	; 0x62
 8008282:	d80a      	bhi.n	800829a <_printf_i+0x32>
 8008284:	2f00      	cmp	r7, #0
 8008286:	f000 80d8 	beq.w	800843a <_printf_i+0x1d2>
 800828a:	2f58      	cmp	r7, #88	; 0x58
 800828c:	f000 80a3 	beq.w	80083d6 <_printf_i+0x16e>
 8008290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008298:	e03a      	b.n	8008310 <_printf_i+0xa8>
 800829a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800829e:	2b15      	cmp	r3, #21
 80082a0:	d8f6      	bhi.n	8008290 <_printf_i+0x28>
 80082a2:	a101      	add	r1, pc, #4	; (adr r1, 80082a8 <_printf_i+0x40>)
 80082a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082a8:	08008301 	.word	0x08008301
 80082ac:	08008315 	.word	0x08008315
 80082b0:	08008291 	.word	0x08008291
 80082b4:	08008291 	.word	0x08008291
 80082b8:	08008291 	.word	0x08008291
 80082bc:	08008291 	.word	0x08008291
 80082c0:	08008315 	.word	0x08008315
 80082c4:	08008291 	.word	0x08008291
 80082c8:	08008291 	.word	0x08008291
 80082cc:	08008291 	.word	0x08008291
 80082d0:	08008291 	.word	0x08008291
 80082d4:	08008421 	.word	0x08008421
 80082d8:	08008345 	.word	0x08008345
 80082dc:	08008403 	.word	0x08008403
 80082e0:	08008291 	.word	0x08008291
 80082e4:	08008291 	.word	0x08008291
 80082e8:	08008443 	.word	0x08008443
 80082ec:	08008291 	.word	0x08008291
 80082f0:	08008345 	.word	0x08008345
 80082f4:	08008291 	.word	0x08008291
 80082f8:	08008291 	.word	0x08008291
 80082fc:	0800840b 	.word	0x0800840b
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	1d1a      	adds	r2, r3, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	602a      	str	r2, [r5, #0]
 8008308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800830c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008310:	2301      	movs	r3, #1
 8008312:	e0a3      	b.n	800845c <_printf_i+0x1f4>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	6829      	ldr	r1, [r5, #0]
 8008318:	0606      	lsls	r6, r0, #24
 800831a:	f101 0304 	add.w	r3, r1, #4
 800831e:	d50a      	bpl.n	8008336 <_printf_i+0xce>
 8008320:	680e      	ldr	r6, [r1, #0]
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	2e00      	cmp	r6, #0
 8008326:	da03      	bge.n	8008330 <_printf_i+0xc8>
 8008328:	232d      	movs	r3, #45	; 0x2d
 800832a:	4276      	negs	r6, r6
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008330:	485e      	ldr	r0, [pc, #376]	; (80084ac <_printf_i+0x244>)
 8008332:	230a      	movs	r3, #10
 8008334:	e019      	b.n	800836a <_printf_i+0x102>
 8008336:	680e      	ldr	r6, [r1, #0]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800833e:	bf18      	it	ne
 8008340:	b236      	sxthne	r6, r6
 8008342:	e7ef      	b.n	8008324 <_printf_i+0xbc>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	6820      	ldr	r0, [r4, #0]
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	6029      	str	r1, [r5, #0]
 800834c:	0601      	lsls	r1, r0, #24
 800834e:	d501      	bpl.n	8008354 <_printf_i+0xec>
 8008350:	681e      	ldr	r6, [r3, #0]
 8008352:	e002      	b.n	800835a <_printf_i+0xf2>
 8008354:	0646      	lsls	r6, r0, #25
 8008356:	d5fb      	bpl.n	8008350 <_printf_i+0xe8>
 8008358:	881e      	ldrh	r6, [r3, #0]
 800835a:	4854      	ldr	r0, [pc, #336]	; (80084ac <_printf_i+0x244>)
 800835c:	2f6f      	cmp	r7, #111	; 0x6f
 800835e:	bf0c      	ite	eq
 8008360:	2308      	moveq	r3, #8
 8008362:	230a      	movne	r3, #10
 8008364:	2100      	movs	r1, #0
 8008366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800836a:	6865      	ldr	r5, [r4, #4]
 800836c:	60a5      	str	r5, [r4, #8]
 800836e:	2d00      	cmp	r5, #0
 8008370:	bfa2      	ittt	ge
 8008372:	6821      	ldrge	r1, [r4, #0]
 8008374:	f021 0104 	bicge.w	r1, r1, #4
 8008378:	6021      	strge	r1, [r4, #0]
 800837a:	b90e      	cbnz	r6, 8008380 <_printf_i+0x118>
 800837c:	2d00      	cmp	r5, #0
 800837e:	d04d      	beq.n	800841c <_printf_i+0x1b4>
 8008380:	4615      	mov	r5, r2
 8008382:	fbb6 f1f3 	udiv	r1, r6, r3
 8008386:	fb03 6711 	mls	r7, r3, r1, r6
 800838a:	5dc7      	ldrb	r7, [r0, r7]
 800838c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008390:	4637      	mov	r7, r6
 8008392:	42bb      	cmp	r3, r7
 8008394:	460e      	mov	r6, r1
 8008396:	d9f4      	bls.n	8008382 <_printf_i+0x11a>
 8008398:	2b08      	cmp	r3, #8
 800839a:	d10b      	bne.n	80083b4 <_printf_i+0x14c>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	07de      	lsls	r6, r3, #31
 80083a0:	d508      	bpl.n	80083b4 <_printf_i+0x14c>
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	4299      	cmp	r1, r3
 80083a8:	bfde      	ittt	le
 80083aa:	2330      	movle	r3, #48	; 0x30
 80083ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083b4:	1b52      	subs	r2, r2, r5
 80083b6:	6122      	str	r2, [r4, #16]
 80083b8:	f8cd a000 	str.w	sl, [sp]
 80083bc:	464b      	mov	r3, r9
 80083be:	aa03      	add	r2, sp, #12
 80083c0:	4621      	mov	r1, r4
 80083c2:	4640      	mov	r0, r8
 80083c4:	f7ff fee2 	bl	800818c <_printf_common>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d14c      	bne.n	8008466 <_printf_i+0x1fe>
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	b004      	add	sp, #16
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	4835      	ldr	r0, [pc, #212]	; (80084ac <_printf_i+0x244>)
 80083d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80083dc:	6829      	ldr	r1, [r5, #0]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80083e4:	6029      	str	r1, [r5, #0]
 80083e6:	061d      	lsls	r5, r3, #24
 80083e8:	d514      	bpl.n	8008414 <_printf_i+0x1ac>
 80083ea:	07df      	lsls	r7, r3, #31
 80083ec:	bf44      	itt	mi
 80083ee:	f043 0320 	orrmi.w	r3, r3, #32
 80083f2:	6023      	strmi	r3, [r4, #0]
 80083f4:	b91e      	cbnz	r6, 80083fe <_printf_i+0x196>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	f023 0320 	bic.w	r3, r3, #32
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	2310      	movs	r3, #16
 8008400:	e7b0      	b.n	8008364 <_printf_i+0xfc>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	f043 0320 	orr.w	r3, r3, #32
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	2378      	movs	r3, #120	; 0x78
 800840c:	4828      	ldr	r0, [pc, #160]	; (80084b0 <_printf_i+0x248>)
 800840e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008412:	e7e3      	b.n	80083dc <_printf_i+0x174>
 8008414:	0659      	lsls	r1, r3, #25
 8008416:	bf48      	it	mi
 8008418:	b2b6      	uxthmi	r6, r6
 800841a:	e7e6      	b.n	80083ea <_printf_i+0x182>
 800841c:	4615      	mov	r5, r2
 800841e:	e7bb      	b.n	8008398 <_printf_i+0x130>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	6826      	ldr	r6, [r4, #0]
 8008424:	6961      	ldr	r1, [r4, #20]
 8008426:	1d18      	adds	r0, r3, #4
 8008428:	6028      	str	r0, [r5, #0]
 800842a:	0635      	lsls	r5, r6, #24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	d501      	bpl.n	8008434 <_printf_i+0x1cc>
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	e002      	b.n	800843a <_printf_i+0x1d2>
 8008434:	0670      	lsls	r0, r6, #25
 8008436:	d5fb      	bpl.n	8008430 <_printf_i+0x1c8>
 8008438:	8019      	strh	r1, [r3, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	4615      	mov	r5, r2
 8008440:	e7ba      	b.n	80083b8 <_printf_i+0x150>
 8008442:	682b      	ldr	r3, [r5, #0]
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	681d      	ldr	r5, [r3, #0]
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	2100      	movs	r1, #0
 800844e:	4628      	mov	r0, r5
 8008450:	f7f7 fede 	bl	8000210 <memchr>
 8008454:	b108      	cbz	r0, 800845a <_printf_i+0x1f2>
 8008456:	1b40      	subs	r0, r0, r5
 8008458:	6060      	str	r0, [r4, #4]
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	2300      	movs	r3, #0
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008464:	e7a8      	b.n	80083b8 <_printf_i+0x150>
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	462a      	mov	r2, r5
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d0ab      	beq.n	80083cc <_printf_i+0x164>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	079b      	lsls	r3, r3, #30
 8008478:	d413      	bmi.n	80084a2 <_printf_i+0x23a>
 800847a:	68e0      	ldr	r0, [r4, #12]
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	4298      	cmp	r0, r3
 8008480:	bfb8      	it	lt
 8008482:	4618      	movlt	r0, r3
 8008484:	e7a4      	b.n	80083d0 <_printf_i+0x168>
 8008486:	2301      	movs	r3, #1
 8008488:	4632      	mov	r2, r6
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d09b      	beq.n	80083cc <_printf_i+0x164>
 8008494:	3501      	adds	r5, #1
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	9903      	ldr	r1, [sp, #12]
 800849a:	1a5b      	subs	r3, r3, r1
 800849c:	42ab      	cmp	r3, r5
 800849e:	dcf2      	bgt.n	8008486 <_printf_i+0x21e>
 80084a0:	e7eb      	b.n	800847a <_printf_i+0x212>
 80084a2:	2500      	movs	r5, #0
 80084a4:	f104 0619 	add.w	r6, r4, #25
 80084a8:	e7f5      	b.n	8008496 <_printf_i+0x22e>
 80084aa:	bf00      	nop
 80084ac:	0800e922 	.word	0x0800e922
 80084b0:	0800e933 	.word	0x0800e933

080084b4 <_scanf_float>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	b087      	sub	sp, #28
 80084ba:	4617      	mov	r7, r2
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	688b      	ldr	r3, [r1, #8]
 80084c0:	1e5a      	subs	r2, r3, #1
 80084c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084c6:	bf83      	ittte	hi
 80084c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084cc:	195b      	addhi	r3, r3, r5
 80084ce:	9302      	strhi	r3, [sp, #8]
 80084d0:	2300      	movls	r3, #0
 80084d2:	bf86      	itte	hi
 80084d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084d8:	608b      	strhi	r3, [r1, #8]
 80084da:	9302      	strls	r3, [sp, #8]
 80084dc:	680b      	ldr	r3, [r1, #0]
 80084de:	468b      	mov	fp, r1
 80084e0:	2500      	movs	r5, #0
 80084e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80084ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084ee:	4680      	mov	r8, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	465e      	mov	r6, fp
 80084f4:	46aa      	mov	sl, r5
 80084f6:	46a9      	mov	r9, r5
 80084f8:	9501      	str	r5, [sp, #4]
 80084fa:	68a2      	ldr	r2, [r4, #8]
 80084fc:	b152      	cbz	r2, 8008514 <_scanf_float+0x60>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b4e      	cmp	r3, #78	; 0x4e
 8008504:	d864      	bhi.n	80085d0 <_scanf_float+0x11c>
 8008506:	2b40      	cmp	r3, #64	; 0x40
 8008508:	d83c      	bhi.n	8008584 <_scanf_float+0xd0>
 800850a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800850e:	b2c8      	uxtb	r0, r1
 8008510:	280e      	cmp	r0, #14
 8008512:	d93a      	bls.n	800858a <_scanf_float+0xd6>
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d003      	beq.n	8008522 <_scanf_float+0x6e>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008526:	f1ba 0f01 	cmp.w	sl, #1
 800852a:	f200 8113 	bhi.w	8008754 <_scanf_float+0x2a0>
 800852e:	455e      	cmp	r6, fp
 8008530:	f200 8105 	bhi.w	800873e <_scanf_float+0x28a>
 8008534:	2501      	movs	r5, #1
 8008536:	4628      	mov	r0, r5
 8008538:	b007      	add	sp, #28
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008542:	2a0d      	cmp	r2, #13
 8008544:	d8e6      	bhi.n	8008514 <_scanf_float+0x60>
 8008546:	a101      	add	r1, pc, #4	; (adr r1, 800854c <_scanf_float+0x98>)
 8008548:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800854c:	0800868b 	.word	0x0800868b
 8008550:	08008515 	.word	0x08008515
 8008554:	08008515 	.word	0x08008515
 8008558:	08008515 	.word	0x08008515
 800855c:	080086eb 	.word	0x080086eb
 8008560:	080086c3 	.word	0x080086c3
 8008564:	08008515 	.word	0x08008515
 8008568:	08008515 	.word	0x08008515
 800856c:	08008699 	.word	0x08008699
 8008570:	08008515 	.word	0x08008515
 8008574:	08008515 	.word	0x08008515
 8008578:	08008515 	.word	0x08008515
 800857c:	08008515 	.word	0x08008515
 8008580:	08008651 	.word	0x08008651
 8008584:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008588:	e7db      	b.n	8008542 <_scanf_float+0x8e>
 800858a:	290e      	cmp	r1, #14
 800858c:	d8c2      	bhi.n	8008514 <_scanf_float+0x60>
 800858e:	a001      	add	r0, pc, #4	; (adr r0, 8008594 <_scanf_float+0xe0>)
 8008590:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008594:	08008643 	.word	0x08008643
 8008598:	08008515 	.word	0x08008515
 800859c:	08008643 	.word	0x08008643
 80085a0:	080086d7 	.word	0x080086d7
 80085a4:	08008515 	.word	0x08008515
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	0800862d 	.word	0x0800862d
 80085b0:	0800862d 	.word	0x0800862d
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	0800862d 	.word	0x0800862d
 80085bc:	0800862d 	.word	0x0800862d
 80085c0:	0800862d 	.word	0x0800862d
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	0800862d 	.word	0x0800862d
 80085cc:	0800862d 	.word	0x0800862d
 80085d0:	2b6e      	cmp	r3, #110	; 0x6e
 80085d2:	d809      	bhi.n	80085e8 <_scanf_float+0x134>
 80085d4:	2b60      	cmp	r3, #96	; 0x60
 80085d6:	d8b2      	bhi.n	800853e <_scanf_float+0x8a>
 80085d8:	2b54      	cmp	r3, #84	; 0x54
 80085da:	d077      	beq.n	80086cc <_scanf_float+0x218>
 80085dc:	2b59      	cmp	r3, #89	; 0x59
 80085de:	d199      	bne.n	8008514 <_scanf_float+0x60>
 80085e0:	2d07      	cmp	r5, #7
 80085e2:	d197      	bne.n	8008514 <_scanf_float+0x60>
 80085e4:	2508      	movs	r5, #8
 80085e6:	e029      	b.n	800863c <_scanf_float+0x188>
 80085e8:	2b74      	cmp	r3, #116	; 0x74
 80085ea:	d06f      	beq.n	80086cc <_scanf_float+0x218>
 80085ec:	2b79      	cmp	r3, #121	; 0x79
 80085ee:	e7f6      	b.n	80085de <_scanf_float+0x12a>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	05c8      	lsls	r0, r1, #23
 80085f4:	d51a      	bpl.n	800862c <_scanf_float+0x178>
 80085f6:	9b02      	ldr	r3, [sp, #8]
 80085f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085fc:	6021      	str	r1, [r4, #0]
 80085fe:	f109 0901 	add.w	r9, r9, #1
 8008602:	b11b      	cbz	r3, 800860c <_scanf_float+0x158>
 8008604:	3b01      	subs	r3, #1
 8008606:	3201      	adds	r2, #1
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	60a2      	str	r2, [r4, #8]
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	3b01      	subs	r3, #1
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	3301      	adds	r3, #1
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3b01      	subs	r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	607b      	str	r3, [r7, #4]
 8008620:	f340 8084 	ble.w	800872c <_scanf_float+0x278>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	e766      	b.n	80084fa <_scanf_float+0x46>
 800862c:	eb1a 0f05 	cmn.w	sl, r5
 8008630:	f47f af70 	bne.w	8008514 <_scanf_float+0x60>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800863a:	6022      	str	r2, [r4, #0]
 800863c:	f806 3b01 	strb.w	r3, [r6], #1
 8008640:	e7e4      	b.n	800860c <_scanf_float+0x158>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	0610      	lsls	r0, r2, #24
 8008646:	f57f af65 	bpl.w	8008514 <_scanf_float+0x60>
 800864a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800864e:	e7f4      	b.n	800863a <_scanf_float+0x186>
 8008650:	f1ba 0f00 	cmp.w	sl, #0
 8008654:	d10e      	bne.n	8008674 <_scanf_float+0x1c0>
 8008656:	f1b9 0f00 	cmp.w	r9, #0
 800865a:	d10e      	bne.n	800867a <_scanf_float+0x1c6>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008662:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008666:	d108      	bne.n	800867a <_scanf_float+0x1c6>
 8008668:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	f04f 0a01 	mov.w	sl, #1
 8008672:	e7e3      	b.n	800863c <_scanf_float+0x188>
 8008674:	f1ba 0f02 	cmp.w	sl, #2
 8008678:	d055      	beq.n	8008726 <_scanf_float+0x272>
 800867a:	2d01      	cmp	r5, #1
 800867c:	d002      	beq.n	8008684 <_scanf_float+0x1d0>
 800867e:	2d04      	cmp	r5, #4
 8008680:	f47f af48 	bne.w	8008514 <_scanf_float+0x60>
 8008684:	3501      	adds	r5, #1
 8008686:	b2ed      	uxtb	r5, r5
 8008688:	e7d8      	b.n	800863c <_scanf_float+0x188>
 800868a:	f1ba 0f01 	cmp.w	sl, #1
 800868e:	f47f af41 	bne.w	8008514 <_scanf_float+0x60>
 8008692:	f04f 0a02 	mov.w	sl, #2
 8008696:	e7d1      	b.n	800863c <_scanf_float+0x188>
 8008698:	b97d      	cbnz	r5, 80086ba <_scanf_float+0x206>
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	f47f af3c 	bne.w	800851a <_scanf_float+0x66>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086ac:	f47f af39 	bne.w	8008522 <_scanf_float+0x6e>
 80086b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086b4:	6022      	str	r2, [r4, #0]
 80086b6:	2501      	movs	r5, #1
 80086b8:	e7c0      	b.n	800863c <_scanf_float+0x188>
 80086ba:	2d03      	cmp	r5, #3
 80086bc:	d0e2      	beq.n	8008684 <_scanf_float+0x1d0>
 80086be:	2d05      	cmp	r5, #5
 80086c0:	e7de      	b.n	8008680 <_scanf_float+0x1cc>
 80086c2:	2d02      	cmp	r5, #2
 80086c4:	f47f af26 	bne.w	8008514 <_scanf_float+0x60>
 80086c8:	2503      	movs	r5, #3
 80086ca:	e7b7      	b.n	800863c <_scanf_float+0x188>
 80086cc:	2d06      	cmp	r5, #6
 80086ce:	f47f af21 	bne.w	8008514 <_scanf_float+0x60>
 80086d2:	2507      	movs	r5, #7
 80086d4:	e7b2      	b.n	800863c <_scanf_float+0x188>
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	0591      	lsls	r1, r2, #22
 80086da:	f57f af1b 	bpl.w	8008514 <_scanf_float+0x60>
 80086de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086e2:	6022      	str	r2, [r4, #0]
 80086e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80086e8:	e7a8      	b.n	800863c <_scanf_float+0x188>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086f4:	d006      	beq.n	8008704 <_scanf_float+0x250>
 80086f6:	0550      	lsls	r0, r2, #21
 80086f8:	f57f af0c 	bpl.w	8008514 <_scanf_float+0x60>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	f43f af0f 	beq.w	8008522 <_scanf_float+0x6e>
 8008704:	0591      	lsls	r1, r2, #22
 8008706:	bf58      	it	pl
 8008708:	9901      	ldrpl	r1, [sp, #4]
 800870a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800870e:	bf58      	it	pl
 8008710:	eba9 0101 	subpl.w	r1, r9, r1
 8008714:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008718:	bf58      	it	pl
 800871a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	f04f 0900 	mov.w	r9, #0
 8008724:	e78a      	b.n	800863c <_scanf_float+0x188>
 8008726:	f04f 0a03 	mov.w	sl, #3
 800872a:	e787      	b.n	800863c <_scanf_float+0x188>
 800872c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008730:	4639      	mov	r1, r7
 8008732:	4640      	mov	r0, r8
 8008734:	4798      	blx	r3
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f aedf 	beq.w	80084fa <_scanf_float+0x46>
 800873c:	e6ea      	b.n	8008514 <_scanf_float+0x60>
 800873e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008746:	463a      	mov	r2, r7
 8008748:	4640      	mov	r0, r8
 800874a:	4798      	blx	r3
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	3b01      	subs	r3, #1
 8008750:	6123      	str	r3, [r4, #16]
 8008752:	e6ec      	b.n	800852e <_scanf_float+0x7a>
 8008754:	1e6b      	subs	r3, r5, #1
 8008756:	2b06      	cmp	r3, #6
 8008758:	d825      	bhi.n	80087a6 <_scanf_float+0x2f2>
 800875a:	2d02      	cmp	r5, #2
 800875c:	d836      	bhi.n	80087cc <_scanf_float+0x318>
 800875e:	455e      	cmp	r6, fp
 8008760:	f67f aee8 	bls.w	8008534 <_scanf_float+0x80>
 8008764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008768:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800876c:	463a      	mov	r2, r7
 800876e:	4640      	mov	r0, r8
 8008770:	4798      	blx	r3
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	3b01      	subs	r3, #1
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	e7f1      	b.n	800875e <_scanf_float+0x2aa>
 800877a:	9802      	ldr	r0, [sp, #8]
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008780:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008784:	9002      	str	r0, [sp, #8]
 8008786:	463a      	mov	r2, r7
 8008788:	4640      	mov	r0, r8
 800878a:	4798      	blx	r3
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	3b01      	subs	r3, #1
 8008790:	6123      	str	r3, [r4, #16]
 8008792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008796:	fa5f fa8a 	uxtb.w	sl, sl
 800879a:	f1ba 0f02 	cmp.w	sl, #2
 800879e:	d1ec      	bne.n	800877a <_scanf_float+0x2c6>
 80087a0:	3d03      	subs	r5, #3
 80087a2:	b2ed      	uxtb	r5, r5
 80087a4:	1b76      	subs	r6, r6, r5
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	05da      	lsls	r2, r3, #23
 80087aa:	d52f      	bpl.n	800880c <_scanf_float+0x358>
 80087ac:	055b      	lsls	r3, r3, #21
 80087ae:	d510      	bpl.n	80087d2 <_scanf_float+0x31e>
 80087b0:	455e      	cmp	r6, fp
 80087b2:	f67f aebf 	bls.w	8008534 <_scanf_float+0x80>
 80087b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087be:	463a      	mov	r2, r7
 80087c0:	4640      	mov	r0, r8
 80087c2:	4798      	blx	r3
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	6123      	str	r3, [r4, #16]
 80087ca:	e7f1      	b.n	80087b0 <_scanf_float+0x2fc>
 80087cc:	46aa      	mov	sl, r5
 80087ce:	9602      	str	r6, [sp, #8]
 80087d0:	e7df      	b.n	8008792 <_scanf_float+0x2de>
 80087d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	2965      	cmp	r1, #101	; 0x65
 80087da:	f103 33ff 	add.w	r3, r3, #4294967295
 80087de:	f106 35ff 	add.w	r5, r6, #4294967295
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	d00c      	beq.n	8008800 <_scanf_float+0x34c>
 80087e6:	2945      	cmp	r1, #69	; 0x45
 80087e8:	d00a      	beq.n	8008800 <_scanf_float+0x34c>
 80087ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ee:	463a      	mov	r2, r7
 80087f0:	4640      	mov	r0, r8
 80087f2:	4798      	blx	r3
 80087f4:	6923      	ldr	r3, [r4, #16]
 80087f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	1eb5      	subs	r5, r6, #2
 80087fe:	6123      	str	r3, [r4, #16]
 8008800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008804:	463a      	mov	r2, r7
 8008806:	4640      	mov	r0, r8
 8008808:	4798      	blx	r3
 800880a:	462e      	mov	r6, r5
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	f015 0510 	ands.w	r5, r5, #16
 8008812:	d159      	bne.n	80088c8 <_scanf_float+0x414>
 8008814:	7035      	strb	r5, [r6, #0]
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800881c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008820:	d11b      	bne.n	800885a <_scanf_float+0x3a6>
 8008822:	9b01      	ldr	r3, [sp, #4]
 8008824:	454b      	cmp	r3, r9
 8008826:	eba3 0209 	sub.w	r2, r3, r9
 800882a:	d123      	bne.n	8008874 <_scanf_float+0x3c0>
 800882c:	2200      	movs	r2, #0
 800882e:	4659      	mov	r1, fp
 8008830:	4640      	mov	r0, r8
 8008832:	f000 fe97 	bl	8009564 <_strtod_r>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	f012 0f02 	tst.w	r2, #2
 800883e:	ec57 6b10 	vmov	r6, r7, d0
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	d021      	beq.n	800888a <_scanf_float+0x3d6>
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	1d1a      	adds	r2, r3, #4
 800884a:	600a      	str	r2, [r1, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	e9c3 6700 	strd	r6, r7, [r3]
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60e3      	str	r3, [r4, #12]
 8008858:	e66d      	b.n	8008536 <_scanf_float+0x82>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0e5      	beq.n	800882c <_scanf_float+0x378>
 8008860:	9905      	ldr	r1, [sp, #20]
 8008862:	230a      	movs	r3, #10
 8008864:	462a      	mov	r2, r5
 8008866:	3101      	adds	r1, #1
 8008868:	4640      	mov	r0, r8
 800886a:	f000 ff03 	bl	8009674 <_strtol_r>
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	9e05      	ldr	r6, [sp, #20]
 8008872:	1ac2      	subs	r2, r0, r3
 8008874:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008878:	429e      	cmp	r6, r3
 800887a:	bf28      	it	cs
 800887c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008880:	4912      	ldr	r1, [pc, #72]	; (80088cc <_scanf_float+0x418>)
 8008882:	4630      	mov	r0, r6
 8008884:	f000 f82c 	bl	80088e0 <siprintf>
 8008888:	e7d0      	b.n	800882c <_scanf_float+0x378>
 800888a:	9903      	ldr	r1, [sp, #12]
 800888c:	f012 0f04 	tst.w	r2, #4
 8008890:	f103 0204 	add.w	r2, r3, #4
 8008894:	600a      	str	r2, [r1, #0]
 8008896:	d1d9      	bne.n	800884c <_scanf_float+0x398>
 8008898:	f8d3 8000 	ldr.w	r8, [r3]
 800889c:	ee10 2a10 	vmov	r2, s0
 80088a0:	ee10 0a10 	vmov	r0, s0
 80088a4:	463b      	mov	r3, r7
 80088a6:	4639      	mov	r1, r7
 80088a8:	f7f8 f958 	bl	8000b5c <__aeabi_dcmpun>
 80088ac:	b128      	cbz	r0, 80088ba <_scanf_float+0x406>
 80088ae:	4808      	ldr	r0, [pc, #32]	; (80088d0 <_scanf_float+0x41c>)
 80088b0:	f000 f810 	bl	80088d4 <nanf>
 80088b4:	ed88 0a00 	vstr	s0, [r8]
 80088b8:	e7cb      	b.n	8008852 <_scanf_float+0x39e>
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f8 f9ab 	bl	8000c18 <__aeabi_d2f>
 80088c2:	f8c8 0000 	str.w	r0, [r8]
 80088c6:	e7c4      	b.n	8008852 <_scanf_float+0x39e>
 80088c8:	2500      	movs	r5, #0
 80088ca:	e634      	b.n	8008536 <_scanf_float+0x82>
 80088cc:	0800e944 	.word	0x0800e944
 80088d0:	0800ed50 	.word	0x0800ed50

080088d4 <nanf>:
 80088d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088dc <nanf+0x8>
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	7fc00000 	.word	0x7fc00000

080088e0 <siprintf>:
 80088e0:	b40e      	push	{r1, r2, r3}
 80088e2:	b500      	push	{lr}
 80088e4:	b09c      	sub	sp, #112	; 0x70
 80088e6:	ab1d      	add	r3, sp, #116	; 0x74
 80088e8:	9002      	str	r0, [sp, #8]
 80088ea:	9006      	str	r0, [sp, #24]
 80088ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <siprintf+0x38>)
 80088f2:	9107      	str	r1, [sp, #28]
 80088f4:	9104      	str	r1, [sp, #16]
 80088f6:	4909      	ldr	r1, [pc, #36]	; (800891c <siprintf+0x3c>)
 80088f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088fc:	9105      	str	r1, [sp, #20]
 80088fe:	6800      	ldr	r0, [r0, #0]
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	a902      	add	r1, sp, #8
 8008904:	f002 fee2 	bl	800b6cc <_svfiprintf_r>
 8008908:	9b02      	ldr	r3, [sp, #8]
 800890a:	2200      	movs	r2, #0
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	b01c      	add	sp, #112	; 0x70
 8008910:	f85d eb04 	ldr.w	lr, [sp], #4
 8008914:	b003      	add	sp, #12
 8008916:	4770      	bx	lr
 8008918:	2000001c 	.word	0x2000001c
 800891c:	ffff0208 	.word	0xffff0208

08008920 <sulp>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	4604      	mov	r4, r0
 8008924:	460d      	mov	r5, r1
 8008926:	ec45 4b10 	vmov	d0, r4, r5
 800892a:	4616      	mov	r6, r2
 800892c:	f002 fc2c 	bl	800b188 <__ulp>
 8008930:	ec51 0b10 	vmov	r0, r1, d0
 8008934:	b17e      	cbz	r6, 8008956 <sulp+0x36>
 8008936:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800893a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd09      	ble.n	8008956 <sulp+0x36>
 8008942:	051b      	lsls	r3, r3, #20
 8008944:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008948:	2400      	movs	r4, #0
 800894a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800894e:	4622      	mov	r2, r4
 8008950:	462b      	mov	r3, r5
 8008952:	f7f7 fe69 	bl	8000628 <__aeabi_dmul>
 8008956:	bd70      	pop	{r4, r5, r6, pc}

08008958 <_strtod_l>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	ed2d 8b02 	vpush	{d8}
 8008960:	b09d      	sub	sp, #116	; 0x74
 8008962:	461f      	mov	r7, r3
 8008964:	2300      	movs	r3, #0
 8008966:	9318      	str	r3, [sp, #96]	; 0x60
 8008968:	4ba2      	ldr	r3, [pc, #648]	; (8008bf4 <_strtod_l+0x29c>)
 800896a:	9213      	str	r2, [sp, #76]	; 0x4c
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9305      	str	r3, [sp, #20]
 8008970:	4604      	mov	r4, r0
 8008972:	4618      	mov	r0, r3
 8008974:	4688      	mov	r8, r1
 8008976:	f7f7 fc3d 	bl	80001f4 <strlen>
 800897a:	f04f 0a00 	mov.w	sl, #0
 800897e:	4605      	mov	r5, r0
 8008980:	f04f 0b00 	mov.w	fp, #0
 8008984:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	2a2b      	cmp	r2, #43	; 0x2b
 800898e:	d04e      	beq.n	8008a2e <_strtod_l+0xd6>
 8008990:	d83b      	bhi.n	8008a0a <_strtod_l+0xb2>
 8008992:	2a0d      	cmp	r2, #13
 8008994:	d834      	bhi.n	8008a00 <_strtod_l+0xa8>
 8008996:	2a08      	cmp	r2, #8
 8008998:	d834      	bhi.n	8008a04 <_strtod_l+0xac>
 800899a:	2a00      	cmp	r2, #0
 800899c:	d03e      	beq.n	8008a1c <_strtod_l+0xc4>
 800899e:	2300      	movs	r3, #0
 80089a0:	930a      	str	r3, [sp, #40]	; 0x28
 80089a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80089a4:	7833      	ldrb	r3, [r6, #0]
 80089a6:	2b30      	cmp	r3, #48	; 0x30
 80089a8:	f040 80b0 	bne.w	8008b0c <_strtod_l+0x1b4>
 80089ac:	7873      	ldrb	r3, [r6, #1]
 80089ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089b2:	2b58      	cmp	r3, #88	; 0x58
 80089b4:	d168      	bne.n	8008a88 <_strtod_l+0x130>
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	ab18      	add	r3, sp, #96	; 0x60
 80089bc:	9702      	str	r7, [sp, #8]
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4a8d      	ldr	r2, [pc, #564]	; (8008bf8 <_strtod_l+0x2a0>)
 80089c2:	ab19      	add	r3, sp, #100	; 0x64
 80089c4:	a917      	add	r1, sp, #92	; 0x5c
 80089c6:	4620      	mov	r0, r4
 80089c8:	f001 fd38 	bl	800a43c <__gethex>
 80089cc:	f010 0707 	ands.w	r7, r0, #7
 80089d0:	4605      	mov	r5, r0
 80089d2:	d005      	beq.n	80089e0 <_strtod_l+0x88>
 80089d4:	2f06      	cmp	r7, #6
 80089d6:	d12c      	bne.n	8008a32 <_strtod_l+0xda>
 80089d8:	3601      	adds	r6, #1
 80089da:	2300      	movs	r3, #0
 80089dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80089de:	930a      	str	r3, [sp, #40]	; 0x28
 80089e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f040 8590 	bne.w	8009508 <_strtod_l+0xbb0>
 80089e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ea:	b1eb      	cbz	r3, 8008a28 <_strtod_l+0xd0>
 80089ec:	4652      	mov	r2, sl
 80089ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089f2:	ec43 2b10 	vmov	d0, r2, r3
 80089f6:	b01d      	add	sp, #116	; 0x74
 80089f8:	ecbd 8b02 	vpop	{d8}
 80089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a00:	2a20      	cmp	r2, #32
 8008a02:	d1cc      	bne.n	800899e <_strtod_l+0x46>
 8008a04:	3301      	adds	r3, #1
 8008a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a08:	e7be      	b.n	8008988 <_strtod_l+0x30>
 8008a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a0c:	d1c7      	bne.n	800899e <_strtod_l+0x46>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	920a      	str	r2, [sp, #40]	; 0x28
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a16:	785b      	ldrb	r3, [r3, #1]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1c2      	bne.n	80089a2 <_strtod_l+0x4a>
 8008a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 856e 	bne.w	8009504 <_strtod_l+0xbac>
 8008a28:	4652      	mov	r2, sl
 8008a2a:	465b      	mov	r3, fp
 8008a2c:	e7e1      	b.n	80089f2 <_strtod_l+0x9a>
 8008a2e:	2200      	movs	r2, #0
 8008a30:	e7ee      	b.n	8008a10 <_strtod_l+0xb8>
 8008a32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a34:	b13a      	cbz	r2, 8008a46 <_strtod_l+0xee>
 8008a36:	2135      	movs	r1, #53	; 0x35
 8008a38:	a81a      	add	r0, sp, #104	; 0x68
 8008a3a:	f002 fcb0 	bl	800b39e <__copybits>
 8008a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a40:	4620      	mov	r0, r4
 8008a42:	f002 f86f 	bl	800ab24 <_Bfree>
 8008a46:	3f01      	subs	r7, #1
 8008a48:	2f04      	cmp	r7, #4
 8008a4a:	d806      	bhi.n	8008a5a <_strtod_l+0x102>
 8008a4c:	e8df f007 	tbb	[pc, r7]
 8008a50:	1714030a 	.word	0x1714030a
 8008a54:	0a          	.byte	0x0a
 8008a55:	00          	.byte	0x00
 8008a56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008a5a:	0728      	lsls	r0, r5, #28
 8008a5c:	d5c0      	bpl.n	80089e0 <_strtod_l+0x88>
 8008a5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a62:	e7bd      	b.n	80089e0 <_strtod_l+0x88>
 8008a64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a76:	e7f0      	b.n	8008a5a <_strtod_l+0x102>
 8008a78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008bfc <_strtod_l+0x2a4>
 8008a7c:	e7ed      	b.n	8008a5a <_strtod_l+0x102>
 8008a7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a82:	f04f 3aff 	mov.w	sl, #4294967295
 8008a86:	e7e8      	b.n	8008a5a <_strtod_l+0x102>
 8008a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008a8e:	785b      	ldrb	r3, [r3, #1]
 8008a90:	2b30      	cmp	r3, #48	; 0x30
 8008a92:	d0f9      	beq.n	8008a88 <_strtod_l+0x130>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0a3      	beq.n	80089e0 <_strtod_l+0x88>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aa2:	9308      	str	r3, [sp, #32]
 8008aa4:	f8cd 901c 	str.w	r9, [sp, #28]
 8008aa8:	464f      	mov	r7, r9
 8008aaa:	220a      	movs	r2, #10
 8008aac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008aae:	7806      	ldrb	r6, [r0, #0]
 8008ab0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ab4:	b2d9      	uxtb	r1, r3
 8008ab6:	2909      	cmp	r1, #9
 8008ab8:	d92a      	bls.n	8008b10 <_strtod_l+0x1b8>
 8008aba:	9905      	ldr	r1, [sp, #20]
 8008abc:	462a      	mov	r2, r5
 8008abe:	f002 ff1f 	bl	800b900 <strncmp>
 8008ac2:	b398      	cbz	r0, 8008b2c <_strtod_l+0x1d4>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4632      	mov	r2, r6
 8008ac8:	463d      	mov	r5, r7
 8008aca:	9005      	str	r0, [sp, #20]
 8008acc:	4603      	mov	r3, r0
 8008ace:	2a65      	cmp	r2, #101	; 0x65
 8008ad0:	d001      	beq.n	8008ad6 <_strtod_l+0x17e>
 8008ad2:	2a45      	cmp	r2, #69	; 0x45
 8008ad4:	d118      	bne.n	8008b08 <_strtod_l+0x1b0>
 8008ad6:	b91d      	cbnz	r5, 8008ae0 <_strtod_l+0x188>
 8008ad8:	9a04      	ldr	r2, [sp, #16]
 8008ada:	4302      	orrs	r2, r0
 8008adc:	d09e      	beq.n	8008a1c <_strtod_l+0xc4>
 8008ade:	2500      	movs	r5, #0
 8008ae0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008ae4:	f108 0201 	add.w	r2, r8, #1
 8008ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008aea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008aee:	2a2b      	cmp	r2, #43	; 0x2b
 8008af0:	d075      	beq.n	8008bde <_strtod_l+0x286>
 8008af2:	2a2d      	cmp	r2, #45	; 0x2d
 8008af4:	d07b      	beq.n	8008bee <_strtod_l+0x296>
 8008af6:	f04f 0c00 	mov.w	ip, #0
 8008afa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008afe:	2909      	cmp	r1, #9
 8008b00:	f240 8082 	bls.w	8008c08 <_strtod_l+0x2b0>
 8008b04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b08:	2600      	movs	r6, #0
 8008b0a:	e09d      	b.n	8008c48 <_strtod_l+0x2f0>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e7c4      	b.n	8008a9a <_strtod_l+0x142>
 8008b10:	2f08      	cmp	r7, #8
 8008b12:	bfd8      	it	le
 8008b14:	9907      	ldrle	r1, [sp, #28]
 8008b16:	f100 0001 	add.w	r0, r0, #1
 8008b1a:	bfda      	itte	le
 8008b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b20:	9307      	strle	r3, [sp, #28]
 8008b22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b26:	3701      	adds	r7, #1
 8008b28:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b2a:	e7bf      	b.n	8008aac <_strtod_l+0x154>
 8008b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b2e:	195a      	adds	r2, r3, r5
 8008b30:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b32:	5d5a      	ldrb	r2, [r3, r5]
 8008b34:	2f00      	cmp	r7, #0
 8008b36:	d037      	beq.n	8008ba8 <_strtod_l+0x250>
 8008b38:	9005      	str	r0, [sp, #20]
 8008b3a:	463d      	mov	r5, r7
 8008b3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	d912      	bls.n	8008b6a <_strtod_l+0x212>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7c2      	b.n	8008ace <_strtod_l+0x176>
 8008b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008b4e:	785a      	ldrb	r2, [r3, #1]
 8008b50:	3001      	adds	r0, #1
 8008b52:	2a30      	cmp	r2, #48	; 0x30
 8008b54:	d0f8      	beq.n	8008b48 <_strtod_l+0x1f0>
 8008b56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008b5a:	2b08      	cmp	r3, #8
 8008b5c:	f200 84d9 	bhi.w	8009512 <_strtod_l+0xbba>
 8008b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b62:	9005      	str	r0, [sp, #20]
 8008b64:	2000      	movs	r0, #0
 8008b66:	9308      	str	r3, [sp, #32]
 8008b68:	4605      	mov	r5, r0
 8008b6a:	3a30      	subs	r2, #48	; 0x30
 8008b6c:	f100 0301 	add.w	r3, r0, #1
 8008b70:	d014      	beq.n	8008b9c <_strtod_l+0x244>
 8008b72:	9905      	ldr	r1, [sp, #20]
 8008b74:	4419      	add	r1, r3
 8008b76:	9105      	str	r1, [sp, #20]
 8008b78:	462b      	mov	r3, r5
 8008b7a:	eb00 0e05 	add.w	lr, r0, r5
 8008b7e:	210a      	movs	r1, #10
 8008b80:	4573      	cmp	r3, lr
 8008b82:	d113      	bne.n	8008bac <_strtod_l+0x254>
 8008b84:	182b      	adds	r3, r5, r0
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	f105 0501 	add.w	r5, r5, #1
 8008b8c:	4405      	add	r5, r0
 8008b8e:	dc1c      	bgt.n	8008bca <_strtod_l+0x272>
 8008b90:	9907      	ldr	r1, [sp, #28]
 8008b92:	230a      	movs	r3, #10
 8008b94:	fb03 2301 	mla	r3, r3, r1, r2
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b9e:	1c51      	adds	r1, r2, #1
 8008ba0:	9117      	str	r1, [sp, #92]	; 0x5c
 8008ba2:	7852      	ldrb	r2, [r2, #1]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	e7c9      	b.n	8008b3c <_strtod_l+0x1e4>
 8008ba8:	4638      	mov	r0, r7
 8008baa:	e7d2      	b.n	8008b52 <_strtod_l+0x1fa>
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	dc04      	bgt.n	8008bba <_strtod_l+0x262>
 8008bb0:	9e07      	ldr	r6, [sp, #28]
 8008bb2:	434e      	muls	r6, r1
 8008bb4:	9607      	str	r6, [sp, #28]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	e7e2      	b.n	8008b80 <_strtod_l+0x228>
 8008bba:	f103 0c01 	add.w	ip, r3, #1
 8008bbe:	f1bc 0f10 	cmp.w	ip, #16
 8008bc2:	bfd8      	it	le
 8008bc4:	fb01 f909 	mulle.w	r9, r1, r9
 8008bc8:	e7f5      	b.n	8008bb6 <_strtod_l+0x25e>
 8008bca:	2d10      	cmp	r5, #16
 8008bcc:	bfdc      	itt	le
 8008bce:	230a      	movle	r3, #10
 8008bd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008bd4:	e7e1      	b.n	8008b9a <_strtod_l+0x242>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e77c      	b.n	8008ad8 <_strtod_l+0x180>
 8008bde:	f04f 0c00 	mov.w	ip, #0
 8008be2:	f108 0202 	add.w	r2, r8, #2
 8008be6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008be8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008bec:	e785      	b.n	8008afa <_strtod_l+0x1a2>
 8008bee:	f04f 0c01 	mov.w	ip, #1
 8008bf2:	e7f6      	b.n	8008be2 <_strtod_l+0x28a>
 8008bf4:	0800eb98 	.word	0x0800eb98
 8008bf8:	0800e94c 	.word	0x0800e94c
 8008bfc:	7ff00000 	.word	0x7ff00000
 8008c00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c02:	1c51      	adds	r1, r2, #1
 8008c04:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c06:	7852      	ldrb	r2, [r2, #1]
 8008c08:	2a30      	cmp	r2, #48	; 0x30
 8008c0a:	d0f9      	beq.n	8008c00 <_strtod_l+0x2a8>
 8008c0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008c10:	2908      	cmp	r1, #8
 8008c12:	f63f af79 	bhi.w	8008b08 <_strtod_l+0x1b0>
 8008c16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008c1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c1c:	9206      	str	r2, [sp, #24]
 8008c1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c20:	1c51      	adds	r1, r2, #1
 8008c22:	9117      	str	r1, [sp, #92]	; 0x5c
 8008c24:	7852      	ldrb	r2, [r2, #1]
 8008c26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008c2a:	2e09      	cmp	r6, #9
 8008c2c:	d937      	bls.n	8008c9e <_strtod_l+0x346>
 8008c2e:	9e06      	ldr	r6, [sp, #24]
 8008c30:	1b89      	subs	r1, r1, r6
 8008c32:	2908      	cmp	r1, #8
 8008c34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c38:	dc02      	bgt.n	8008c40 <_strtod_l+0x2e8>
 8008c3a:	4576      	cmp	r6, lr
 8008c3c:	bfa8      	it	ge
 8008c3e:	4676      	movge	r6, lr
 8008c40:	f1bc 0f00 	cmp.w	ip, #0
 8008c44:	d000      	beq.n	8008c48 <_strtod_l+0x2f0>
 8008c46:	4276      	negs	r6, r6
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	d14d      	bne.n	8008ce8 <_strtod_l+0x390>
 8008c4c:	9904      	ldr	r1, [sp, #16]
 8008c4e:	4301      	orrs	r1, r0
 8008c50:	f47f aec6 	bne.w	80089e0 <_strtod_l+0x88>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f47f aee1 	bne.w	8008a1c <_strtod_l+0xc4>
 8008c5a:	2a69      	cmp	r2, #105	; 0x69
 8008c5c:	d027      	beq.n	8008cae <_strtod_l+0x356>
 8008c5e:	dc24      	bgt.n	8008caa <_strtod_l+0x352>
 8008c60:	2a49      	cmp	r2, #73	; 0x49
 8008c62:	d024      	beq.n	8008cae <_strtod_l+0x356>
 8008c64:	2a4e      	cmp	r2, #78	; 0x4e
 8008c66:	f47f aed9 	bne.w	8008a1c <_strtod_l+0xc4>
 8008c6a:	499f      	ldr	r1, [pc, #636]	; (8008ee8 <_strtod_l+0x590>)
 8008c6c:	a817      	add	r0, sp, #92	; 0x5c
 8008c6e:	f001 fe3d 	bl	800a8ec <__match>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f43f aed2 	beq.w	8008a1c <_strtod_l+0xc4>
 8008c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b28      	cmp	r3, #40	; 0x28
 8008c7e:	d12d      	bne.n	8008cdc <_strtod_l+0x384>
 8008c80:	499a      	ldr	r1, [pc, #616]	; (8008eec <_strtod_l+0x594>)
 8008c82:	aa1a      	add	r2, sp, #104	; 0x68
 8008c84:	a817      	add	r0, sp, #92	; 0x5c
 8008c86:	f001 fe45 	bl	800a914 <__hexnan>
 8008c8a:	2805      	cmp	r0, #5
 8008c8c:	d126      	bne.n	8008cdc <_strtod_l+0x384>
 8008c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008c94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c9c:	e6a0      	b.n	80089e0 <_strtod_l+0x88>
 8008c9e:	210a      	movs	r1, #10
 8008ca0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008ca4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ca8:	e7b9      	b.n	8008c1e <_strtod_l+0x2c6>
 8008caa:	2a6e      	cmp	r2, #110	; 0x6e
 8008cac:	e7db      	b.n	8008c66 <_strtod_l+0x30e>
 8008cae:	4990      	ldr	r1, [pc, #576]	; (8008ef0 <_strtod_l+0x598>)
 8008cb0:	a817      	add	r0, sp, #92	; 0x5c
 8008cb2:	f001 fe1b 	bl	800a8ec <__match>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f aeb0 	beq.w	8008a1c <_strtod_l+0xc4>
 8008cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cbe:	498d      	ldr	r1, [pc, #564]	; (8008ef4 <_strtod_l+0x59c>)
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	a817      	add	r0, sp, #92	; 0x5c
 8008cc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cc6:	f001 fe11 	bl	800a8ec <__match>
 8008cca:	b910      	cbnz	r0, 8008cd2 <_strtod_l+0x37a>
 8008ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cce:	3301      	adds	r3, #1
 8008cd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008cd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008f04 <_strtod_l+0x5ac>
 8008cd6:	f04f 0a00 	mov.w	sl, #0
 8008cda:	e681      	b.n	80089e0 <_strtod_l+0x88>
 8008cdc:	4886      	ldr	r0, [pc, #536]	; (8008ef8 <_strtod_l+0x5a0>)
 8008cde:	f002 fdf7 	bl	800b8d0 <nan>
 8008ce2:	ec5b ab10 	vmov	sl, fp, d0
 8008ce6:	e67b      	b.n	80089e0 <_strtod_l+0x88>
 8008ce8:	9b05      	ldr	r3, [sp, #20]
 8008cea:	9807      	ldr	r0, [sp, #28]
 8008cec:	1af3      	subs	r3, r6, r3
 8008cee:	2f00      	cmp	r7, #0
 8008cf0:	bf08      	it	eq
 8008cf2:	462f      	moveq	r7, r5
 8008cf4:	2d10      	cmp	r5, #16
 8008cf6:	9306      	str	r3, [sp, #24]
 8008cf8:	46a8      	mov	r8, r5
 8008cfa:	bfa8      	it	ge
 8008cfc:	f04f 0810 	movge.w	r8, #16
 8008d00:	f7f7 fc18 	bl	8000534 <__aeabi_ui2d>
 8008d04:	2d09      	cmp	r5, #9
 8008d06:	4682      	mov	sl, r0
 8008d08:	468b      	mov	fp, r1
 8008d0a:	dd13      	ble.n	8008d34 <_strtod_l+0x3dc>
 8008d0c:	4b7b      	ldr	r3, [pc, #492]	; (8008efc <_strtod_l+0x5a4>)
 8008d0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d16:	f7f7 fc87 	bl	8000628 <__aeabi_dmul>
 8008d1a:	4682      	mov	sl, r0
 8008d1c:	4648      	mov	r0, r9
 8008d1e:	468b      	mov	fp, r1
 8008d20:	f7f7 fc08 	bl	8000534 <__aeabi_ui2d>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4650      	mov	r0, sl
 8008d2a:	4659      	mov	r1, fp
 8008d2c:	f7f7 fac6 	bl	80002bc <__adddf3>
 8008d30:	4682      	mov	sl, r0
 8008d32:	468b      	mov	fp, r1
 8008d34:	2d0f      	cmp	r5, #15
 8008d36:	dc38      	bgt.n	8008daa <_strtod_l+0x452>
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f43f ae50 	beq.w	80089e0 <_strtod_l+0x88>
 8008d40:	dd24      	ble.n	8008d8c <_strtod_l+0x434>
 8008d42:	2b16      	cmp	r3, #22
 8008d44:	dc0b      	bgt.n	8008d5e <_strtod_l+0x406>
 8008d46:	496d      	ldr	r1, [pc, #436]	; (8008efc <_strtod_l+0x5a4>)
 8008d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d50:	4652      	mov	r2, sl
 8008d52:	465b      	mov	r3, fp
 8008d54:	f7f7 fc68 	bl	8000628 <__aeabi_dmul>
 8008d58:	4682      	mov	sl, r0
 8008d5a:	468b      	mov	fp, r1
 8008d5c:	e640      	b.n	80089e0 <_strtod_l+0x88>
 8008d5e:	9a06      	ldr	r2, [sp, #24]
 8008d60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d64:	4293      	cmp	r3, r2
 8008d66:	db20      	blt.n	8008daa <_strtod_l+0x452>
 8008d68:	4c64      	ldr	r4, [pc, #400]	; (8008efc <_strtod_l+0x5a4>)
 8008d6a:	f1c5 050f 	rsb	r5, r5, #15
 8008d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d72:	4652      	mov	r2, sl
 8008d74:	465b      	mov	r3, fp
 8008d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d7a:	f7f7 fc55 	bl	8000628 <__aeabi_dmul>
 8008d7e:	9b06      	ldr	r3, [sp, #24]
 8008d80:	1b5d      	subs	r5, r3, r5
 8008d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d8a:	e7e3      	b.n	8008d54 <_strtod_l+0x3fc>
 8008d8c:	9b06      	ldr	r3, [sp, #24]
 8008d8e:	3316      	adds	r3, #22
 8008d90:	db0b      	blt.n	8008daa <_strtod_l+0x452>
 8008d92:	9b05      	ldr	r3, [sp, #20]
 8008d94:	1b9e      	subs	r6, r3, r6
 8008d96:	4b59      	ldr	r3, [pc, #356]	; (8008efc <_strtod_l+0x5a4>)
 8008d98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008da0:	4650      	mov	r0, sl
 8008da2:	4659      	mov	r1, fp
 8008da4:	f7f7 fd6a 	bl	800087c <__aeabi_ddiv>
 8008da8:	e7d6      	b.n	8008d58 <_strtod_l+0x400>
 8008daa:	9b06      	ldr	r3, [sp, #24]
 8008dac:	eba5 0808 	sub.w	r8, r5, r8
 8008db0:	4498      	add	r8, r3
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	dd74      	ble.n	8008ea2 <_strtod_l+0x54a>
 8008db8:	f018 030f 	ands.w	r3, r8, #15
 8008dbc:	d00a      	beq.n	8008dd4 <_strtod_l+0x47c>
 8008dbe:	494f      	ldr	r1, [pc, #316]	; (8008efc <_strtod_l+0x5a4>)
 8008dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dc4:	4652      	mov	r2, sl
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dcc:	f7f7 fc2c 	bl	8000628 <__aeabi_dmul>
 8008dd0:	4682      	mov	sl, r0
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	f038 080f 	bics.w	r8, r8, #15
 8008dd8:	d04f      	beq.n	8008e7a <_strtod_l+0x522>
 8008dda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008dde:	dd22      	ble.n	8008e26 <_strtod_l+0x4ce>
 8008de0:	2500      	movs	r5, #0
 8008de2:	462e      	mov	r6, r5
 8008de4:	9507      	str	r5, [sp, #28]
 8008de6:	9505      	str	r5, [sp, #20]
 8008de8:	2322      	movs	r3, #34	; 0x22
 8008dea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008f04 <_strtod_l+0x5ac>
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	f04f 0a00 	mov.w	sl, #0
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f43f adf2 	beq.w	80089e0 <_strtod_l+0x88>
 8008dfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 fe90 	bl	800ab24 <_Bfree>
 8008e04:	9905      	ldr	r1, [sp, #20]
 8008e06:	4620      	mov	r0, r4
 8008e08:	f001 fe8c 	bl	800ab24 <_Bfree>
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f001 fe88 	bl	800ab24 <_Bfree>
 8008e14:	9907      	ldr	r1, [sp, #28]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f001 fe84 	bl	800ab24 <_Bfree>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f001 fe80 	bl	800ab24 <_Bfree>
 8008e24:	e5dc      	b.n	80089e0 <_strtod_l+0x88>
 8008e26:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <_strtod_l+0x5a8>)
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e30:	4650      	mov	r0, sl
 8008e32:	4659      	mov	r1, fp
 8008e34:	4699      	mov	r9, r3
 8008e36:	f1b8 0f01 	cmp.w	r8, #1
 8008e3a:	dc21      	bgt.n	8008e80 <_strtod_l+0x528>
 8008e3c:	b10b      	cbz	r3, 8008e42 <_strtod_l+0x4ea>
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	4b2f      	ldr	r3, [pc, #188]	; (8008f00 <_strtod_l+0x5a8>)
 8008e44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e4c:	4652      	mov	r2, sl
 8008e4e:	465b      	mov	r3, fp
 8008e50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e54:	f7f7 fbe8 	bl	8000628 <__aeabi_dmul>
 8008e58:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <_strtod_l+0x5ac>)
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	400b      	ands	r3, r1
 8008e5e:	492a      	ldr	r1, [pc, #168]	; (8008f08 <_strtod_l+0x5b0>)
 8008e60:	428b      	cmp	r3, r1
 8008e62:	4682      	mov	sl, r0
 8008e64:	d8bc      	bhi.n	8008de0 <_strtod_l+0x488>
 8008e66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e6a:	428b      	cmp	r3, r1
 8008e6c:	bf86      	itte	hi
 8008e6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008f0c <_strtod_l+0x5b4>
 8008e72:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9304      	str	r3, [sp, #16]
 8008e7e:	e084      	b.n	8008f8a <_strtod_l+0x632>
 8008e80:	f018 0f01 	tst.w	r8, #1
 8008e84:	d005      	beq.n	8008e92 <_strtod_l+0x53a>
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	f7f7 fbcc 	bl	8000628 <__aeabi_dmul>
 8008e90:	2301      	movs	r3, #1
 8008e92:	9a04      	ldr	r2, [sp, #16]
 8008e94:	3208      	adds	r2, #8
 8008e96:	f109 0901 	add.w	r9, r9, #1
 8008e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	e7c9      	b.n	8008e36 <_strtod_l+0x4de>
 8008ea2:	d0ea      	beq.n	8008e7a <_strtod_l+0x522>
 8008ea4:	f1c8 0800 	rsb	r8, r8, #0
 8008ea8:	f018 020f 	ands.w	r2, r8, #15
 8008eac:	d00a      	beq.n	8008ec4 <_strtod_l+0x56c>
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <_strtod_l+0x5a4>)
 8008eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb4:	4650      	mov	r0, sl
 8008eb6:	4659      	mov	r1, fp
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	f7f7 fcde 	bl	800087c <__aeabi_ddiv>
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	468b      	mov	fp, r1
 8008ec4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ec8:	d0d7      	beq.n	8008e7a <_strtod_l+0x522>
 8008eca:	f1b8 0f1f 	cmp.w	r8, #31
 8008ece:	dd1f      	ble.n	8008f10 <_strtod_l+0x5b8>
 8008ed0:	2500      	movs	r5, #0
 8008ed2:	462e      	mov	r6, r5
 8008ed4:	9507      	str	r5, [sp, #28]
 8008ed6:	9505      	str	r5, [sp, #20]
 8008ed8:	2322      	movs	r3, #34	; 0x22
 8008eda:	f04f 0a00 	mov.w	sl, #0
 8008ede:	f04f 0b00 	mov.w	fp, #0
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	e786      	b.n	8008df4 <_strtod_l+0x49c>
 8008ee6:	bf00      	nop
 8008ee8:	0800e91d 	.word	0x0800e91d
 8008eec:	0800e960 	.word	0x0800e960
 8008ef0:	0800e915 	.word	0x0800e915
 8008ef4:	0800eaa4 	.word	0x0800eaa4
 8008ef8:	0800ed50 	.word	0x0800ed50
 8008efc:	0800ec30 	.word	0x0800ec30
 8008f00:	0800ec08 	.word	0x0800ec08
 8008f04:	7ff00000 	.word	0x7ff00000
 8008f08:	7ca00000 	.word	0x7ca00000
 8008f0c:	7fefffff 	.word	0x7fefffff
 8008f10:	f018 0310 	ands.w	r3, r8, #16
 8008f14:	bf18      	it	ne
 8008f16:	236a      	movne	r3, #106	; 0x6a
 8008f18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80092c8 <_strtod_l+0x970>
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	4650      	mov	r0, sl
 8008f20:	4659      	mov	r1, fp
 8008f22:	2300      	movs	r3, #0
 8008f24:	f018 0f01 	tst.w	r8, #1
 8008f28:	d004      	beq.n	8008f34 <_strtod_l+0x5dc>
 8008f2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f2e:	f7f7 fb7b 	bl	8000628 <__aeabi_dmul>
 8008f32:	2301      	movs	r3, #1
 8008f34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f38:	f109 0908 	add.w	r9, r9, #8
 8008f3c:	d1f2      	bne.n	8008f24 <_strtod_l+0x5cc>
 8008f3e:	b10b      	cbz	r3, 8008f44 <_strtod_l+0x5ec>
 8008f40:	4682      	mov	sl, r0
 8008f42:	468b      	mov	fp, r1
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	b1c3      	cbz	r3, 8008f7a <_strtod_l+0x622>
 8008f48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	4659      	mov	r1, fp
 8008f54:	dd11      	ble.n	8008f7a <_strtod_l+0x622>
 8008f56:	2b1f      	cmp	r3, #31
 8008f58:	f340 8124 	ble.w	80091a4 <_strtod_l+0x84c>
 8008f5c:	2b34      	cmp	r3, #52	; 0x34
 8008f5e:	bfde      	ittt	le
 8008f60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008f64:	f04f 33ff 	movle.w	r3, #4294967295
 8008f68:	fa03 f202 	lslle.w	r2, r3, r2
 8008f6c:	f04f 0a00 	mov.w	sl, #0
 8008f70:	bfcc      	ite	gt
 8008f72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f76:	ea02 0b01 	andle.w	fp, r2, r1
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4650      	mov	r0, sl
 8008f80:	4659      	mov	r1, fp
 8008f82:	f7f7 fdb9 	bl	8000af8 <__aeabi_dcmpeq>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d1a2      	bne.n	8008ed0 <_strtod_l+0x578>
 8008f8a:	9b07      	ldr	r3, [sp, #28]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	9908      	ldr	r1, [sp, #32]
 8008f90:	462b      	mov	r3, r5
 8008f92:	463a      	mov	r2, r7
 8008f94:	4620      	mov	r0, r4
 8008f96:	f001 fe2d 	bl	800abf4 <__s2b>
 8008f9a:	9007      	str	r0, [sp, #28]
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f43f af1f 	beq.w	8008de0 <_strtod_l+0x488>
 8008fa2:	9b05      	ldr	r3, [sp, #20]
 8008fa4:	1b9e      	subs	r6, r3, r6
 8008fa6:	9b06      	ldr	r3, [sp, #24]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfb4      	ite	lt
 8008fac:	4633      	movlt	r3, r6
 8008fae:	2300      	movge	r3, #0
 8008fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb2:	9b06      	ldr	r3, [sp, #24]
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fba:	9312      	str	r3, [sp, #72]	; 0x48
 8008fbc:	462e      	mov	r6, r5
 8008fbe:	9b07      	ldr	r3, [sp, #28]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	6859      	ldr	r1, [r3, #4]
 8008fc4:	f001 fd6e 	bl	800aaa4 <_Balloc>
 8008fc8:	9005      	str	r0, [sp, #20]
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f43f af0c 	beq.w	8008de8 <_strtod_l+0x490>
 8008fd0:	9b07      	ldr	r3, [sp, #28]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	3202      	adds	r2, #2
 8008fd6:	f103 010c 	add.w	r1, r3, #12
 8008fda:	0092      	lsls	r2, r2, #2
 8008fdc:	300c      	adds	r0, #12
 8008fde:	f001 fd53 	bl	800aa88 <memcpy>
 8008fe2:	ec4b ab10 	vmov	d0, sl, fp
 8008fe6:	aa1a      	add	r2, sp, #104	; 0x68
 8008fe8:	a919      	add	r1, sp, #100	; 0x64
 8008fea:	4620      	mov	r0, r4
 8008fec:	f002 f948 	bl	800b280 <__d2b>
 8008ff0:	ec4b ab18 	vmov	d8, sl, fp
 8008ff4:	9018      	str	r0, [sp, #96]	; 0x60
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f aef6 	beq.w	8008de8 <_strtod_l+0x490>
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4620      	mov	r0, r4
 8009000:	f001 fe92 	bl	800ad28 <__i2b>
 8009004:	4606      	mov	r6, r0
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f aeee 	beq.w	8008de8 <_strtod_l+0x490>
 800900c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800900e:	9904      	ldr	r1, [sp, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfab      	itete	ge
 8009014:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009016:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009018:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800901a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800901e:	bfac      	ite	ge
 8009020:	eb03 0902 	addge.w	r9, r3, r2
 8009024:	1ad7      	sublt	r7, r2, r3
 8009026:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009028:	eba3 0801 	sub.w	r8, r3, r1
 800902c:	4490      	add	r8, r2
 800902e:	4ba1      	ldr	r3, [pc, #644]	; (80092b4 <_strtod_l+0x95c>)
 8009030:	f108 38ff 	add.w	r8, r8, #4294967295
 8009034:	4598      	cmp	r8, r3
 8009036:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800903a:	f280 80c7 	bge.w	80091cc <_strtod_l+0x874>
 800903e:	eba3 0308 	sub.w	r3, r3, r8
 8009042:	2b1f      	cmp	r3, #31
 8009044:	eba2 0203 	sub.w	r2, r2, r3
 8009048:	f04f 0101 	mov.w	r1, #1
 800904c:	f300 80b1 	bgt.w	80091b2 <_strtod_l+0x85a>
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	930d      	str	r3, [sp, #52]	; 0x34
 8009056:	2300      	movs	r3, #0
 8009058:	9308      	str	r3, [sp, #32]
 800905a:	eb09 0802 	add.w	r8, r9, r2
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	45c1      	cmp	r9, r8
 8009062:	4417      	add	r7, r2
 8009064:	441f      	add	r7, r3
 8009066:	464b      	mov	r3, r9
 8009068:	bfa8      	it	ge
 800906a:	4643      	movge	r3, r8
 800906c:	42bb      	cmp	r3, r7
 800906e:	bfa8      	it	ge
 8009070:	463b      	movge	r3, r7
 8009072:	2b00      	cmp	r3, #0
 8009074:	bfc2      	ittt	gt
 8009076:	eba8 0803 	subgt.w	r8, r8, r3
 800907a:	1aff      	subgt	r7, r7, r3
 800907c:	eba9 0903 	subgt.w	r9, r9, r3
 8009080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	dd17      	ble.n	80090b6 <_strtod_l+0x75e>
 8009086:	4631      	mov	r1, r6
 8009088:	461a      	mov	r2, r3
 800908a:	4620      	mov	r0, r4
 800908c:	f001 ff0c 	bl	800aea8 <__pow5mult>
 8009090:	4606      	mov	r6, r0
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aea8 	beq.w	8008de8 <_strtod_l+0x490>
 8009098:	4601      	mov	r1, r0
 800909a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800909c:	4620      	mov	r0, r4
 800909e:	f001 fe59 	bl	800ad54 <__multiply>
 80090a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f43f ae9f 	beq.w	8008de8 <_strtod_l+0x490>
 80090aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 fd39 	bl	800ab24 <_Bfree>
 80090b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b4:	9318      	str	r3, [sp, #96]	; 0x60
 80090b6:	f1b8 0f00 	cmp.w	r8, #0
 80090ba:	f300 808c 	bgt.w	80091d6 <_strtod_l+0x87e>
 80090be:	9b06      	ldr	r3, [sp, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dd08      	ble.n	80090d6 <_strtod_l+0x77e>
 80090c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80090c6:	9905      	ldr	r1, [sp, #20]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f001 feed 	bl	800aea8 <__pow5mult>
 80090ce:	9005      	str	r0, [sp, #20]
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f43f ae89 	beq.w	8008de8 <_strtod_l+0x490>
 80090d6:	2f00      	cmp	r7, #0
 80090d8:	dd08      	ble.n	80090ec <_strtod_l+0x794>
 80090da:	9905      	ldr	r1, [sp, #20]
 80090dc:	463a      	mov	r2, r7
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 ff3c 	bl	800af5c <__lshift>
 80090e4:	9005      	str	r0, [sp, #20]
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae7e 	beq.w	8008de8 <_strtod_l+0x490>
 80090ec:	f1b9 0f00 	cmp.w	r9, #0
 80090f0:	dd08      	ble.n	8009104 <_strtod_l+0x7ac>
 80090f2:	4631      	mov	r1, r6
 80090f4:	464a      	mov	r2, r9
 80090f6:	4620      	mov	r0, r4
 80090f8:	f001 ff30 	bl	800af5c <__lshift>
 80090fc:	4606      	mov	r6, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f ae72 	beq.w	8008de8 <_strtod_l+0x490>
 8009104:	9a05      	ldr	r2, [sp, #20]
 8009106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009108:	4620      	mov	r0, r4
 800910a:	f001 ffb3 	bl	800b074 <__mdiff>
 800910e:	4605      	mov	r5, r0
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f ae69 	beq.w	8008de8 <_strtod_l+0x490>
 8009116:	68c3      	ldr	r3, [r0, #12]
 8009118:	930b      	str	r3, [sp, #44]	; 0x2c
 800911a:	2300      	movs	r3, #0
 800911c:	60c3      	str	r3, [r0, #12]
 800911e:	4631      	mov	r1, r6
 8009120:	f001 ff8c 	bl	800b03c <__mcmp>
 8009124:	2800      	cmp	r0, #0
 8009126:	da60      	bge.n	80091ea <_strtod_l+0x892>
 8009128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912a:	ea53 030a 	orrs.w	r3, r3, sl
 800912e:	f040 8082 	bne.w	8009236 <_strtod_l+0x8de>
 8009132:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009136:	2b00      	cmp	r3, #0
 8009138:	d17d      	bne.n	8009236 <_strtod_l+0x8de>
 800913a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800913e:	0d1b      	lsrs	r3, r3, #20
 8009140:	051b      	lsls	r3, r3, #20
 8009142:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009146:	d976      	bls.n	8009236 <_strtod_l+0x8de>
 8009148:	696b      	ldr	r3, [r5, #20]
 800914a:	b913      	cbnz	r3, 8009152 <_strtod_l+0x7fa>
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	2b01      	cmp	r3, #1
 8009150:	dd71      	ble.n	8009236 <_strtod_l+0x8de>
 8009152:	4629      	mov	r1, r5
 8009154:	2201      	movs	r2, #1
 8009156:	4620      	mov	r0, r4
 8009158:	f001 ff00 	bl	800af5c <__lshift>
 800915c:	4631      	mov	r1, r6
 800915e:	4605      	mov	r5, r0
 8009160:	f001 ff6c 	bl	800b03c <__mcmp>
 8009164:	2800      	cmp	r0, #0
 8009166:	dd66      	ble.n	8009236 <_strtod_l+0x8de>
 8009168:	9904      	ldr	r1, [sp, #16]
 800916a:	4a53      	ldr	r2, [pc, #332]	; (80092b8 <_strtod_l+0x960>)
 800916c:	465b      	mov	r3, fp
 800916e:	2900      	cmp	r1, #0
 8009170:	f000 8081 	beq.w	8009276 <_strtod_l+0x91e>
 8009174:	ea02 010b 	and.w	r1, r2, fp
 8009178:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800917c:	dc7b      	bgt.n	8009276 <_strtod_l+0x91e>
 800917e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009182:	f77f aea9 	ble.w	8008ed8 <_strtod_l+0x580>
 8009186:	4b4d      	ldr	r3, [pc, #308]	; (80092bc <_strtod_l+0x964>)
 8009188:	4650      	mov	r0, sl
 800918a:	4659      	mov	r1, fp
 800918c:	2200      	movs	r2, #0
 800918e:	f7f7 fa4b 	bl	8000628 <__aeabi_dmul>
 8009192:	460b      	mov	r3, r1
 8009194:	4303      	orrs	r3, r0
 8009196:	bf08      	it	eq
 8009198:	2322      	moveq	r3, #34	; 0x22
 800919a:	4682      	mov	sl, r0
 800919c:	468b      	mov	fp, r1
 800919e:	bf08      	it	eq
 80091a0:	6023      	streq	r3, [r4, #0]
 80091a2:	e62b      	b.n	8008dfc <_strtod_l+0x4a4>
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	ea03 0a0a 	and.w	sl, r3, sl
 80091b0:	e6e3      	b.n	8008f7a <_strtod_l+0x622>
 80091b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091c2:	fa01 f308 	lsl.w	r3, r1, r8
 80091c6:	9308      	str	r3, [sp, #32]
 80091c8:	910d      	str	r1, [sp, #52]	; 0x34
 80091ca:	e746      	b.n	800905a <_strtod_l+0x702>
 80091cc:	2300      	movs	r3, #0
 80091ce:	9308      	str	r3, [sp, #32]
 80091d0:	2301      	movs	r3, #1
 80091d2:	930d      	str	r3, [sp, #52]	; 0x34
 80091d4:	e741      	b.n	800905a <_strtod_l+0x702>
 80091d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091d8:	4642      	mov	r2, r8
 80091da:	4620      	mov	r0, r4
 80091dc:	f001 febe 	bl	800af5c <__lshift>
 80091e0:	9018      	str	r0, [sp, #96]	; 0x60
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f47f af6b 	bne.w	80090be <_strtod_l+0x766>
 80091e8:	e5fe      	b.n	8008de8 <_strtod_l+0x490>
 80091ea:	465f      	mov	r7, fp
 80091ec:	d16e      	bne.n	80092cc <_strtod_l+0x974>
 80091ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80091f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f4:	b342      	cbz	r2, 8009248 <_strtod_l+0x8f0>
 80091f6:	4a32      	ldr	r2, [pc, #200]	; (80092c0 <_strtod_l+0x968>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d128      	bne.n	800924e <_strtod_l+0x8f6>
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	4651      	mov	r1, sl
 8009200:	b1eb      	cbz	r3, 800923e <_strtod_l+0x8e6>
 8009202:	4b2d      	ldr	r3, [pc, #180]	; (80092b8 <_strtod_l+0x960>)
 8009204:	403b      	ands	r3, r7
 8009206:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	d819      	bhi.n	8009244 <_strtod_l+0x8ec>
 8009210:	0d1b      	lsrs	r3, r3, #20
 8009212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	4299      	cmp	r1, r3
 800921c:	d117      	bne.n	800924e <_strtod_l+0x8f6>
 800921e:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <_strtod_l+0x96c>)
 8009220:	429f      	cmp	r7, r3
 8009222:	d102      	bne.n	800922a <_strtod_l+0x8d2>
 8009224:	3101      	adds	r1, #1
 8009226:	f43f addf 	beq.w	8008de8 <_strtod_l+0x490>
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <_strtod_l+0x960>)
 800922c:	403b      	ands	r3, r7
 800922e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009232:	f04f 0a00 	mov.w	sl, #0
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1a4      	bne.n	8009186 <_strtod_l+0x82e>
 800923c:	e5de      	b.n	8008dfc <_strtod_l+0x4a4>
 800923e:	f04f 33ff 	mov.w	r3, #4294967295
 8009242:	e7ea      	b.n	800921a <_strtod_l+0x8c2>
 8009244:	4613      	mov	r3, r2
 8009246:	e7e8      	b.n	800921a <_strtod_l+0x8c2>
 8009248:	ea53 030a 	orrs.w	r3, r3, sl
 800924c:	d08c      	beq.n	8009168 <_strtod_l+0x810>
 800924e:	9b08      	ldr	r3, [sp, #32]
 8009250:	b1db      	cbz	r3, 800928a <_strtod_l+0x932>
 8009252:	423b      	tst	r3, r7
 8009254:	d0ef      	beq.n	8009236 <_strtod_l+0x8de>
 8009256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009258:	9a04      	ldr	r2, [sp, #16]
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	b1c3      	cbz	r3, 8009292 <_strtod_l+0x93a>
 8009260:	f7ff fb5e 	bl	8008920 <sulp>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	ec51 0b18 	vmov	r0, r1, d8
 800926c:	f7f7 f826 	bl	80002bc <__adddf3>
 8009270:	4682      	mov	sl, r0
 8009272:	468b      	mov	fp, r1
 8009274:	e7df      	b.n	8009236 <_strtod_l+0x8de>
 8009276:	4013      	ands	r3, r2
 8009278:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800927c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009280:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009284:	f04f 3aff 	mov.w	sl, #4294967295
 8009288:	e7d5      	b.n	8009236 <_strtod_l+0x8de>
 800928a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800928c:	ea13 0f0a 	tst.w	r3, sl
 8009290:	e7e0      	b.n	8009254 <_strtod_l+0x8fc>
 8009292:	f7ff fb45 	bl	8008920 <sulp>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	ec51 0b18 	vmov	r0, r1, d8
 800929e:	f7f7 f80b 	bl	80002b8 <__aeabi_dsub>
 80092a2:	2200      	movs	r2, #0
 80092a4:	2300      	movs	r3, #0
 80092a6:	4682      	mov	sl, r0
 80092a8:	468b      	mov	fp, r1
 80092aa:	f7f7 fc25 	bl	8000af8 <__aeabi_dcmpeq>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d0c1      	beq.n	8009236 <_strtod_l+0x8de>
 80092b2:	e611      	b.n	8008ed8 <_strtod_l+0x580>
 80092b4:	fffffc02 	.word	0xfffffc02
 80092b8:	7ff00000 	.word	0x7ff00000
 80092bc:	39500000 	.word	0x39500000
 80092c0:	000fffff 	.word	0x000fffff
 80092c4:	7fefffff 	.word	0x7fefffff
 80092c8:	0800e978 	.word	0x0800e978
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	f002 f832 	bl	800b338 <__ratio>
 80092d4:	ec59 8b10 	vmov	r8, r9, d0
 80092d8:	ee10 0a10 	vmov	r0, s0
 80092dc:	2200      	movs	r2, #0
 80092de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc1c 	bl	8000b20 <__aeabi_dcmple>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d07a      	beq.n	80093e2 <_strtod_l+0xa8a>
 80092ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d04a      	beq.n	8009388 <_strtod_l+0xa30>
 80092f2:	4b95      	ldr	r3, [pc, #596]	; (8009548 <_strtod_l+0xbf0>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80092fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009548 <_strtod_l+0xbf0>
 80092fe:	f04f 0800 	mov.w	r8, #0
 8009302:	4b92      	ldr	r3, [pc, #584]	; (800954c <_strtod_l+0xbf4>)
 8009304:	403b      	ands	r3, r7
 8009306:	930d      	str	r3, [sp, #52]	; 0x34
 8009308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800930a:	4b91      	ldr	r3, [pc, #580]	; (8009550 <_strtod_l+0xbf8>)
 800930c:	429a      	cmp	r2, r3
 800930e:	f040 80b0 	bne.w	8009472 <_strtod_l+0xb1a>
 8009312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009316:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800931a:	ec4b ab10 	vmov	d0, sl, fp
 800931e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009322:	f001 ff31 	bl	800b188 <__ulp>
 8009326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800932a:	ec53 2b10 	vmov	r2, r3, d0
 800932e:	f7f7 f97b 	bl	8000628 <__aeabi_dmul>
 8009332:	4652      	mov	r2, sl
 8009334:	465b      	mov	r3, fp
 8009336:	f7f6 ffc1 	bl	80002bc <__adddf3>
 800933a:	460b      	mov	r3, r1
 800933c:	4983      	ldr	r1, [pc, #524]	; (800954c <_strtod_l+0xbf4>)
 800933e:	4a85      	ldr	r2, [pc, #532]	; (8009554 <_strtod_l+0xbfc>)
 8009340:	4019      	ands	r1, r3
 8009342:	4291      	cmp	r1, r2
 8009344:	4682      	mov	sl, r0
 8009346:	d960      	bls.n	800940a <_strtod_l+0xab2>
 8009348:	ee18 3a90 	vmov	r3, s17
 800934c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009350:	4293      	cmp	r3, r2
 8009352:	d104      	bne.n	800935e <_strtod_l+0xa06>
 8009354:	ee18 3a10 	vmov	r3, s16
 8009358:	3301      	adds	r3, #1
 800935a:	f43f ad45 	beq.w	8008de8 <_strtod_l+0x490>
 800935e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009560 <_strtod_l+0xc08>
 8009362:	f04f 3aff 	mov.w	sl, #4294967295
 8009366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009368:	4620      	mov	r0, r4
 800936a:	f001 fbdb 	bl	800ab24 <_Bfree>
 800936e:	9905      	ldr	r1, [sp, #20]
 8009370:	4620      	mov	r0, r4
 8009372:	f001 fbd7 	bl	800ab24 <_Bfree>
 8009376:	4631      	mov	r1, r6
 8009378:	4620      	mov	r0, r4
 800937a:	f001 fbd3 	bl	800ab24 <_Bfree>
 800937e:	4629      	mov	r1, r5
 8009380:	4620      	mov	r0, r4
 8009382:	f001 fbcf 	bl	800ab24 <_Bfree>
 8009386:	e61a      	b.n	8008fbe <_strtod_l+0x666>
 8009388:	f1ba 0f00 	cmp.w	sl, #0
 800938c:	d11b      	bne.n	80093c6 <_strtod_l+0xa6e>
 800938e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009392:	b9f3      	cbnz	r3, 80093d2 <_strtod_l+0xa7a>
 8009394:	4b6c      	ldr	r3, [pc, #432]	; (8009548 <_strtod_l+0xbf0>)
 8009396:	2200      	movs	r2, #0
 8009398:	4640      	mov	r0, r8
 800939a:	4649      	mov	r1, r9
 800939c:	f7f7 fbb6 	bl	8000b0c <__aeabi_dcmplt>
 80093a0:	b9d0      	cbnz	r0, 80093d8 <_strtod_l+0xa80>
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	4b6c      	ldr	r3, [pc, #432]	; (8009558 <_strtod_l+0xc00>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	f7f7 f93d 	bl	8000628 <__aeabi_dmul>
 80093ae:	4680      	mov	r8, r0
 80093b0:	4689      	mov	r9, r1
 80093b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80093ba:	9315      	str	r3, [sp, #84]	; 0x54
 80093bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80093c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093c4:	e79d      	b.n	8009302 <_strtod_l+0x9aa>
 80093c6:	f1ba 0f01 	cmp.w	sl, #1
 80093ca:	d102      	bne.n	80093d2 <_strtod_l+0xa7a>
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	f43f ad83 	beq.w	8008ed8 <_strtod_l+0x580>
 80093d2:	4b62      	ldr	r3, [pc, #392]	; (800955c <_strtod_l+0xc04>)
 80093d4:	2200      	movs	r2, #0
 80093d6:	e78e      	b.n	80092f6 <_strtod_l+0x99e>
 80093d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009558 <_strtod_l+0xc00>
 80093dc:	f04f 0800 	mov.w	r8, #0
 80093e0:	e7e7      	b.n	80093b2 <_strtod_l+0xa5a>
 80093e2:	4b5d      	ldr	r3, [pc, #372]	; (8009558 <_strtod_l+0xc00>)
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	2200      	movs	r2, #0
 80093ea:	f7f7 f91d 	bl	8000628 <__aeabi_dmul>
 80093ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f0:	4680      	mov	r8, r0
 80093f2:	4689      	mov	r9, r1
 80093f4:	b933      	cbnz	r3, 8009404 <_strtod_l+0xaac>
 80093f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093fa:	900e      	str	r0, [sp, #56]	; 0x38
 80093fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80093fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009402:	e7dd      	b.n	80093c0 <_strtod_l+0xa68>
 8009404:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009408:	e7f9      	b.n	80093fe <_strtod_l+0xaa6>
 800940a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1a8      	bne.n	8009366 <_strtod_l+0xa0e>
 8009414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800941a:	0d1b      	lsrs	r3, r3, #20
 800941c:	051b      	lsls	r3, r3, #20
 800941e:	429a      	cmp	r2, r3
 8009420:	d1a1      	bne.n	8009366 <_strtod_l+0xa0e>
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 fc5f 	bl	8000ce8 <__aeabi_d2lz>
 800942a:	f7f7 f8cf 	bl	80005cc <__aeabi_l2d>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4640      	mov	r0, r8
 8009434:	4649      	mov	r1, r9
 8009436:	f7f6 ff3f 	bl	80002b8 <__aeabi_dsub>
 800943a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800943c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009440:	ea43 030a 	orr.w	r3, r3, sl
 8009444:	4313      	orrs	r3, r2
 8009446:	4680      	mov	r8, r0
 8009448:	4689      	mov	r9, r1
 800944a:	d055      	beq.n	80094f8 <_strtod_l+0xba0>
 800944c:	a336      	add	r3, pc, #216	; (adr r3, 8009528 <_strtod_l+0xbd0>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 fb5b 	bl	8000b0c <__aeabi_dcmplt>
 8009456:	2800      	cmp	r0, #0
 8009458:	f47f acd0 	bne.w	8008dfc <_strtod_l+0x4a4>
 800945c:	a334      	add	r3, pc, #208	; (adr r3, 8009530 <_strtod_l+0xbd8>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	4640      	mov	r0, r8
 8009464:	4649      	mov	r1, r9
 8009466:	f7f7 fb6f 	bl	8000b48 <__aeabi_dcmpgt>
 800946a:	2800      	cmp	r0, #0
 800946c:	f43f af7b 	beq.w	8009366 <_strtod_l+0xa0e>
 8009470:	e4c4      	b.n	8008dfc <_strtod_l+0x4a4>
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	b333      	cbz	r3, 80094c4 <_strtod_l+0xb6c>
 8009476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009478:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800947c:	d822      	bhi.n	80094c4 <_strtod_l+0xb6c>
 800947e:	a32e      	add	r3, pc, #184	; (adr r3, 8009538 <_strtod_l+0xbe0>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	4640      	mov	r0, r8
 8009486:	4649      	mov	r1, r9
 8009488:	f7f7 fb4a 	bl	8000b20 <__aeabi_dcmple>
 800948c:	b1a0      	cbz	r0, 80094b8 <_strtod_l+0xb60>
 800948e:	4649      	mov	r1, r9
 8009490:	4640      	mov	r0, r8
 8009492:	f7f7 fba1 	bl	8000bd8 <__aeabi_d2uiz>
 8009496:	2801      	cmp	r0, #1
 8009498:	bf38      	it	cc
 800949a:	2001      	movcc	r0, #1
 800949c:	f7f7 f84a 	bl	8000534 <__aeabi_ui2d>
 80094a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a2:	4680      	mov	r8, r0
 80094a4:	4689      	mov	r9, r1
 80094a6:	bb23      	cbnz	r3, 80094f2 <_strtod_l+0xb9a>
 80094a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ac:	9010      	str	r0, [sp, #64]	; 0x40
 80094ae:	9311      	str	r3, [sp, #68]	; 0x44
 80094b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	9309      	str	r3, [sp, #36]	; 0x24
 80094c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094c8:	eeb0 0a48 	vmov.f32	s0, s16
 80094cc:	eef0 0a68 	vmov.f32	s1, s17
 80094d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094d4:	f001 fe58 	bl	800b188 <__ulp>
 80094d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094dc:	ec53 2b10 	vmov	r2, r3, d0
 80094e0:	f7f7 f8a2 	bl	8000628 <__aeabi_dmul>
 80094e4:	ec53 2b18 	vmov	r2, r3, d8
 80094e8:	f7f6 fee8 	bl	80002bc <__adddf3>
 80094ec:	4682      	mov	sl, r0
 80094ee:	468b      	mov	fp, r1
 80094f0:	e78d      	b.n	800940e <_strtod_l+0xab6>
 80094f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80094f6:	e7db      	b.n	80094b0 <_strtod_l+0xb58>
 80094f8:	a311      	add	r3, pc, #68	; (adr r3, 8009540 <_strtod_l+0xbe8>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f7 fb05 	bl	8000b0c <__aeabi_dcmplt>
 8009502:	e7b2      	b.n	800946a <_strtod_l+0xb12>
 8009504:	2300      	movs	r3, #0
 8009506:	930a      	str	r3, [sp, #40]	; 0x28
 8009508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800950a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	f7ff ba6b 	b.w	80089e8 <_strtod_l+0x90>
 8009512:	2a65      	cmp	r2, #101	; 0x65
 8009514:	f43f ab5f 	beq.w	8008bd6 <_strtod_l+0x27e>
 8009518:	2a45      	cmp	r2, #69	; 0x45
 800951a:	f43f ab5c 	beq.w	8008bd6 <_strtod_l+0x27e>
 800951e:	2301      	movs	r3, #1
 8009520:	f7ff bb94 	b.w	8008c4c <_strtod_l+0x2f4>
 8009524:	f3af 8000 	nop.w
 8009528:	94a03595 	.word	0x94a03595
 800952c:	3fdfffff 	.word	0x3fdfffff
 8009530:	35afe535 	.word	0x35afe535
 8009534:	3fe00000 	.word	0x3fe00000
 8009538:	ffc00000 	.word	0xffc00000
 800953c:	41dfffff 	.word	0x41dfffff
 8009540:	94a03595 	.word	0x94a03595
 8009544:	3fcfffff 	.word	0x3fcfffff
 8009548:	3ff00000 	.word	0x3ff00000
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	7fe00000 	.word	0x7fe00000
 8009554:	7c9fffff 	.word	0x7c9fffff
 8009558:	3fe00000 	.word	0x3fe00000
 800955c:	bff00000 	.word	0xbff00000
 8009560:	7fefffff 	.word	0x7fefffff

08009564 <_strtod_r>:
 8009564:	4b01      	ldr	r3, [pc, #4]	; (800956c <_strtod_r+0x8>)
 8009566:	f7ff b9f7 	b.w	8008958 <_strtod_l>
 800956a:	bf00      	nop
 800956c:	20000084 	.word	0x20000084

08009570 <_strtol_l.constprop.0>:
 8009570:	2b01      	cmp	r3, #1
 8009572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009576:	d001      	beq.n	800957c <_strtol_l.constprop.0+0xc>
 8009578:	2b24      	cmp	r3, #36	; 0x24
 800957a:	d906      	bls.n	800958a <_strtol_l.constprop.0+0x1a>
 800957c:	f7fe fafe 	bl	8007b7c <__errno>
 8009580:	2316      	movs	r3, #22
 8009582:	6003      	str	r3, [r0, #0]
 8009584:	2000      	movs	r0, #0
 8009586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009670 <_strtol_l.constprop.0+0x100>
 800958e:	460d      	mov	r5, r1
 8009590:	462e      	mov	r6, r5
 8009592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009596:	f814 700c 	ldrb.w	r7, [r4, ip]
 800959a:	f017 0708 	ands.w	r7, r7, #8
 800959e:	d1f7      	bne.n	8009590 <_strtol_l.constprop.0+0x20>
 80095a0:	2c2d      	cmp	r4, #45	; 0x2d
 80095a2:	d132      	bne.n	800960a <_strtol_l.constprop.0+0x9a>
 80095a4:	782c      	ldrb	r4, [r5, #0]
 80095a6:	2701      	movs	r7, #1
 80095a8:	1cb5      	adds	r5, r6, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d05b      	beq.n	8009666 <_strtol_l.constprop.0+0xf6>
 80095ae:	2b10      	cmp	r3, #16
 80095b0:	d109      	bne.n	80095c6 <_strtol_l.constprop.0+0x56>
 80095b2:	2c30      	cmp	r4, #48	; 0x30
 80095b4:	d107      	bne.n	80095c6 <_strtol_l.constprop.0+0x56>
 80095b6:	782c      	ldrb	r4, [r5, #0]
 80095b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095bc:	2c58      	cmp	r4, #88	; 0x58
 80095be:	d14d      	bne.n	800965c <_strtol_l.constprop.0+0xec>
 80095c0:	786c      	ldrb	r4, [r5, #1]
 80095c2:	2310      	movs	r3, #16
 80095c4:	3502      	adds	r5, #2
 80095c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80095ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80095ce:	f04f 0c00 	mov.w	ip, #0
 80095d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80095d6:	4666      	mov	r6, ip
 80095d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80095dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80095e0:	f1be 0f09 	cmp.w	lr, #9
 80095e4:	d816      	bhi.n	8009614 <_strtol_l.constprop.0+0xa4>
 80095e6:	4674      	mov	r4, lr
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	dd24      	ble.n	8009636 <_strtol_l.constprop.0+0xc6>
 80095ec:	f1bc 0f00 	cmp.w	ip, #0
 80095f0:	db1e      	blt.n	8009630 <_strtol_l.constprop.0+0xc0>
 80095f2:	45b1      	cmp	r9, r6
 80095f4:	d31c      	bcc.n	8009630 <_strtol_l.constprop.0+0xc0>
 80095f6:	d101      	bne.n	80095fc <_strtol_l.constprop.0+0x8c>
 80095f8:	45a2      	cmp	sl, r4
 80095fa:	db19      	blt.n	8009630 <_strtol_l.constprop.0+0xc0>
 80095fc:	fb06 4603 	mla	r6, r6, r3, r4
 8009600:	f04f 0c01 	mov.w	ip, #1
 8009604:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009608:	e7e8      	b.n	80095dc <_strtol_l.constprop.0+0x6c>
 800960a:	2c2b      	cmp	r4, #43	; 0x2b
 800960c:	bf04      	itt	eq
 800960e:	782c      	ldrbeq	r4, [r5, #0]
 8009610:	1cb5      	addeq	r5, r6, #2
 8009612:	e7ca      	b.n	80095aa <_strtol_l.constprop.0+0x3a>
 8009614:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009618:	f1be 0f19 	cmp.w	lr, #25
 800961c:	d801      	bhi.n	8009622 <_strtol_l.constprop.0+0xb2>
 800961e:	3c37      	subs	r4, #55	; 0x37
 8009620:	e7e2      	b.n	80095e8 <_strtol_l.constprop.0+0x78>
 8009622:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009626:	f1be 0f19 	cmp.w	lr, #25
 800962a:	d804      	bhi.n	8009636 <_strtol_l.constprop.0+0xc6>
 800962c:	3c57      	subs	r4, #87	; 0x57
 800962e:	e7db      	b.n	80095e8 <_strtol_l.constprop.0+0x78>
 8009630:	f04f 3cff 	mov.w	ip, #4294967295
 8009634:	e7e6      	b.n	8009604 <_strtol_l.constprop.0+0x94>
 8009636:	f1bc 0f00 	cmp.w	ip, #0
 800963a:	da05      	bge.n	8009648 <_strtol_l.constprop.0+0xd8>
 800963c:	2322      	movs	r3, #34	; 0x22
 800963e:	6003      	str	r3, [r0, #0]
 8009640:	4646      	mov	r6, r8
 8009642:	b942      	cbnz	r2, 8009656 <_strtol_l.constprop.0+0xe6>
 8009644:	4630      	mov	r0, r6
 8009646:	e79e      	b.n	8009586 <_strtol_l.constprop.0+0x16>
 8009648:	b107      	cbz	r7, 800964c <_strtol_l.constprop.0+0xdc>
 800964a:	4276      	negs	r6, r6
 800964c:	2a00      	cmp	r2, #0
 800964e:	d0f9      	beq.n	8009644 <_strtol_l.constprop.0+0xd4>
 8009650:	f1bc 0f00 	cmp.w	ip, #0
 8009654:	d000      	beq.n	8009658 <_strtol_l.constprop.0+0xe8>
 8009656:	1e69      	subs	r1, r5, #1
 8009658:	6011      	str	r1, [r2, #0]
 800965a:	e7f3      	b.n	8009644 <_strtol_l.constprop.0+0xd4>
 800965c:	2430      	movs	r4, #48	; 0x30
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1b1      	bne.n	80095c6 <_strtol_l.constprop.0+0x56>
 8009662:	2308      	movs	r3, #8
 8009664:	e7af      	b.n	80095c6 <_strtol_l.constprop.0+0x56>
 8009666:	2c30      	cmp	r4, #48	; 0x30
 8009668:	d0a5      	beq.n	80095b6 <_strtol_l.constprop.0+0x46>
 800966a:	230a      	movs	r3, #10
 800966c:	e7ab      	b.n	80095c6 <_strtol_l.constprop.0+0x56>
 800966e:	bf00      	nop
 8009670:	0800e9a1 	.word	0x0800e9a1

08009674 <_strtol_r>:
 8009674:	f7ff bf7c 	b.w	8009570 <_strtol_l.constprop.0>

08009678 <quorem>:
 8009678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	6903      	ldr	r3, [r0, #16]
 800967e:	690c      	ldr	r4, [r1, #16]
 8009680:	42a3      	cmp	r3, r4
 8009682:	4607      	mov	r7, r0
 8009684:	f2c0 8081 	blt.w	800978a <quorem+0x112>
 8009688:	3c01      	subs	r4, #1
 800968a:	f101 0814 	add.w	r8, r1, #20
 800968e:	f100 0514 	add.w	r5, r0, #20
 8009692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800969c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096a0:	3301      	adds	r3, #1
 80096a2:	429a      	cmp	r2, r3
 80096a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80096b0:	d331      	bcc.n	8009716 <quorem+0x9e>
 80096b2:	f04f 0e00 	mov.w	lr, #0
 80096b6:	4640      	mov	r0, r8
 80096b8:	46ac      	mov	ip, r5
 80096ba:	46f2      	mov	sl, lr
 80096bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096c0:	b293      	uxth	r3, r2
 80096c2:	fb06 e303 	mla	r3, r6, r3, lr
 80096c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	ebaa 0303 	sub.w	r3, sl, r3
 80096d0:	f8dc a000 	ldr.w	sl, [ip]
 80096d4:	0c12      	lsrs	r2, r2, #16
 80096d6:	fa13 f38a 	uxtah	r3, r3, sl
 80096da:	fb06 e202 	mla	r2, r6, r2, lr
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	9b00      	ldr	r3, [sp, #0]
 80096e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096e6:	b292      	uxth	r2, r2
 80096e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80096ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80096f4:	4581      	cmp	r9, r0
 80096f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096fa:	f84c 3b04 	str.w	r3, [ip], #4
 80096fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009702:	d2db      	bcs.n	80096bc <quorem+0x44>
 8009704:	f855 300b 	ldr.w	r3, [r5, fp]
 8009708:	b92b      	cbnz	r3, 8009716 <quorem+0x9e>
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	3b04      	subs	r3, #4
 800970e:	429d      	cmp	r5, r3
 8009710:	461a      	mov	r2, r3
 8009712:	d32e      	bcc.n	8009772 <quorem+0xfa>
 8009714:	613c      	str	r4, [r7, #16]
 8009716:	4638      	mov	r0, r7
 8009718:	f001 fc90 	bl	800b03c <__mcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	db24      	blt.n	800976a <quorem+0xf2>
 8009720:	3601      	adds	r6, #1
 8009722:	4628      	mov	r0, r5
 8009724:	f04f 0c00 	mov.w	ip, #0
 8009728:	f858 2b04 	ldr.w	r2, [r8], #4
 800972c:	f8d0 e000 	ldr.w	lr, [r0]
 8009730:	b293      	uxth	r3, r2
 8009732:	ebac 0303 	sub.w	r3, ip, r3
 8009736:	0c12      	lsrs	r2, r2, #16
 8009738:	fa13 f38e 	uxtah	r3, r3, lr
 800973c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009744:	b29b      	uxth	r3, r3
 8009746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974a:	45c1      	cmp	r9, r8
 800974c:	f840 3b04 	str.w	r3, [r0], #4
 8009750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009754:	d2e8      	bcs.n	8009728 <quorem+0xb0>
 8009756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800975a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800975e:	b922      	cbnz	r2, 800976a <quorem+0xf2>
 8009760:	3b04      	subs	r3, #4
 8009762:	429d      	cmp	r5, r3
 8009764:	461a      	mov	r2, r3
 8009766:	d30a      	bcc.n	800977e <quorem+0x106>
 8009768:	613c      	str	r4, [r7, #16]
 800976a:	4630      	mov	r0, r6
 800976c:	b003      	add	sp, #12
 800976e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009772:	6812      	ldr	r2, [r2, #0]
 8009774:	3b04      	subs	r3, #4
 8009776:	2a00      	cmp	r2, #0
 8009778:	d1cc      	bne.n	8009714 <quorem+0x9c>
 800977a:	3c01      	subs	r4, #1
 800977c:	e7c7      	b.n	800970e <quorem+0x96>
 800977e:	6812      	ldr	r2, [r2, #0]
 8009780:	3b04      	subs	r3, #4
 8009782:	2a00      	cmp	r2, #0
 8009784:	d1f0      	bne.n	8009768 <quorem+0xf0>
 8009786:	3c01      	subs	r4, #1
 8009788:	e7eb      	b.n	8009762 <quorem+0xea>
 800978a:	2000      	movs	r0, #0
 800978c:	e7ee      	b.n	800976c <quorem+0xf4>
	...

08009790 <_dtoa_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	ed2d 8b04 	vpush	{d8-d9}
 8009798:	ec57 6b10 	vmov	r6, r7, d0
 800979c:	b093      	sub	sp, #76	; 0x4c
 800979e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097a4:	9106      	str	r1, [sp, #24]
 80097a6:	ee10 aa10 	vmov	sl, s0
 80097aa:	4604      	mov	r4, r0
 80097ac:	9209      	str	r2, [sp, #36]	; 0x24
 80097ae:	930c      	str	r3, [sp, #48]	; 0x30
 80097b0:	46bb      	mov	fp, r7
 80097b2:	b975      	cbnz	r5, 80097d2 <_dtoa_r+0x42>
 80097b4:	2010      	movs	r0, #16
 80097b6:	f001 f94d 	bl	800aa54 <malloc>
 80097ba:	4602      	mov	r2, r0
 80097bc:	6260      	str	r0, [r4, #36]	; 0x24
 80097be:	b920      	cbnz	r0, 80097ca <_dtoa_r+0x3a>
 80097c0:	4ba7      	ldr	r3, [pc, #668]	; (8009a60 <_dtoa_r+0x2d0>)
 80097c2:	21ea      	movs	r1, #234	; 0xea
 80097c4:	48a7      	ldr	r0, [pc, #668]	; (8009a64 <_dtoa_r+0x2d4>)
 80097c6:	f002 f8bd 	bl	800b944 <__assert_func>
 80097ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097ce:	6005      	str	r5, [r0, #0]
 80097d0:	60c5      	str	r5, [r0, #12]
 80097d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d4:	6819      	ldr	r1, [r3, #0]
 80097d6:	b151      	cbz	r1, 80097ee <_dtoa_r+0x5e>
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	604a      	str	r2, [r1, #4]
 80097dc:	2301      	movs	r3, #1
 80097de:	4093      	lsls	r3, r2
 80097e0:	608b      	str	r3, [r1, #8]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f001 f99e 	bl	800ab24 <_Bfree>
 80097e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	1e3b      	subs	r3, r7, #0
 80097f0:	bfaa      	itet	ge
 80097f2:	2300      	movge	r3, #0
 80097f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80097f8:	f8c8 3000 	strge.w	r3, [r8]
 80097fc:	4b9a      	ldr	r3, [pc, #616]	; (8009a68 <_dtoa_r+0x2d8>)
 80097fe:	bfbc      	itt	lt
 8009800:	2201      	movlt	r2, #1
 8009802:	f8c8 2000 	strlt.w	r2, [r8]
 8009806:	ea33 030b 	bics.w	r3, r3, fp
 800980a:	d11b      	bne.n	8009844 <_dtoa_r+0xb4>
 800980c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800980e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009818:	4333      	orrs	r3, r6
 800981a:	f000 8592 	beq.w	800a342 <_dtoa_r+0xbb2>
 800981e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009820:	b963      	cbnz	r3, 800983c <_dtoa_r+0xac>
 8009822:	4b92      	ldr	r3, [pc, #584]	; (8009a6c <_dtoa_r+0x2dc>)
 8009824:	e022      	b.n	800986c <_dtoa_r+0xdc>
 8009826:	4b92      	ldr	r3, [pc, #584]	; (8009a70 <_dtoa_r+0x2e0>)
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	3308      	adds	r3, #8
 800982c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	9801      	ldr	r0, [sp, #4]
 8009832:	b013      	add	sp, #76	; 0x4c
 8009834:	ecbd 8b04 	vpop	{d8-d9}
 8009838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983c:	4b8b      	ldr	r3, [pc, #556]	; (8009a6c <_dtoa_r+0x2dc>)
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	3303      	adds	r3, #3
 8009842:	e7f3      	b.n	800982c <_dtoa_r+0x9c>
 8009844:	2200      	movs	r2, #0
 8009846:	2300      	movs	r3, #0
 8009848:	4650      	mov	r0, sl
 800984a:	4659      	mov	r1, fp
 800984c:	f7f7 f954 	bl	8000af8 <__aeabi_dcmpeq>
 8009850:	ec4b ab19 	vmov	d9, sl, fp
 8009854:	4680      	mov	r8, r0
 8009856:	b158      	cbz	r0, 8009870 <_dtoa_r+0xe0>
 8009858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800985a:	2301      	movs	r3, #1
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 856b 	beq.w	800a33c <_dtoa_r+0xbac>
 8009866:	4883      	ldr	r0, [pc, #524]	; (8009a74 <_dtoa_r+0x2e4>)
 8009868:	6018      	str	r0, [r3, #0]
 800986a:	1e43      	subs	r3, r0, #1
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	e7df      	b.n	8009830 <_dtoa_r+0xa0>
 8009870:	ec4b ab10 	vmov	d0, sl, fp
 8009874:	aa10      	add	r2, sp, #64	; 0x40
 8009876:	a911      	add	r1, sp, #68	; 0x44
 8009878:	4620      	mov	r0, r4
 800987a:	f001 fd01 	bl	800b280 <__d2b>
 800987e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009882:	ee08 0a10 	vmov	s16, r0
 8009886:	2d00      	cmp	r5, #0
 8009888:	f000 8084 	beq.w	8009994 <_dtoa_r+0x204>
 800988c:	ee19 3a90 	vmov	r3, s19
 8009890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009894:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009898:	4656      	mov	r6, sl
 800989a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800989e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098a6:	4b74      	ldr	r3, [pc, #464]	; (8009a78 <_dtoa_r+0x2e8>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f6 fd03 	bl	80002b8 <__aeabi_dsub>
 80098b2:	a365      	add	r3, pc, #404	; (adr r3, 8009a48 <_dtoa_r+0x2b8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 feb6 	bl	8000628 <__aeabi_dmul>
 80098bc:	a364      	add	r3, pc, #400	; (adr r3, 8009a50 <_dtoa_r+0x2c0>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fcfb 	bl	80002bc <__adddf3>
 80098c6:	4606      	mov	r6, r0
 80098c8:	4628      	mov	r0, r5
 80098ca:	460f      	mov	r7, r1
 80098cc:	f7f6 fe42 	bl	8000554 <__aeabi_i2d>
 80098d0:	a361      	add	r3, pc, #388	; (adr r3, 8009a58 <_dtoa_r+0x2c8>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f7f6 fea7 	bl	8000628 <__aeabi_dmul>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fceb 	bl	80002bc <__adddf3>
 80098e6:	4606      	mov	r6, r0
 80098e8:	460f      	mov	r7, r1
 80098ea:	f7f7 f94d 	bl	8000b88 <__aeabi_d2iz>
 80098ee:	2200      	movs	r2, #0
 80098f0:	9000      	str	r0, [sp, #0]
 80098f2:	2300      	movs	r3, #0
 80098f4:	4630      	mov	r0, r6
 80098f6:	4639      	mov	r1, r7
 80098f8:	f7f7 f908 	bl	8000b0c <__aeabi_dcmplt>
 80098fc:	b150      	cbz	r0, 8009914 <_dtoa_r+0x184>
 80098fe:	9800      	ldr	r0, [sp, #0]
 8009900:	f7f6 fe28 	bl	8000554 <__aeabi_i2d>
 8009904:	4632      	mov	r2, r6
 8009906:	463b      	mov	r3, r7
 8009908:	f7f7 f8f6 	bl	8000af8 <__aeabi_dcmpeq>
 800990c:	b910      	cbnz	r0, 8009914 <_dtoa_r+0x184>
 800990e:	9b00      	ldr	r3, [sp, #0]
 8009910:	3b01      	subs	r3, #1
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	2b16      	cmp	r3, #22
 8009918:	d85a      	bhi.n	80099d0 <_dtoa_r+0x240>
 800991a:	9a00      	ldr	r2, [sp, #0]
 800991c:	4b57      	ldr	r3, [pc, #348]	; (8009a7c <_dtoa_r+0x2ec>)
 800991e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	ec51 0b19 	vmov	r0, r1, d9
 800992a:	f7f7 f8ef 	bl	8000b0c <__aeabi_dcmplt>
 800992e:	2800      	cmp	r0, #0
 8009930:	d050      	beq.n	80099d4 <_dtoa_r+0x244>
 8009932:	9b00      	ldr	r3, [sp, #0]
 8009934:	3b01      	subs	r3, #1
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	2300      	movs	r3, #0
 800993a:	930b      	str	r3, [sp, #44]	; 0x2c
 800993c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800993e:	1b5d      	subs	r5, r3, r5
 8009940:	1e6b      	subs	r3, r5, #1
 8009942:	9305      	str	r3, [sp, #20]
 8009944:	bf45      	ittet	mi
 8009946:	f1c5 0301 	rsbmi	r3, r5, #1
 800994a:	9304      	strmi	r3, [sp, #16]
 800994c:	2300      	movpl	r3, #0
 800994e:	2300      	movmi	r3, #0
 8009950:	bf4c      	ite	mi
 8009952:	9305      	strmi	r3, [sp, #20]
 8009954:	9304      	strpl	r3, [sp, #16]
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	db3d      	blt.n	80099d8 <_dtoa_r+0x248>
 800995c:	9b05      	ldr	r3, [sp, #20]
 800995e:	9a00      	ldr	r2, [sp, #0]
 8009960:	920a      	str	r2, [sp, #40]	; 0x28
 8009962:	4413      	add	r3, r2
 8009964:	9305      	str	r3, [sp, #20]
 8009966:	2300      	movs	r3, #0
 8009968:	9307      	str	r3, [sp, #28]
 800996a:	9b06      	ldr	r3, [sp, #24]
 800996c:	2b09      	cmp	r3, #9
 800996e:	f200 8089 	bhi.w	8009a84 <_dtoa_r+0x2f4>
 8009972:	2b05      	cmp	r3, #5
 8009974:	bfc4      	itt	gt
 8009976:	3b04      	subgt	r3, #4
 8009978:	9306      	strgt	r3, [sp, #24]
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	f1a3 0302 	sub.w	r3, r3, #2
 8009980:	bfcc      	ite	gt
 8009982:	2500      	movgt	r5, #0
 8009984:	2501      	movle	r5, #1
 8009986:	2b03      	cmp	r3, #3
 8009988:	f200 8087 	bhi.w	8009a9a <_dtoa_r+0x30a>
 800998c:	e8df f003 	tbb	[pc, r3]
 8009990:	59383a2d 	.word	0x59383a2d
 8009994:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009998:	441d      	add	r5, r3
 800999a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800999e:	2b20      	cmp	r3, #32
 80099a0:	bfc1      	itttt	gt
 80099a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80099ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099b2:	bfda      	itte	le
 80099b4:	f1c3 0320 	rsble	r3, r3, #32
 80099b8:	fa06 f003 	lslle.w	r0, r6, r3
 80099bc:	4318      	orrgt	r0, r3
 80099be:	f7f6 fdb9 	bl	8000534 <__aeabi_ui2d>
 80099c2:	2301      	movs	r3, #1
 80099c4:	4606      	mov	r6, r0
 80099c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099ca:	3d01      	subs	r5, #1
 80099cc:	930e      	str	r3, [sp, #56]	; 0x38
 80099ce:	e76a      	b.n	80098a6 <_dtoa_r+0x116>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e7b2      	b.n	800993a <_dtoa_r+0x1aa>
 80099d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80099d6:	e7b1      	b.n	800993c <_dtoa_r+0x1ac>
 80099d8:	9b04      	ldr	r3, [sp, #16]
 80099da:	9a00      	ldr	r2, [sp, #0]
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	4253      	negs	r3, r2
 80099e2:	9307      	str	r3, [sp, #28]
 80099e4:	2300      	movs	r3, #0
 80099e6:	930a      	str	r3, [sp, #40]	; 0x28
 80099e8:	e7bf      	b.n	800996a <_dtoa_r+0x1da>
 80099ea:	2300      	movs	r3, #0
 80099ec:	9308      	str	r3, [sp, #32]
 80099ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	dc55      	bgt.n	8009aa0 <_dtoa_r+0x310>
 80099f4:	2301      	movs	r3, #1
 80099f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80099fa:	461a      	mov	r2, r3
 80099fc:	9209      	str	r2, [sp, #36]	; 0x24
 80099fe:	e00c      	b.n	8009a1a <_dtoa_r+0x28a>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e7f3      	b.n	80099ec <_dtoa_r+0x25c>
 8009a04:	2300      	movs	r3, #0
 8009a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a08:	9308      	str	r3, [sp, #32]
 8009a0a:	9b00      	ldr	r3, [sp, #0]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	9302      	str	r3, [sp, #8]
 8009a10:	3301      	adds	r3, #1
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	9303      	str	r3, [sp, #12]
 8009a16:	bfb8      	it	lt
 8009a18:	2301      	movlt	r3, #1
 8009a1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	6042      	str	r2, [r0, #4]
 8009a20:	2204      	movs	r2, #4
 8009a22:	f102 0614 	add.w	r6, r2, #20
 8009a26:	429e      	cmp	r6, r3
 8009a28:	6841      	ldr	r1, [r0, #4]
 8009a2a:	d93d      	bls.n	8009aa8 <_dtoa_r+0x318>
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	f001 f839 	bl	800aaa4 <_Balloc>
 8009a32:	9001      	str	r0, [sp, #4]
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d13b      	bne.n	8009ab0 <_dtoa_r+0x320>
 8009a38:	4b11      	ldr	r3, [pc, #68]	; (8009a80 <_dtoa_r+0x2f0>)
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a40:	e6c0      	b.n	80097c4 <_dtoa_r+0x34>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e7df      	b.n	8009a06 <_dtoa_r+0x276>
 8009a46:	bf00      	nop
 8009a48:	636f4361 	.word	0x636f4361
 8009a4c:	3fd287a7 	.word	0x3fd287a7
 8009a50:	8b60c8b3 	.word	0x8b60c8b3
 8009a54:	3fc68a28 	.word	0x3fc68a28
 8009a58:	509f79fb 	.word	0x509f79fb
 8009a5c:	3fd34413 	.word	0x3fd34413
 8009a60:	0800eaae 	.word	0x0800eaae
 8009a64:	0800eac5 	.word	0x0800eac5
 8009a68:	7ff00000 	.word	0x7ff00000
 8009a6c:	0800eaaa 	.word	0x0800eaaa
 8009a70:	0800eaa1 	.word	0x0800eaa1
 8009a74:	0800e921 	.word	0x0800e921
 8009a78:	3ff80000 	.word	0x3ff80000
 8009a7c:	0800ec30 	.word	0x0800ec30
 8009a80:	0800eb20 	.word	0x0800eb20
 8009a84:	2501      	movs	r5, #1
 8009a86:	2300      	movs	r3, #0
 8009a88:	9306      	str	r3, [sp, #24]
 8009a8a:	9508      	str	r5, [sp, #32]
 8009a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009a90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2312      	movs	r3, #18
 8009a98:	e7b0      	b.n	80099fc <_dtoa_r+0x26c>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	9308      	str	r3, [sp, #32]
 8009a9e:	e7f5      	b.n	8009a8c <_dtoa_r+0x2fc>
 8009aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aa6:	e7b8      	b.n	8009a1a <_dtoa_r+0x28a>
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	6041      	str	r1, [r0, #4]
 8009aac:	0052      	lsls	r2, r2, #1
 8009aae:	e7b8      	b.n	8009a22 <_dtoa_r+0x292>
 8009ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab2:	9a01      	ldr	r2, [sp, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	2b0e      	cmp	r3, #14
 8009aba:	f200 809d 	bhi.w	8009bf8 <_dtoa_r+0x468>
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	f000 809a 	beq.w	8009bf8 <_dtoa_r+0x468>
 8009ac4:	9b00      	ldr	r3, [sp, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	dd32      	ble.n	8009b30 <_dtoa_r+0x3a0>
 8009aca:	4ab7      	ldr	r2, [pc, #732]	; (8009da8 <_dtoa_r+0x618>)
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	05d8      	lsls	r0, r3, #23
 8009adc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009ae0:	d516      	bpl.n	8009b10 <_dtoa_r+0x380>
 8009ae2:	4bb2      	ldr	r3, [pc, #712]	; (8009dac <_dtoa_r+0x61c>)
 8009ae4:	ec51 0b19 	vmov	r0, r1, d9
 8009ae8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009aec:	f7f6 fec6 	bl	800087c <__aeabi_ddiv>
 8009af0:	f007 070f 	and.w	r7, r7, #15
 8009af4:	4682      	mov	sl, r0
 8009af6:	468b      	mov	fp, r1
 8009af8:	2503      	movs	r5, #3
 8009afa:	4eac      	ldr	r6, [pc, #688]	; (8009dac <_dtoa_r+0x61c>)
 8009afc:	b957      	cbnz	r7, 8009b14 <_dtoa_r+0x384>
 8009afe:	4642      	mov	r2, r8
 8009b00:	464b      	mov	r3, r9
 8009b02:	4650      	mov	r0, sl
 8009b04:	4659      	mov	r1, fp
 8009b06:	f7f6 feb9 	bl	800087c <__aeabi_ddiv>
 8009b0a:	4682      	mov	sl, r0
 8009b0c:	468b      	mov	fp, r1
 8009b0e:	e028      	b.n	8009b62 <_dtoa_r+0x3d2>
 8009b10:	2502      	movs	r5, #2
 8009b12:	e7f2      	b.n	8009afa <_dtoa_r+0x36a>
 8009b14:	07f9      	lsls	r1, r7, #31
 8009b16:	d508      	bpl.n	8009b2a <_dtoa_r+0x39a>
 8009b18:	4640      	mov	r0, r8
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b20:	f7f6 fd82 	bl	8000628 <__aeabi_dmul>
 8009b24:	3501      	adds	r5, #1
 8009b26:	4680      	mov	r8, r0
 8009b28:	4689      	mov	r9, r1
 8009b2a:	107f      	asrs	r7, r7, #1
 8009b2c:	3608      	adds	r6, #8
 8009b2e:	e7e5      	b.n	8009afc <_dtoa_r+0x36c>
 8009b30:	f000 809b 	beq.w	8009c6a <_dtoa_r+0x4da>
 8009b34:	9b00      	ldr	r3, [sp, #0]
 8009b36:	4f9d      	ldr	r7, [pc, #628]	; (8009dac <_dtoa_r+0x61c>)
 8009b38:	425e      	negs	r6, r3
 8009b3a:	4b9b      	ldr	r3, [pc, #620]	; (8009da8 <_dtoa_r+0x618>)
 8009b3c:	f006 020f 	and.w	r2, r6, #15
 8009b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	ec51 0b19 	vmov	r0, r1, d9
 8009b4c:	f7f6 fd6c 	bl	8000628 <__aeabi_dmul>
 8009b50:	1136      	asrs	r6, r6, #4
 8009b52:	4682      	mov	sl, r0
 8009b54:	468b      	mov	fp, r1
 8009b56:	2300      	movs	r3, #0
 8009b58:	2502      	movs	r5, #2
 8009b5a:	2e00      	cmp	r6, #0
 8009b5c:	d17a      	bne.n	8009c54 <_dtoa_r+0x4c4>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1d3      	bne.n	8009b0a <_dtoa_r+0x37a>
 8009b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 8082 	beq.w	8009c6e <_dtoa_r+0x4de>
 8009b6a:	4b91      	ldr	r3, [pc, #580]	; (8009db0 <_dtoa_r+0x620>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4650      	mov	r0, sl
 8009b70:	4659      	mov	r1, fp
 8009b72:	f7f6 ffcb 	bl	8000b0c <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d079      	beq.n	8009c6e <_dtoa_r+0x4de>
 8009b7a:	9b03      	ldr	r3, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d076      	beq.n	8009c6e <_dtoa_r+0x4de>
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	dd36      	ble.n	8009bf4 <_dtoa_r+0x464>
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	4650      	mov	r0, sl
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	1e5f      	subs	r7, r3, #1
 8009b8e:	2200      	movs	r2, #0
 8009b90:	4b88      	ldr	r3, [pc, #544]	; (8009db4 <_dtoa_r+0x624>)
 8009b92:	f7f6 fd49 	bl	8000628 <__aeabi_dmul>
 8009b96:	9e02      	ldr	r6, [sp, #8]
 8009b98:	4682      	mov	sl, r0
 8009b9a:	468b      	mov	fp, r1
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f7f6 fcd8 	bl	8000554 <__aeabi_i2d>
 8009ba4:	4652      	mov	r2, sl
 8009ba6:	465b      	mov	r3, fp
 8009ba8:	f7f6 fd3e 	bl	8000628 <__aeabi_dmul>
 8009bac:	4b82      	ldr	r3, [pc, #520]	; (8009db8 <_dtoa_r+0x628>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f7f6 fb84 	bl	80002bc <__adddf3>
 8009bb4:	46d0      	mov	r8, sl
 8009bb6:	46d9      	mov	r9, fp
 8009bb8:	4682      	mov	sl, r0
 8009bba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009bbe:	2e00      	cmp	r6, #0
 8009bc0:	d158      	bne.n	8009c74 <_dtoa_r+0x4e4>
 8009bc2:	4b7e      	ldr	r3, [pc, #504]	; (8009dbc <_dtoa_r+0x62c>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	4649      	mov	r1, r9
 8009bca:	f7f6 fb75 	bl	80002b8 <__aeabi_dsub>
 8009bce:	4652      	mov	r2, sl
 8009bd0:	465b      	mov	r3, fp
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	4689      	mov	r9, r1
 8009bd6:	f7f6 ffb7 	bl	8000b48 <__aeabi_dcmpgt>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f040 8295 	bne.w	800a10a <_dtoa_r+0x97a>
 8009be0:	4652      	mov	r2, sl
 8009be2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	f7f6 ff8f 	bl	8000b0c <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f040 8289 	bne.w	800a106 <_dtoa_r+0x976>
 8009bf4:	ec5b ab19 	vmov	sl, fp, d9
 8009bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f2c0 8148 	blt.w	8009e90 <_dtoa_r+0x700>
 8009c00:	9a00      	ldr	r2, [sp, #0]
 8009c02:	2a0e      	cmp	r2, #14
 8009c04:	f300 8144 	bgt.w	8009e90 <_dtoa_r+0x700>
 8009c08:	4b67      	ldr	r3, [pc, #412]	; (8009da8 <_dtoa_r+0x618>)
 8009c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f280 80d5 	bge.w	8009dc4 <_dtoa_r+0x634>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f300 80d1 	bgt.w	8009dc4 <_dtoa_r+0x634>
 8009c22:	f040 826f 	bne.w	800a104 <_dtoa_r+0x974>
 8009c26:	4b65      	ldr	r3, [pc, #404]	; (8009dbc <_dtoa_r+0x62c>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fcfb 	bl	8000628 <__aeabi_dmul>
 8009c32:	4652      	mov	r2, sl
 8009c34:	465b      	mov	r3, fp
 8009c36:	f7f6 ff7d 	bl	8000b34 <__aeabi_dcmpge>
 8009c3a:	9e03      	ldr	r6, [sp, #12]
 8009c3c:	4637      	mov	r7, r6
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f040 8245 	bne.w	800a0ce <_dtoa_r+0x93e>
 8009c44:	9d01      	ldr	r5, [sp, #4]
 8009c46:	2331      	movs	r3, #49	; 0x31
 8009c48:	f805 3b01 	strb.w	r3, [r5], #1
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	e240      	b.n	800a0d6 <_dtoa_r+0x946>
 8009c54:	07f2      	lsls	r2, r6, #31
 8009c56:	d505      	bpl.n	8009c64 <_dtoa_r+0x4d4>
 8009c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c5c:	f7f6 fce4 	bl	8000628 <__aeabi_dmul>
 8009c60:	3501      	adds	r5, #1
 8009c62:	2301      	movs	r3, #1
 8009c64:	1076      	asrs	r6, r6, #1
 8009c66:	3708      	adds	r7, #8
 8009c68:	e777      	b.n	8009b5a <_dtoa_r+0x3ca>
 8009c6a:	2502      	movs	r5, #2
 8009c6c:	e779      	b.n	8009b62 <_dtoa_r+0x3d2>
 8009c6e:	9f00      	ldr	r7, [sp, #0]
 8009c70:	9e03      	ldr	r6, [sp, #12]
 8009c72:	e794      	b.n	8009b9e <_dtoa_r+0x40e>
 8009c74:	9901      	ldr	r1, [sp, #4]
 8009c76:	4b4c      	ldr	r3, [pc, #304]	; (8009da8 <_dtoa_r+0x618>)
 8009c78:	4431      	add	r1, r6
 8009c7a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c7c:	9908      	ldr	r1, [sp, #32]
 8009c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c86:	2900      	cmp	r1, #0
 8009c88:	d043      	beq.n	8009d12 <_dtoa_r+0x582>
 8009c8a:	494d      	ldr	r1, [pc, #308]	; (8009dc0 <_dtoa_r+0x630>)
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f7f6 fdf5 	bl	800087c <__aeabi_ddiv>
 8009c92:	4652      	mov	r2, sl
 8009c94:	465b      	mov	r3, fp
 8009c96:	f7f6 fb0f 	bl	80002b8 <__aeabi_dsub>
 8009c9a:	9d01      	ldr	r5, [sp, #4]
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	468b      	mov	fp, r1
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	f7f6 ff70 	bl	8000b88 <__aeabi_d2iz>
 8009ca8:	4606      	mov	r6, r0
 8009caa:	f7f6 fc53 	bl	8000554 <__aeabi_i2d>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	f7f6 faff 	bl	80002b8 <__aeabi_dsub>
 8009cba:	3630      	adds	r6, #48	; 0x30
 8009cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	465b      	mov	r3, fp
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	f7f6 ff20 	bl	8000b0c <__aeabi_dcmplt>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d163      	bne.n	8009d98 <_dtoa_r+0x608>
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	4936      	ldr	r1, [pc, #216]	; (8009db0 <_dtoa_r+0x620>)
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	f7f6 faee 	bl	80002b8 <__aeabi_dsub>
 8009cdc:	4652      	mov	r2, sl
 8009cde:	465b      	mov	r3, fp
 8009ce0:	f7f6 ff14 	bl	8000b0c <__aeabi_dcmplt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f040 80b5 	bne.w	8009e54 <_dtoa_r+0x6c4>
 8009cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cec:	429d      	cmp	r5, r3
 8009cee:	d081      	beq.n	8009bf4 <_dtoa_r+0x464>
 8009cf0:	4b30      	ldr	r3, [pc, #192]	; (8009db4 <_dtoa_r+0x624>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	4650      	mov	r0, sl
 8009cf6:	4659      	mov	r1, fp
 8009cf8:	f7f6 fc96 	bl	8000628 <__aeabi_dmul>
 8009cfc:	4b2d      	ldr	r3, [pc, #180]	; (8009db4 <_dtoa_r+0x624>)
 8009cfe:	4682      	mov	sl, r0
 8009d00:	468b      	mov	fp, r1
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	2200      	movs	r2, #0
 8009d08:	f7f6 fc8e 	bl	8000628 <__aeabi_dmul>
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	4689      	mov	r9, r1
 8009d10:	e7c6      	b.n	8009ca0 <_dtoa_r+0x510>
 8009d12:	4650      	mov	r0, sl
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fc87 	bl	8000628 <__aeabi_dmul>
 8009d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d1c:	9d01      	ldr	r5, [sp, #4]
 8009d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	4649      	mov	r1, r9
 8009d26:	4640      	mov	r0, r8
 8009d28:	f7f6 ff2e 	bl	8000b88 <__aeabi_d2iz>
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	f7f6 fc11 	bl	8000554 <__aeabi_i2d>
 8009d32:	3630      	adds	r6, #48	; 0x30
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fabc 	bl	80002b8 <__aeabi_dsub>
 8009d40:	f805 6b01 	strb.w	r6, [r5], #1
 8009d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d46:	429d      	cmp	r5, r3
 8009d48:	4680      	mov	r8, r0
 8009d4a:	4689      	mov	r9, r1
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	d124      	bne.n	8009d9c <_dtoa_r+0x60c>
 8009d52:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <_dtoa_r+0x630>)
 8009d54:	4650      	mov	r0, sl
 8009d56:	4659      	mov	r1, fp
 8009d58:	f7f6 fab0 	bl	80002bc <__adddf3>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4640      	mov	r0, r8
 8009d62:	4649      	mov	r1, r9
 8009d64:	f7f6 fef0 	bl	8000b48 <__aeabi_dcmpgt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d173      	bne.n	8009e54 <_dtoa_r+0x6c4>
 8009d6c:	4652      	mov	r2, sl
 8009d6e:	465b      	mov	r3, fp
 8009d70:	4913      	ldr	r1, [pc, #76]	; (8009dc0 <_dtoa_r+0x630>)
 8009d72:	2000      	movs	r0, #0
 8009d74:	f7f6 faa0 	bl	80002b8 <__aeabi_dsub>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4640      	mov	r0, r8
 8009d7e:	4649      	mov	r1, r9
 8009d80:	f7f6 fec4 	bl	8000b0c <__aeabi_dcmplt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f af35 	beq.w	8009bf4 <_dtoa_r+0x464>
 8009d8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d8c:	1e6b      	subs	r3, r5, #1
 8009d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d94:	2b30      	cmp	r3, #48	; 0x30
 8009d96:	d0f8      	beq.n	8009d8a <_dtoa_r+0x5fa>
 8009d98:	9700      	str	r7, [sp, #0]
 8009d9a:	e049      	b.n	8009e30 <_dtoa_r+0x6a0>
 8009d9c:	4b05      	ldr	r3, [pc, #20]	; (8009db4 <_dtoa_r+0x624>)
 8009d9e:	f7f6 fc43 	bl	8000628 <__aeabi_dmul>
 8009da2:	4680      	mov	r8, r0
 8009da4:	4689      	mov	r9, r1
 8009da6:	e7bd      	b.n	8009d24 <_dtoa_r+0x594>
 8009da8:	0800ec30 	.word	0x0800ec30
 8009dac:	0800ec08 	.word	0x0800ec08
 8009db0:	3ff00000 	.word	0x3ff00000
 8009db4:	40240000 	.word	0x40240000
 8009db8:	401c0000 	.word	0x401c0000
 8009dbc:	40140000 	.word	0x40140000
 8009dc0:	3fe00000 	.word	0x3fe00000
 8009dc4:	9d01      	ldr	r5, [sp, #4]
 8009dc6:	4656      	mov	r6, sl
 8009dc8:	465f      	mov	r7, fp
 8009dca:	4642      	mov	r2, r8
 8009dcc:	464b      	mov	r3, r9
 8009dce:	4630      	mov	r0, r6
 8009dd0:	4639      	mov	r1, r7
 8009dd2:	f7f6 fd53 	bl	800087c <__aeabi_ddiv>
 8009dd6:	f7f6 fed7 	bl	8000b88 <__aeabi_d2iz>
 8009dda:	4682      	mov	sl, r0
 8009ddc:	f7f6 fbba 	bl	8000554 <__aeabi_i2d>
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	f7f6 fc20 	bl	8000628 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4630      	mov	r0, r6
 8009dee:	4639      	mov	r1, r7
 8009df0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009df4:	f7f6 fa60 	bl	80002b8 <__aeabi_dsub>
 8009df8:	f805 6b01 	strb.w	r6, [r5], #1
 8009dfc:	9e01      	ldr	r6, [sp, #4]
 8009dfe:	9f03      	ldr	r7, [sp, #12]
 8009e00:	1bae      	subs	r6, r5, r6
 8009e02:	42b7      	cmp	r7, r6
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	d135      	bne.n	8009e76 <_dtoa_r+0x6e6>
 8009e0a:	f7f6 fa57 	bl	80002bc <__adddf3>
 8009e0e:	4642      	mov	r2, r8
 8009e10:	464b      	mov	r3, r9
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	f7f6 fe97 	bl	8000b48 <__aeabi_dcmpgt>
 8009e1a:	b9d0      	cbnz	r0, 8009e52 <_dtoa_r+0x6c2>
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	4630      	mov	r0, r6
 8009e22:	4639      	mov	r1, r7
 8009e24:	f7f6 fe68 	bl	8000af8 <__aeabi_dcmpeq>
 8009e28:	b110      	cbz	r0, 8009e30 <_dtoa_r+0x6a0>
 8009e2a:	f01a 0f01 	tst.w	sl, #1
 8009e2e:	d110      	bne.n	8009e52 <_dtoa_r+0x6c2>
 8009e30:	4620      	mov	r0, r4
 8009e32:	ee18 1a10 	vmov	r1, s16
 8009e36:	f000 fe75 	bl	800ab24 <_Bfree>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9800      	ldr	r0, [sp, #0]
 8009e3e:	702b      	strb	r3, [r5, #0]
 8009e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e42:	3001      	adds	r0, #1
 8009e44:	6018      	str	r0, [r3, #0]
 8009e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f43f acf1 	beq.w	8009830 <_dtoa_r+0xa0>
 8009e4e:	601d      	str	r5, [r3, #0]
 8009e50:	e4ee      	b.n	8009830 <_dtoa_r+0xa0>
 8009e52:	9f00      	ldr	r7, [sp, #0]
 8009e54:	462b      	mov	r3, r5
 8009e56:	461d      	mov	r5, r3
 8009e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e5c:	2a39      	cmp	r2, #57	; 0x39
 8009e5e:	d106      	bne.n	8009e6e <_dtoa_r+0x6de>
 8009e60:	9a01      	ldr	r2, [sp, #4]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d1f7      	bne.n	8009e56 <_dtoa_r+0x6c6>
 8009e66:	9901      	ldr	r1, [sp, #4]
 8009e68:	2230      	movs	r2, #48	; 0x30
 8009e6a:	3701      	adds	r7, #1
 8009e6c:	700a      	strb	r2, [r1, #0]
 8009e6e:	781a      	ldrb	r2, [r3, #0]
 8009e70:	3201      	adds	r2, #1
 8009e72:	701a      	strb	r2, [r3, #0]
 8009e74:	e790      	b.n	8009d98 <_dtoa_r+0x608>
 8009e76:	4ba6      	ldr	r3, [pc, #664]	; (800a110 <_dtoa_r+0x980>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f7f6 fbd5 	bl	8000628 <__aeabi_dmul>
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2300      	movs	r3, #0
 8009e82:	4606      	mov	r6, r0
 8009e84:	460f      	mov	r7, r1
 8009e86:	f7f6 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d09d      	beq.n	8009dca <_dtoa_r+0x63a>
 8009e8e:	e7cf      	b.n	8009e30 <_dtoa_r+0x6a0>
 8009e90:	9a08      	ldr	r2, [sp, #32]
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	f000 80d7 	beq.w	800a046 <_dtoa_r+0x8b6>
 8009e98:	9a06      	ldr	r2, [sp, #24]
 8009e9a:	2a01      	cmp	r2, #1
 8009e9c:	f300 80ba 	bgt.w	800a014 <_dtoa_r+0x884>
 8009ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	f000 80b2 	beq.w	800a00c <_dtoa_r+0x87c>
 8009ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eac:	9e07      	ldr	r6, [sp, #28]
 8009eae:	9d04      	ldr	r5, [sp, #16]
 8009eb0:	9a04      	ldr	r2, [sp, #16]
 8009eb2:	441a      	add	r2, r3
 8009eb4:	9204      	str	r2, [sp, #16]
 8009eb6:	9a05      	ldr	r2, [sp, #20]
 8009eb8:	2101      	movs	r1, #1
 8009eba:	441a      	add	r2, r3
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	9205      	str	r2, [sp, #20]
 8009ec0:	f000 ff32 	bl	800ad28 <__i2b>
 8009ec4:	4607      	mov	r7, r0
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	dd0c      	ble.n	8009ee4 <_dtoa_r+0x754>
 8009eca:	9b05      	ldr	r3, [sp, #20]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	dd09      	ble.n	8009ee4 <_dtoa_r+0x754>
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	9a04      	ldr	r2, [sp, #16]
 8009ed4:	bfa8      	it	ge
 8009ed6:	462b      	movge	r3, r5
 8009ed8:	1ad2      	subs	r2, r2, r3
 8009eda:	9204      	str	r2, [sp, #16]
 8009edc:	9a05      	ldr	r2, [sp, #20]
 8009ede:	1aed      	subs	r5, r5, r3
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	9305      	str	r3, [sp, #20]
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	b31b      	cbz	r3, 8009f30 <_dtoa_r+0x7a0>
 8009ee8:	9b08      	ldr	r3, [sp, #32]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 80af 	beq.w	800a04e <_dtoa_r+0x8be>
 8009ef0:	2e00      	cmp	r6, #0
 8009ef2:	dd13      	ble.n	8009f1c <_dtoa_r+0x78c>
 8009ef4:	4639      	mov	r1, r7
 8009ef6:	4632      	mov	r2, r6
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 ffd5 	bl	800aea8 <__pow5mult>
 8009efe:	ee18 2a10 	vmov	r2, s16
 8009f02:	4601      	mov	r1, r0
 8009f04:	4607      	mov	r7, r0
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 ff24 	bl	800ad54 <__multiply>
 8009f0c:	ee18 1a10 	vmov	r1, s16
 8009f10:	4680      	mov	r8, r0
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fe06 	bl	800ab24 <_Bfree>
 8009f18:	ee08 8a10 	vmov	s16, r8
 8009f1c:	9b07      	ldr	r3, [sp, #28]
 8009f1e:	1b9a      	subs	r2, r3, r6
 8009f20:	d006      	beq.n	8009f30 <_dtoa_r+0x7a0>
 8009f22:	ee18 1a10 	vmov	r1, s16
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 ffbe 	bl	800aea8 <__pow5mult>
 8009f2c:	ee08 0a10 	vmov	s16, r0
 8009f30:	2101      	movs	r1, #1
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fef8 	bl	800ad28 <__i2b>
 8009f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	f340 8088 	ble.w	800a052 <_dtoa_r+0x8c2>
 8009f42:	461a      	mov	r2, r3
 8009f44:	4601      	mov	r1, r0
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 ffae 	bl	800aea8 <__pow5mult>
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	4606      	mov	r6, r0
 8009f52:	f340 8081 	ble.w	800a058 <_dtoa_r+0x8c8>
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	6933      	ldr	r3, [r6, #16]
 8009f5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f60:	6918      	ldr	r0, [r3, #16]
 8009f62:	f000 fe91 	bl	800ac88 <__hi0bits>
 8009f66:	f1c0 0020 	rsb	r0, r0, #32
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	4418      	add	r0, r3
 8009f6e:	f010 001f 	ands.w	r0, r0, #31
 8009f72:	f000 8092 	beq.w	800a09a <_dtoa_r+0x90a>
 8009f76:	f1c0 0320 	rsb	r3, r0, #32
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	f340 808a 	ble.w	800a094 <_dtoa_r+0x904>
 8009f80:	f1c0 001c 	rsb	r0, r0, #28
 8009f84:	9b04      	ldr	r3, [sp, #16]
 8009f86:	4403      	add	r3, r0
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	9b05      	ldr	r3, [sp, #20]
 8009f8c:	4403      	add	r3, r0
 8009f8e:	4405      	add	r5, r0
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd07      	ble.n	8009fa8 <_dtoa_r+0x818>
 8009f98:	ee18 1a10 	vmov	r1, s16
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f000 ffdc 	bl	800af5c <__lshift>
 8009fa4:	ee08 0a10 	vmov	s16, r0
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dd05      	ble.n	8009fba <_dtoa_r+0x82a>
 8009fae:	4631      	mov	r1, r6
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f000 ffd2 	bl	800af5c <__lshift>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d06e      	beq.n	800a09e <_dtoa_r+0x90e>
 8009fc0:	ee18 0a10 	vmov	r0, s16
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	f001 f839 	bl	800b03c <__mcmp>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	da67      	bge.n	800a09e <_dtoa_r+0x90e>
 8009fce:	9b00      	ldr	r3, [sp, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	ee18 1a10 	vmov	r1, s16
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	220a      	movs	r2, #10
 8009fda:	2300      	movs	r3, #0
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fdc3 	bl	800ab68 <__multadd>
 8009fe2:	9b08      	ldr	r3, [sp, #32]
 8009fe4:	ee08 0a10 	vmov	s16, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 81b1 	beq.w	800a350 <_dtoa_r+0xbc0>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	220a      	movs	r2, #10
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fdb7 	bl	800ab68 <__multadd>
 8009ffa:	9b02      	ldr	r3, [sp, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	4607      	mov	r7, r0
 800a000:	f300 808e 	bgt.w	800a120 <_dtoa_r+0x990>
 800a004:	9b06      	ldr	r3, [sp, #24]
 800a006:	2b02      	cmp	r3, #2
 800a008:	dc51      	bgt.n	800a0ae <_dtoa_r+0x91e>
 800a00a:	e089      	b.n	800a120 <_dtoa_r+0x990>
 800a00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a00e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a012:	e74b      	b.n	8009eac <_dtoa_r+0x71c>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	1e5e      	subs	r6, r3, #1
 800a018:	9b07      	ldr	r3, [sp, #28]
 800a01a:	42b3      	cmp	r3, r6
 800a01c:	bfbf      	itttt	lt
 800a01e:	9b07      	ldrlt	r3, [sp, #28]
 800a020:	9607      	strlt	r6, [sp, #28]
 800a022:	1af2      	sublt	r2, r6, r3
 800a024:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a026:	bfb6      	itet	lt
 800a028:	189b      	addlt	r3, r3, r2
 800a02a:	1b9e      	subge	r6, r3, r6
 800a02c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	bfb8      	it	lt
 800a032:	2600      	movlt	r6, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfb7      	itett	lt
 800a038:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a03c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a040:	1a9d      	sublt	r5, r3, r2
 800a042:	2300      	movlt	r3, #0
 800a044:	e734      	b.n	8009eb0 <_dtoa_r+0x720>
 800a046:	9e07      	ldr	r6, [sp, #28]
 800a048:	9d04      	ldr	r5, [sp, #16]
 800a04a:	9f08      	ldr	r7, [sp, #32]
 800a04c:	e73b      	b.n	8009ec6 <_dtoa_r+0x736>
 800a04e:	9a07      	ldr	r2, [sp, #28]
 800a050:	e767      	b.n	8009f22 <_dtoa_r+0x792>
 800a052:	9b06      	ldr	r3, [sp, #24]
 800a054:	2b01      	cmp	r3, #1
 800a056:	dc18      	bgt.n	800a08a <_dtoa_r+0x8fa>
 800a058:	f1ba 0f00 	cmp.w	sl, #0
 800a05c:	d115      	bne.n	800a08a <_dtoa_r+0x8fa>
 800a05e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a062:	b993      	cbnz	r3, 800a08a <_dtoa_r+0x8fa>
 800a064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a068:	0d1b      	lsrs	r3, r3, #20
 800a06a:	051b      	lsls	r3, r3, #20
 800a06c:	b183      	cbz	r3, 800a090 <_dtoa_r+0x900>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	9b05      	ldr	r3, [sp, #20]
 800a076:	3301      	adds	r3, #1
 800a078:	9305      	str	r3, [sp, #20]
 800a07a:	f04f 0801 	mov.w	r8, #1
 800a07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	f47f af6a 	bne.w	8009f5a <_dtoa_r+0x7ca>
 800a086:	2001      	movs	r0, #1
 800a088:	e76f      	b.n	8009f6a <_dtoa_r+0x7da>
 800a08a:	f04f 0800 	mov.w	r8, #0
 800a08e:	e7f6      	b.n	800a07e <_dtoa_r+0x8ee>
 800a090:	4698      	mov	r8, r3
 800a092:	e7f4      	b.n	800a07e <_dtoa_r+0x8ee>
 800a094:	f43f af7d 	beq.w	8009f92 <_dtoa_r+0x802>
 800a098:	4618      	mov	r0, r3
 800a09a:	301c      	adds	r0, #28
 800a09c:	e772      	b.n	8009f84 <_dtoa_r+0x7f4>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dc37      	bgt.n	800a114 <_dtoa_r+0x984>
 800a0a4:	9b06      	ldr	r3, [sp, #24]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	dd34      	ble.n	800a114 <_dtoa_r+0x984>
 800a0aa:	9b03      	ldr	r3, [sp, #12]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	9b02      	ldr	r3, [sp, #8]
 800a0b0:	b96b      	cbnz	r3, 800a0ce <_dtoa_r+0x93e>
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	2205      	movs	r2, #5
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 fd56 	bl	800ab68 <__multadd>
 800a0bc:	4601      	mov	r1, r0
 800a0be:	4606      	mov	r6, r0
 800a0c0:	ee18 0a10 	vmov	r0, s16
 800a0c4:	f000 ffba 	bl	800b03c <__mcmp>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f73f adbb 	bgt.w	8009c44 <_dtoa_r+0x4b4>
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	9d01      	ldr	r5, [sp, #4]
 800a0d2:	43db      	mvns	r3, r3
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fd21 	bl	800ab24 <_Bfree>
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	f43f aea4 	beq.w	8009e30 <_dtoa_r+0x6a0>
 800a0e8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ec:	d005      	beq.n	800a0fa <_dtoa_r+0x96a>
 800a0ee:	45b8      	cmp	r8, r7
 800a0f0:	d003      	beq.n	800a0fa <_dtoa_r+0x96a>
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f000 fd15 	bl	800ab24 <_Bfree>
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fd11 	bl	800ab24 <_Bfree>
 800a102:	e695      	b.n	8009e30 <_dtoa_r+0x6a0>
 800a104:	2600      	movs	r6, #0
 800a106:	4637      	mov	r7, r6
 800a108:	e7e1      	b.n	800a0ce <_dtoa_r+0x93e>
 800a10a:	9700      	str	r7, [sp, #0]
 800a10c:	4637      	mov	r7, r6
 800a10e:	e599      	b.n	8009c44 <_dtoa_r+0x4b4>
 800a110:	40240000 	.word	0x40240000
 800a114:	9b08      	ldr	r3, [sp, #32]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 80ca 	beq.w	800a2b0 <_dtoa_r+0xb20>
 800a11c:	9b03      	ldr	r3, [sp, #12]
 800a11e:	9302      	str	r3, [sp, #8]
 800a120:	2d00      	cmp	r5, #0
 800a122:	dd05      	ble.n	800a130 <_dtoa_r+0x9a0>
 800a124:	4639      	mov	r1, r7
 800a126:	462a      	mov	r2, r5
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 ff17 	bl	800af5c <__lshift>
 800a12e:	4607      	mov	r7, r0
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	d05b      	beq.n	800a1ee <_dtoa_r+0xa5e>
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fcb3 	bl	800aaa4 <_Balloc>
 800a13e:	4605      	mov	r5, r0
 800a140:	b928      	cbnz	r0, 800a14e <_dtoa_r+0x9be>
 800a142:	4b87      	ldr	r3, [pc, #540]	; (800a360 <_dtoa_r+0xbd0>)
 800a144:	4602      	mov	r2, r0
 800a146:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a14a:	f7ff bb3b 	b.w	80097c4 <_dtoa_r+0x34>
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	3202      	adds	r2, #2
 800a152:	0092      	lsls	r2, r2, #2
 800a154:	f107 010c 	add.w	r1, r7, #12
 800a158:	300c      	adds	r0, #12
 800a15a:	f000 fc95 	bl	800aa88 <memcpy>
 800a15e:	2201      	movs	r2, #1
 800a160:	4629      	mov	r1, r5
 800a162:	4620      	mov	r0, r4
 800a164:	f000 fefa 	bl	800af5c <__lshift>
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	f103 0901 	add.w	r9, r3, #1
 800a16e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a172:	4413      	add	r3, r2
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	f00a 0301 	and.w	r3, sl, #1
 800a17a:	46b8      	mov	r8, r7
 800a17c:	9304      	str	r3, [sp, #16]
 800a17e:	4607      	mov	r7, r0
 800a180:	4631      	mov	r1, r6
 800a182:	ee18 0a10 	vmov	r0, s16
 800a186:	f7ff fa77 	bl	8009678 <quorem>
 800a18a:	4641      	mov	r1, r8
 800a18c:	9002      	str	r0, [sp, #8]
 800a18e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a192:	ee18 0a10 	vmov	r0, s16
 800a196:	f000 ff51 	bl	800b03c <__mcmp>
 800a19a:	463a      	mov	r2, r7
 800a19c:	9003      	str	r0, [sp, #12]
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 ff67 	bl	800b074 <__mdiff>
 800a1a6:	68c2      	ldr	r2, [r0, #12]
 800a1a8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	bb02      	cbnz	r2, 800a1f2 <_dtoa_r+0xa62>
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	ee18 0a10 	vmov	r0, s16
 800a1b6:	f000 ff41 	bl	800b03c <__mcmp>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4620      	mov	r0, r4
 800a1c0:	9207      	str	r2, [sp, #28]
 800a1c2:	f000 fcaf 	bl	800ab24 <_Bfree>
 800a1c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a1ca:	ea43 0102 	orr.w	r1, r3, r2
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	464d      	mov	r5, r9
 800a1d4:	d10f      	bne.n	800a1f6 <_dtoa_r+0xa66>
 800a1d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1da:	d02a      	beq.n	800a232 <_dtoa_r+0xaa2>
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dd02      	ble.n	800a1e8 <_dtoa_r+0xa58>
 800a1e2:	9b02      	ldr	r3, [sp, #8]
 800a1e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a1e8:	f88b a000 	strb.w	sl, [fp]
 800a1ec:	e775      	b.n	800a0da <_dtoa_r+0x94a>
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	e7ba      	b.n	800a168 <_dtoa_r+0x9d8>
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	e7e2      	b.n	800a1bc <_dtoa_r+0xa2c>
 800a1f6:	9b03      	ldr	r3, [sp, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	db04      	blt.n	800a206 <_dtoa_r+0xa76>
 800a1fc:	9906      	ldr	r1, [sp, #24]
 800a1fe:	430b      	orrs	r3, r1
 800a200:	9904      	ldr	r1, [sp, #16]
 800a202:	430b      	orrs	r3, r1
 800a204:	d122      	bne.n	800a24c <_dtoa_r+0xabc>
 800a206:	2a00      	cmp	r2, #0
 800a208:	ddee      	ble.n	800a1e8 <_dtoa_r+0xa58>
 800a20a:	ee18 1a10 	vmov	r1, s16
 800a20e:	2201      	movs	r2, #1
 800a210:	4620      	mov	r0, r4
 800a212:	f000 fea3 	bl	800af5c <__lshift>
 800a216:	4631      	mov	r1, r6
 800a218:	ee08 0a10 	vmov	s16, r0
 800a21c:	f000 ff0e 	bl	800b03c <__mcmp>
 800a220:	2800      	cmp	r0, #0
 800a222:	dc03      	bgt.n	800a22c <_dtoa_r+0xa9c>
 800a224:	d1e0      	bne.n	800a1e8 <_dtoa_r+0xa58>
 800a226:	f01a 0f01 	tst.w	sl, #1
 800a22a:	d0dd      	beq.n	800a1e8 <_dtoa_r+0xa58>
 800a22c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a230:	d1d7      	bne.n	800a1e2 <_dtoa_r+0xa52>
 800a232:	2339      	movs	r3, #57	; 0x39
 800a234:	f88b 3000 	strb.w	r3, [fp]
 800a238:	462b      	mov	r3, r5
 800a23a:	461d      	mov	r5, r3
 800a23c:	3b01      	subs	r3, #1
 800a23e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a242:	2a39      	cmp	r2, #57	; 0x39
 800a244:	d071      	beq.n	800a32a <_dtoa_r+0xb9a>
 800a246:	3201      	adds	r2, #1
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	e746      	b.n	800a0da <_dtoa_r+0x94a>
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	dd07      	ble.n	800a260 <_dtoa_r+0xad0>
 800a250:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a254:	d0ed      	beq.n	800a232 <_dtoa_r+0xaa2>
 800a256:	f10a 0301 	add.w	r3, sl, #1
 800a25a:	f88b 3000 	strb.w	r3, [fp]
 800a25e:	e73c      	b.n	800a0da <_dtoa_r+0x94a>
 800a260:	9b05      	ldr	r3, [sp, #20]
 800a262:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a266:	4599      	cmp	r9, r3
 800a268:	d047      	beq.n	800a2fa <_dtoa_r+0xb6a>
 800a26a:	ee18 1a10 	vmov	r1, s16
 800a26e:	2300      	movs	r3, #0
 800a270:	220a      	movs	r2, #10
 800a272:	4620      	mov	r0, r4
 800a274:	f000 fc78 	bl	800ab68 <__multadd>
 800a278:	45b8      	cmp	r8, r7
 800a27a:	ee08 0a10 	vmov	s16, r0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	f04f 020a 	mov.w	r2, #10
 800a286:	4641      	mov	r1, r8
 800a288:	4620      	mov	r0, r4
 800a28a:	d106      	bne.n	800a29a <_dtoa_r+0xb0a>
 800a28c:	f000 fc6c 	bl	800ab68 <__multadd>
 800a290:	4680      	mov	r8, r0
 800a292:	4607      	mov	r7, r0
 800a294:	f109 0901 	add.w	r9, r9, #1
 800a298:	e772      	b.n	800a180 <_dtoa_r+0x9f0>
 800a29a:	f000 fc65 	bl	800ab68 <__multadd>
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fc5e 	bl	800ab68 <__multadd>
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	e7f1      	b.n	800a294 <_dtoa_r+0xb04>
 800a2b0:	9b03      	ldr	r3, [sp, #12]
 800a2b2:	9302      	str	r3, [sp, #8]
 800a2b4:	9d01      	ldr	r5, [sp, #4]
 800a2b6:	ee18 0a10 	vmov	r0, s16
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	f7ff f9dc 	bl	8009678 <quorem>
 800a2c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	f805 ab01 	strb.w	sl, [r5], #1
 800a2ca:	1aea      	subs	r2, r5, r3
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	dd09      	ble.n	800a2e6 <_dtoa_r+0xb56>
 800a2d2:	ee18 1a10 	vmov	r1, s16
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	220a      	movs	r2, #10
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fc44 	bl	800ab68 <__multadd>
 800a2e0:	ee08 0a10 	vmov	s16, r0
 800a2e4:	e7e7      	b.n	800a2b6 <_dtoa_r+0xb26>
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfc8      	it	gt
 800a2ec:	461d      	movgt	r5, r3
 800a2ee:	9b01      	ldr	r3, [sp, #4]
 800a2f0:	bfd8      	it	le
 800a2f2:	2501      	movle	r5, #1
 800a2f4:	441d      	add	r5, r3
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	ee18 1a10 	vmov	r1, s16
 800a2fe:	2201      	movs	r2, #1
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fe2b 	bl	800af5c <__lshift>
 800a306:	4631      	mov	r1, r6
 800a308:	ee08 0a10 	vmov	s16, r0
 800a30c:	f000 fe96 	bl	800b03c <__mcmp>
 800a310:	2800      	cmp	r0, #0
 800a312:	dc91      	bgt.n	800a238 <_dtoa_r+0xaa8>
 800a314:	d102      	bne.n	800a31c <_dtoa_r+0xb8c>
 800a316:	f01a 0f01 	tst.w	sl, #1
 800a31a:	d18d      	bne.n	800a238 <_dtoa_r+0xaa8>
 800a31c:	462b      	mov	r3, r5
 800a31e:	461d      	mov	r5, r3
 800a320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a324:	2a30      	cmp	r2, #48	; 0x30
 800a326:	d0fa      	beq.n	800a31e <_dtoa_r+0xb8e>
 800a328:	e6d7      	b.n	800a0da <_dtoa_r+0x94a>
 800a32a:	9a01      	ldr	r2, [sp, #4]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d184      	bne.n	800a23a <_dtoa_r+0xaaa>
 800a330:	9b00      	ldr	r3, [sp, #0]
 800a332:	3301      	adds	r3, #1
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	2331      	movs	r3, #49	; 0x31
 800a338:	7013      	strb	r3, [r2, #0]
 800a33a:	e6ce      	b.n	800a0da <_dtoa_r+0x94a>
 800a33c:	4b09      	ldr	r3, [pc, #36]	; (800a364 <_dtoa_r+0xbd4>)
 800a33e:	f7ff ba95 	b.w	800986c <_dtoa_r+0xdc>
 800a342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a344:	2b00      	cmp	r3, #0
 800a346:	f47f aa6e 	bne.w	8009826 <_dtoa_r+0x96>
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <_dtoa_r+0xbd8>)
 800a34c:	f7ff ba8e 	b.w	800986c <_dtoa_r+0xdc>
 800a350:	9b02      	ldr	r3, [sp, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	dcae      	bgt.n	800a2b4 <_dtoa_r+0xb24>
 800a356:	9b06      	ldr	r3, [sp, #24]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	f73f aea8 	bgt.w	800a0ae <_dtoa_r+0x91e>
 800a35e:	e7a9      	b.n	800a2b4 <_dtoa_r+0xb24>
 800a360:	0800eb20 	.word	0x0800eb20
 800a364:	0800e920 	.word	0x0800e920
 800a368:	0800eaa1 	.word	0x0800eaa1

0800a36c <rshift>:
 800a36c:	6903      	ldr	r3, [r0, #16]
 800a36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a37a:	f100 0414 	add.w	r4, r0, #20
 800a37e:	dd45      	ble.n	800a40c <rshift+0xa0>
 800a380:	f011 011f 	ands.w	r1, r1, #31
 800a384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a38c:	d10c      	bne.n	800a3a8 <rshift+0x3c>
 800a38e:	f100 0710 	add.w	r7, r0, #16
 800a392:	4629      	mov	r1, r5
 800a394:	42b1      	cmp	r1, r6
 800a396:	d334      	bcc.n	800a402 <rshift+0x96>
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	1eea      	subs	r2, r5, #3
 800a39e:	4296      	cmp	r6, r2
 800a3a0:	bf38      	it	cc
 800a3a2:	2300      	movcc	r3, #0
 800a3a4:	4423      	add	r3, r4
 800a3a6:	e015      	b.n	800a3d4 <rshift+0x68>
 800a3a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a3ac:	f1c1 0820 	rsb	r8, r1, #32
 800a3b0:	40cf      	lsrs	r7, r1
 800a3b2:	f105 0e04 	add.w	lr, r5, #4
 800a3b6:	46a1      	mov	r9, r4
 800a3b8:	4576      	cmp	r6, lr
 800a3ba:	46f4      	mov	ip, lr
 800a3bc:	d815      	bhi.n	800a3ea <rshift+0x7e>
 800a3be:	1a9a      	subs	r2, r3, r2
 800a3c0:	0092      	lsls	r2, r2, #2
 800a3c2:	3a04      	subs	r2, #4
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	42ae      	cmp	r6, r5
 800a3c8:	bf38      	it	cc
 800a3ca:	2200      	movcc	r2, #0
 800a3cc:	18a3      	adds	r3, r4, r2
 800a3ce:	50a7      	str	r7, [r4, r2]
 800a3d0:	b107      	cbz	r7, 800a3d4 <rshift+0x68>
 800a3d2:	3304      	adds	r3, #4
 800a3d4:	1b1a      	subs	r2, r3, r4
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3dc:	bf08      	it	eq
 800a3de:	2300      	moveq	r3, #0
 800a3e0:	6102      	str	r2, [r0, #16]
 800a3e2:	bf08      	it	eq
 800a3e4:	6143      	streq	r3, [r0, #20]
 800a3e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	f8dc c000 	ldr.w	ip, [ip]
 800a3ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3f2:	ea4c 0707 	orr.w	r7, ip, r7
 800a3f6:	f849 7b04 	str.w	r7, [r9], #4
 800a3fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3fe:	40cf      	lsrs	r7, r1
 800a400:	e7da      	b.n	800a3b8 <rshift+0x4c>
 800a402:	f851 cb04 	ldr.w	ip, [r1], #4
 800a406:	f847 cf04 	str.w	ip, [r7, #4]!
 800a40a:	e7c3      	b.n	800a394 <rshift+0x28>
 800a40c:	4623      	mov	r3, r4
 800a40e:	e7e1      	b.n	800a3d4 <rshift+0x68>

0800a410 <__hexdig_fun>:
 800a410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a414:	2b09      	cmp	r3, #9
 800a416:	d802      	bhi.n	800a41e <__hexdig_fun+0xe>
 800a418:	3820      	subs	r0, #32
 800a41a:	b2c0      	uxtb	r0, r0
 800a41c:	4770      	bx	lr
 800a41e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a422:	2b05      	cmp	r3, #5
 800a424:	d801      	bhi.n	800a42a <__hexdig_fun+0x1a>
 800a426:	3847      	subs	r0, #71	; 0x47
 800a428:	e7f7      	b.n	800a41a <__hexdig_fun+0xa>
 800a42a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d801      	bhi.n	800a436 <__hexdig_fun+0x26>
 800a432:	3827      	subs	r0, #39	; 0x27
 800a434:	e7f1      	b.n	800a41a <__hexdig_fun+0xa>
 800a436:	2000      	movs	r0, #0
 800a438:	4770      	bx	lr
	...

0800a43c <__gethex>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	ed2d 8b02 	vpush	{d8}
 800a444:	b089      	sub	sp, #36	; 0x24
 800a446:	ee08 0a10 	vmov	s16, r0
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	4bb4      	ldr	r3, [pc, #720]	; (800a720 <__gethex+0x2e4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	468b      	mov	fp, r1
 800a456:	4690      	mov	r8, r2
 800a458:	f7f5 fecc 	bl	80001f4 <strlen>
 800a45c:	9b01      	ldr	r3, [sp, #4]
 800a45e:	f8db 2000 	ldr.w	r2, [fp]
 800a462:	4403      	add	r3, r0
 800a464:	4682      	mov	sl, r0
 800a466:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	1c93      	adds	r3, r2, #2
 800a46e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a472:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a476:	32fe      	adds	r2, #254	; 0xfe
 800a478:	18d1      	adds	r1, r2, r3
 800a47a:	461f      	mov	r7, r3
 800a47c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a480:	9100      	str	r1, [sp, #0]
 800a482:	2830      	cmp	r0, #48	; 0x30
 800a484:	d0f8      	beq.n	800a478 <__gethex+0x3c>
 800a486:	f7ff ffc3 	bl	800a410 <__hexdig_fun>
 800a48a:	4604      	mov	r4, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d13a      	bne.n	800a506 <__gethex+0xca>
 800a490:	9901      	ldr	r1, [sp, #4]
 800a492:	4652      	mov	r2, sl
 800a494:	4638      	mov	r0, r7
 800a496:	f001 fa33 	bl	800b900 <strncmp>
 800a49a:	4605      	mov	r5, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d168      	bne.n	800a572 <__gethex+0x136>
 800a4a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a4a4:	eb07 060a 	add.w	r6, r7, sl
 800a4a8:	f7ff ffb2 	bl	800a410 <__hexdig_fun>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d062      	beq.n	800a576 <__gethex+0x13a>
 800a4b0:	4633      	mov	r3, r6
 800a4b2:	7818      	ldrb	r0, [r3, #0]
 800a4b4:	2830      	cmp	r0, #48	; 0x30
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	f103 0301 	add.w	r3, r3, #1
 800a4bc:	d0f9      	beq.n	800a4b2 <__gethex+0x76>
 800a4be:	f7ff ffa7 	bl	800a410 <__hexdig_fun>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	fab0 f480 	clz	r4, r0
 800a4c8:	0964      	lsrs	r4, r4, #5
 800a4ca:	4635      	mov	r5, r6
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	463a      	mov	r2, r7
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	7830      	ldrb	r0, [r6, #0]
 800a4d6:	f7ff ff9b 	bl	800a410 <__hexdig_fun>
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d1f8      	bne.n	800a4d0 <__gethex+0x94>
 800a4de:	9901      	ldr	r1, [sp, #4]
 800a4e0:	4652      	mov	r2, sl
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f001 fa0c 	bl	800b900 <strncmp>
 800a4e8:	b980      	cbnz	r0, 800a50c <__gethex+0xd0>
 800a4ea:	b94d      	cbnz	r5, 800a500 <__gethex+0xc4>
 800a4ec:	eb06 050a 	add.w	r5, r6, sl
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	3201      	adds	r2, #1
 800a4f6:	7830      	ldrb	r0, [r6, #0]
 800a4f8:	f7ff ff8a 	bl	800a410 <__hexdig_fun>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d1f8      	bne.n	800a4f2 <__gethex+0xb6>
 800a500:	1bad      	subs	r5, r5, r6
 800a502:	00ad      	lsls	r5, r5, #2
 800a504:	e004      	b.n	800a510 <__gethex+0xd4>
 800a506:	2400      	movs	r4, #0
 800a508:	4625      	mov	r5, r4
 800a50a:	e7e0      	b.n	800a4ce <__gethex+0x92>
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	d1f7      	bne.n	800a500 <__gethex+0xc4>
 800a510:	7833      	ldrb	r3, [r6, #0]
 800a512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a516:	2b50      	cmp	r3, #80	; 0x50
 800a518:	d13b      	bne.n	800a592 <__gethex+0x156>
 800a51a:	7873      	ldrb	r3, [r6, #1]
 800a51c:	2b2b      	cmp	r3, #43	; 0x2b
 800a51e:	d02c      	beq.n	800a57a <__gethex+0x13e>
 800a520:	2b2d      	cmp	r3, #45	; 0x2d
 800a522:	d02e      	beq.n	800a582 <__gethex+0x146>
 800a524:	1c71      	adds	r1, r6, #1
 800a526:	f04f 0900 	mov.w	r9, #0
 800a52a:	7808      	ldrb	r0, [r1, #0]
 800a52c:	f7ff ff70 	bl	800a410 <__hexdig_fun>
 800a530:	1e43      	subs	r3, r0, #1
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b18      	cmp	r3, #24
 800a536:	d82c      	bhi.n	800a592 <__gethex+0x156>
 800a538:	f1a0 0210 	sub.w	r2, r0, #16
 800a53c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a540:	f7ff ff66 	bl	800a410 <__hexdig_fun>
 800a544:	1e43      	subs	r3, r0, #1
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b18      	cmp	r3, #24
 800a54a:	d91d      	bls.n	800a588 <__gethex+0x14c>
 800a54c:	f1b9 0f00 	cmp.w	r9, #0
 800a550:	d000      	beq.n	800a554 <__gethex+0x118>
 800a552:	4252      	negs	r2, r2
 800a554:	4415      	add	r5, r2
 800a556:	f8cb 1000 	str.w	r1, [fp]
 800a55a:	b1e4      	cbz	r4, 800a596 <__gethex+0x15a>
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bf14      	ite	ne
 800a562:	2700      	movne	r7, #0
 800a564:	2706      	moveq	r7, #6
 800a566:	4638      	mov	r0, r7
 800a568:	b009      	add	sp, #36	; 0x24
 800a56a:	ecbd 8b02 	vpop	{d8}
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	463e      	mov	r6, r7
 800a574:	4625      	mov	r5, r4
 800a576:	2401      	movs	r4, #1
 800a578:	e7ca      	b.n	800a510 <__gethex+0xd4>
 800a57a:	f04f 0900 	mov.w	r9, #0
 800a57e:	1cb1      	adds	r1, r6, #2
 800a580:	e7d3      	b.n	800a52a <__gethex+0xee>
 800a582:	f04f 0901 	mov.w	r9, #1
 800a586:	e7fa      	b.n	800a57e <__gethex+0x142>
 800a588:	230a      	movs	r3, #10
 800a58a:	fb03 0202 	mla	r2, r3, r2, r0
 800a58e:	3a10      	subs	r2, #16
 800a590:	e7d4      	b.n	800a53c <__gethex+0x100>
 800a592:	4631      	mov	r1, r6
 800a594:	e7df      	b.n	800a556 <__gethex+0x11a>
 800a596:	1bf3      	subs	r3, r6, r7
 800a598:	3b01      	subs	r3, #1
 800a59a:	4621      	mov	r1, r4
 800a59c:	2b07      	cmp	r3, #7
 800a59e:	dc0b      	bgt.n	800a5b8 <__gethex+0x17c>
 800a5a0:	ee18 0a10 	vmov	r0, s16
 800a5a4:	f000 fa7e 	bl	800aaa4 <_Balloc>
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	b940      	cbnz	r0, 800a5be <__gethex+0x182>
 800a5ac:	4b5d      	ldr	r3, [pc, #372]	; (800a724 <__gethex+0x2e8>)
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	21de      	movs	r1, #222	; 0xde
 800a5b2:	485d      	ldr	r0, [pc, #372]	; (800a728 <__gethex+0x2ec>)
 800a5b4:	f001 f9c6 	bl	800b944 <__assert_func>
 800a5b8:	3101      	adds	r1, #1
 800a5ba:	105b      	asrs	r3, r3, #1
 800a5bc:	e7ee      	b.n	800a59c <__gethex+0x160>
 800a5be:	f100 0914 	add.w	r9, r0, #20
 800a5c2:	f04f 0b00 	mov.w	fp, #0
 800a5c6:	f1ca 0301 	rsb	r3, sl, #1
 800a5ca:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5ce:	f8cd b000 	str.w	fp, [sp]
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	42b7      	cmp	r7, r6
 800a5d6:	d340      	bcc.n	800a65a <__gethex+0x21e>
 800a5d8:	9802      	ldr	r0, [sp, #8]
 800a5da:	9b00      	ldr	r3, [sp, #0]
 800a5dc:	f840 3b04 	str.w	r3, [r0], #4
 800a5e0:	eba0 0009 	sub.w	r0, r0, r9
 800a5e4:	1080      	asrs	r0, r0, #2
 800a5e6:	0146      	lsls	r6, r0, #5
 800a5e8:	6120      	str	r0, [r4, #16]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fb4c 	bl	800ac88 <__hi0bits>
 800a5f0:	1a30      	subs	r0, r6, r0
 800a5f2:	f8d8 6000 	ldr.w	r6, [r8]
 800a5f6:	42b0      	cmp	r0, r6
 800a5f8:	dd63      	ble.n	800a6c2 <__gethex+0x286>
 800a5fa:	1b87      	subs	r7, r0, r6
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4620      	mov	r0, r4
 800a600:	f000 fef0 	bl	800b3e4 <__any_on>
 800a604:	4682      	mov	sl, r0
 800a606:	b1a8      	cbz	r0, 800a634 <__gethex+0x1f8>
 800a608:	1e7b      	subs	r3, r7, #1
 800a60a:	1159      	asrs	r1, r3, #5
 800a60c:	f003 021f 	and.w	r2, r3, #31
 800a610:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a614:	f04f 0a01 	mov.w	sl, #1
 800a618:	fa0a f202 	lsl.w	r2, sl, r2
 800a61c:	420a      	tst	r2, r1
 800a61e:	d009      	beq.n	800a634 <__gethex+0x1f8>
 800a620:	4553      	cmp	r3, sl
 800a622:	dd05      	ble.n	800a630 <__gethex+0x1f4>
 800a624:	1eb9      	subs	r1, r7, #2
 800a626:	4620      	mov	r0, r4
 800a628:	f000 fedc 	bl	800b3e4 <__any_on>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d145      	bne.n	800a6bc <__gethex+0x280>
 800a630:	f04f 0a02 	mov.w	sl, #2
 800a634:	4639      	mov	r1, r7
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff fe98 	bl	800a36c <rshift>
 800a63c:	443d      	add	r5, r7
 800a63e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a642:	42ab      	cmp	r3, r5
 800a644:	da4c      	bge.n	800a6e0 <__gethex+0x2a4>
 800a646:	ee18 0a10 	vmov	r0, s16
 800a64a:	4621      	mov	r1, r4
 800a64c:	f000 fa6a 	bl	800ab24 <_Bfree>
 800a650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a652:	2300      	movs	r3, #0
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	27a3      	movs	r7, #163	; 0xa3
 800a658:	e785      	b.n	800a566 <__gethex+0x12a>
 800a65a:	1e73      	subs	r3, r6, #1
 800a65c:	9a05      	ldr	r2, [sp, #20]
 800a65e:	9303      	str	r3, [sp, #12]
 800a660:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a664:	4293      	cmp	r3, r2
 800a666:	d019      	beq.n	800a69c <__gethex+0x260>
 800a668:	f1bb 0f20 	cmp.w	fp, #32
 800a66c:	d107      	bne.n	800a67e <__gethex+0x242>
 800a66e:	9b02      	ldr	r3, [sp, #8]
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	f843 2b04 	str.w	r2, [r3], #4
 800a676:	9302      	str	r3, [sp, #8]
 800a678:	2300      	movs	r3, #0
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	469b      	mov	fp, r3
 800a67e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a682:	f7ff fec5 	bl	800a410 <__hexdig_fun>
 800a686:	9b00      	ldr	r3, [sp, #0]
 800a688:	f000 000f 	and.w	r0, r0, #15
 800a68c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a690:	4303      	orrs	r3, r0
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	f10b 0b04 	add.w	fp, fp, #4
 800a698:	9b03      	ldr	r3, [sp, #12]
 800a69a:	e00d      	b.n	800a6b8 <__gethex+0x27c>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	9a06      	ldr	r2, [sp, #24]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	42bb      	cmp	r3, r7
 800a6a4:	d3e0      	bcc.n	800a668 <__gethex+0x22c>
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	9901      	ldr	r1, [sp, #4]
 800a6aa:	9307      	str	r3, [sp, #28]
 800a6ac:	4652      	mov	r2, sl
 800a6ae:	f001 f927 	bl	800b900 <strncmp>
 800a6b2:	9b07      	ldr	r3, [sp, #28]
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d1d7      	bne.n	800a668 <__gethex+0x22c>
 800a6b8:	461e      	mov	r6, r3
 800a6ba:	e78b      	b.n	800a5d4 <__gethex+0x198>
 800a6bc:	f04f 0a03 	mov.w	sl, #3
 800a6c0:	e7b8      	b.n	800a634 <__gethex+0x1f8>
 800a6c2:	da0a      	bge.n	800a6da <__gethex+0x29e>
 800a6c4:	1a37      	subs	r7, r6, r0
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	ee18 0a10 	vmov	r0, s16
 800a6cc:	463a      	mov	r2, r7
 800a6ce:	f000 fc45 	bl	800af5c <__lshift>
 800a6d2:	1bed      	subs	r5, r5, r7
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	f100 0914 	add.w	r9, r0, #20
 800a6da:	f04f 0a00 	mov.w	sl, #0
 800a6de:	e7ae      	b.n	800a63e <__gethex+0x202>
 800a6e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6e4:	42a8      	cmp	r0, r5
 800a6e6:	dd72      	ble.n	800a7ce <__gethex+0x392>
 800a6e8:	1b45      	subs	r5, r0, r5
 800a6ea:	42ae      	cmp	r6, r5
 800a6ec:	dc36      	bgt.n	800a75c <__gethex+0x320>
 800a6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6f2:	2b02      	cmp	r3, #2
 800a6f4:	d02a      	beq.n	800a74c <__gethex+0x310>
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d02c      	beq.n	800a754 <__gethex+0x318>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d11c      	bne.n	800a738 <__gethex+0x2fc>
 800a6fe:	42ae      	cmp	r6, r5
 800a700:	d11a      	bne.n	800a738 <__gethex+0x2fc>
 800a702:	2e01      	cmp	r6, #1
 800a704:	d112      	bne.n	800a72c <__gethex+0x2f0>
 800a706:	9a04      	ldr	r2, [sp, #16]
 800a708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a70c:	6013      	str	r3, [r2, #0]
 800a70e:	2301      	movs	r3, #1
 800a710:	6123      	str	r3, [r4, #16]
 800a712:	f8c9 3000 	str.w	r3, [r9]
 800a716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a718:	2762      	movs	r7, #98	; 0x62
 800a71a:	601c      	str	r4, [r3, #0]
 800a71c:	e723      	b.n	800a566 <__gethex+0x12a>
 800a71e:	bf00      	nop
 800a720:	0800eb98 	.word	0x0800eb98
 800a724:	0800eb20 	.word	0x0800eb20
 800a728:	0800eb31 	.word	0x0800eb31
 800a72c:	1e71      	subs	r1, r6, #1
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fe58 	bl	800b3e4 <__any_on>
 800a734:	2800      	cmp	r0, #0
 800a736:	d1e6      	bne.n	800a706 <__gethex+0x2ca>
 800a738:	ee18 0a10 	vmov	r0, s16
 800a73c:	4621      	mov	r1, r4
 800a73e:	f000 f9f1 	bl	800ab24 <_Bfree>
 800a742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a744:	2300      	movs	r3, #0
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	2750      	movs	r7, #80	; 0x50
 800a74a:	e70c      	b.n	800a566 <__gethex+0x12a>
 800a74c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1f2      	bne.n	800a738 <__gethex+0x2fc>
 800a752:	e7d8      	b.n	800a706 <__gethex+0x2ca>
 800a754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1d5      	bne.n	800a706 <__gethex+0x2ca>
 800a75a:	e7ed      	b.n	800a738 <__gethex+0x2fc>
 800a75c:	1e6f      	subs	r7, r5, #1
 800a75e:	f1ba 0f00 	cmp.w	sl, #0
 800a762:	d131      	bne.n	800a7c8 <__gethex+0x38c>
 800a764:	b127      	cbz	r7, 800a770 <__gethex+0x334>
 800a766:	4639      	mov	r1, r7
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fe3b 	bl	800b3e4 <__any_on>
 800a76e:	4682      	mov	sl, r0
 800a770:	117b      	asrs	r3, r7, #5
 800a772:	2101      	movs	r1, #1
 800a774:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a778:	f007 071f 	and.w	r7, r7, #31
 800a77c:	fa01 f707 	lsl.w	r7, r1, r7
 800a780:	421f      	tst	r7, r3
 800a782:	4629      	mov	r1, r5
 800a784:	4620      	mov	r0, r4
 800a786:	bf18      	it	ne
 800a788:	f04a 0a02 	orrne.w	sl, sl, #2
 800a78c:	1b76      	subs	r6, r6, r5
 800a78e:	f7ff fded 	bl	800a36c <rshift>
 800a792:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a796:	2702      	movs	r7, #2
 800a798:	f1ba 0f00 	cmp.w	sl, #0
 800a79c:	d048      	beq.n	800a830 <__gethex+0x3f4>
 800a79e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d015      	beq.n	800a7d2 <__gethex+0x396>
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d017      	beq.n	800a7da <__gethex+0x39e>
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d109      	bne.n	800a7c2 <__gethex+0x386>
 800a7ae:	f01a 0f02 	tst.w	sl, #2
 800a7b2:	d006      	beq.n	800a7c2 <__gethex+0x386>
 800a7b4:	f8d9 0000 	ldr.w	r0, [r9]
 800a7b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7bc:	f01a 0f01 	tst.w	sl, #1
 800a7c0:	d10e      	bne.n	800a7e0 <__gethex+0x3a4>
 800a7c2:	f047 0710 	orr.w	r7, r7, #16
 800a7c6:	e033      	b.n	800a830 <__gethex+0x3f4>
 800a7c8:	f04f 0a01 	mov.w	sl, #1
 800a7cc:	e7d0      	b.n	800a770 <__gethex+0x334>
 800a7ce:	2701      	movs	r7, #1
 800a7d0:	e7e2      	b.n	800a798 <__gethex+0x35c>
 800a7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d4:	f1c3 0301 	rsb	r3, r3, #1
 800a7d8:	9315      	str	r3, [sp, #84]	; 0x54
 800a7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0f0      	beq.n	800a7c2 <__gethex+0x386>
 800a7e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7e4:	f104 0314 	add.w	r3, r4, #20
 800a7e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7f0:	f04f 0c00 	mov.w	ip, #0
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7fe:	d01c      	beq.n	800a83a <__gethex+0x3fe>
 800a800:	3201      	adds	r2, #1
 800a802:	6002      	str	r2, [r0, #0]
 800a804:	2f02      	cmp	r7, #2
 800a806:	f104 0314 	add.w	r3, r4, #20
 800a80a:	d13f      	bne.n	800a88c <__gethex+0x450>
 800a80c:	f8d8 2000 	ldr.w	r2, [r8]
 800a810:	3a01      	subs	r2, #1
 800a812:	42b2      	cmp	r2, r6
 800a814:	d10a      	bne.n	800a82c <__gethex+0x3f0>
 800a816:	1171      	asrs	r1, r6, #5
 800a818:	2201      	movs	r2, #1
 800a81a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a81e:	f006 061f 	and.w	r6, r6, #31
 800a822:	fa02 f606 	lsl.w	r6, r2, r6
 800a826:	421e      	tst	r6, r3
 800a828:	bf18      	it	ne
 800a82a:	4617      	movne	r7, r2
 800a82c:	f047 0720 	orr.w	r7, r7, #32
 800a830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a832:	601c      	str	r4, [r3, #0]
 800a834:	9b04      	ldr	r3, [sp, #16]
 800a836:	601d      	str	r5, [r3, #0]
 800a838:	e695      	b.n	800a566 <__gethex+0x12a>
 800a83a:	4299      	cmp	r1, r3
 800a83c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a840:	d8d8      	bhi.n	800a7f4 <__gethex+0x3b8>
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	459b      	cmp	fp, r3
 800a846:	db19      	blt.n	800a87c <__gethex+0x440>
 800a848:	6861      	ldr	r1, [r4, #4]
 800a84a:	ee18 0a10 	vmov	r0, s16
 800a84e:	3101      	adds	r1, #1
 800a850:	f000 f928 	bl	800aaa4 <_Balloc>
 800a854:	4681      	mov	r9, r0
 800a856:	b918      	cbnz	r0, 800a860 <__gethex+0x424>
 800a858:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <__gethex+0x488>)
 800a85a:	4602      	mov	r2, r0
 800a85c:	2184      	movs	r1, #132	; 0x84
 800a85e:	e6a8      	b.n	800a5b2 <__gethex+0x176>
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	3202      	adds	r2, #2
 800a864:	f104 010c 	add.w	r1, r4, #12
 800a868:	0092      	lsls	r2, r2, #2
 800a86a:	300c      	adds	r0, #12
 800a86c:	f000 f90c 	bl	800aa88 <memcpy>
 800a870:	4621      	mov	r1, r4
 800a872:	ee18 0a10 	vmov	r0, s16
 800a876:	f000 f955 	bl	800ab24 <_Bfree>
 800a87a:	464c      	mov	r4, r9
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	1c5a      	adds	r2, r3, #1
 800a880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a884:	6122      	str	r2, [r4, #16]
 800a886:	2201      	movs	r2, #1
 800a888:	615a      	str	r2, [r3, #20]
 800a88a:	e7bb      	b.n	800a804 <__gethex+0x3c8>
 800a88c:	6922      	ldr	r2, [r4, #16]
 800a88e:	455a      	cmp	r2, fp
 800a890:	dd0b      	ble.n	800a8aa <__gethex+0x46e>
 800a892:	2101      	movs	r1, #1
 800a894:	4620      	mov	r0, r4
 800a896:	f7ff fd69 	bl	800a36c <rshift>
 800a89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a89e:	3501      	adds	r5, #1
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	f6ff aed0 	blt.w	800a646 <__gethex+0x20a>
 800a8a6:	2701      	movs	r7, #1
 800a8a8:	e7c0      	b.n	800a82c <__gethex+0x3f0>
 800a8aa:	f016 061f 	ands.w	r6, r6, #31
 800a8ae:	d0fa      	beq.n	800a8a6 <__gethex+0x46a>
 800a8b0:	4453      	add	r3, sl
 800a8b2:	f1c6 0620 	rsb	r6, r6, #32
 800a8b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8ba:	f000 f9e5 	bl	800ac88 <__hi0bits>
 800a8be:	42b0      	cmp	r0, r6
 800a8c0:	dbe7      	blt.n	800a892 <__gethex+0x456>
 800a8c2:	e7f0      	b.n	800a8a6 <__gethex+0x46a>
 800a8c4:	0800eb20 	.word	0x0800eb20

0800a8c8 <L_shift>:
 800a8c8:	f1c2 0208 	rsb	r2, r2, #8
 800a8cc:	0092      	lsls	r2, r2, #2
 800a8ce:	b570      	push	{r4, r5, r6, lr}
 800a8d0:	f1c2 0620 	rsb	r6, r2, #32
 800a8d4:	6843      	ldr	r3, [r0, #4]
 800a8d6:	6804      	ldr	r4, [r0, #0]
 800a8d8:	fa03 f506 	lsl.w	r5, r3, r6
 800a8dc:	432c      	orrs	r4, r5
 800a8de:	40d3      	lsrs	r3, r2
 800a8e0:	6004      	str	r4, [r0, #0]
 800a8e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8e6:	4288      	cmp	r0, r1
 800a8e8:	d3f4      	bcc.n	800a8d4 <L_shift+0xc>
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}

0800a8ec <__match>:
 800a8ec:	b530      	push	{r4, r5, lr}
 800a8ee:	6803      	ldr	r3, [r0, #0]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f6:	b914      	cbnz	r4, 800a8fe <__match+0x12>
 800a8f8:	6003      	str	r3, [r0, #0]
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	bd30      	pop	{r4, r5, pc}
 800a8fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a906:	2d19      	cmp	r5, #25
 800a908:	bf98      	it	ls
 800a90a:	3220      	addls	r2, #32
 800a90c:	42a2      	cmp	r2, r4
 800a90e:	d0f0      	beq.n	800a8f2 <__match+0x6>
 800a910:	2000      	movs	r0, #0
 800a912:	e7f3      	b.n	800a8fc <__match+0x10>

0800a914 <__hexnan>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	680b      	ldr	r3, [r1, #0]
 800a91a:	115e      	asrs	r6, r3, #5
 800a91c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a920:	f013 031f 	ands.w	r3, r3, #31
 800a924:	b087      	sub	sp, #28
 800a926:	bf18      	it	ne
 800a928:	3604      	addne	r6, #4
 800a92a:	2500      	movs	r5, #0
 800a92c:	1f37      	subs	r7, r6, #4
 800a92e:	4690      	mov	r8, r2
 800a930:	6802      	ldr	r2, [r0, #0]
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	4682      	mov	sl, r0
 800a936:	f846 5c04 	str.w	r5, [r6, #-4]
 800a93a:	46b9      	mov	r9, r7
 800a93c:	463c      	mov	r4, r7
 800a93e:	9502      	str	r5, [sp, #8]
 800a940:	46ab      	mov	fp, r5
 800a942:	7851      	ldrb	r1, [r2, #1]
 800a944:	1c53      	adds	r3, r2, #1
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	b341      	cbz	r1, 800a99c <__hexnan+0x88>
 800a94a:	4608      	mov	r0, r1
 800a94c:	9205      	str	r2, [sp, #20]
 800a94e:	9104      	str	r1, [sp, #16]
 800a950:	f7ff fd5e 	bl	800a410 <__hexdig_fun>
 800a954:	2800      	cmp	r0, #0
 800a956:	d14f      	bne.n	800a9f8 <__hexnan+0xe4>
 800a958:	9904      	ldr	r1, [sp, #16]
 800a95a:	9a05      	ldr	r2, [sp, #20]
 800a95c:	2920      	cmp	r1, #32
 800a95e:	d818      	bhi.n	800a992 <__hexnan+0x7e>
 800a960:	9b02      	ldr	r3, [sp, #8]
 800a962:	459b      	cmp	fp, r3
 800a964:	dd13      	ble.n	800a98e <__hexnan+0x7a>
 800a966:	454c      	cmp	r4, r9
 800a968:	d206      	bcs.n	800a978 <__hexnan+0x64>
 800a96a:	2d07      	cmp	r5, #7
 800a96c:	dc04      	bgt.n	800a978 <__hexnan+0x64>
 800a96e:	462a      	mov	r2, r5
 800a970:	4649      	mov	r1, r9
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff ffa8 	bl	800a8c8 <L_shift>
 800a978:	4544      	cmp	r4, r8
 800a97a:	d950      	bls.n	800aa1e <__hexnan+0x10a>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f1a4 0904 	sub.w	r9, r4, #4
 800a982:	f844 3c04 	str.w	r3, [r4, #-4]
 800a986:	f8cd b008 	str.w	fp, [sp, #8]
 800a98a:	464c      	mov	r4, r9
 800a98c:	461d      	mov	r5, r3
 800a98e:	9a03      	ldr	r2, [sp, #12]
 800a990:	e7d7      	b.n	800a942 <__hexnan+0x2e>
 800a992:	2929      	cmp	r1, #41	; 0x29
 800a994:	d156      	bne.n	800aa44 <__hexnan+0x130>
 800a996:	3202      	adds	r2, #2
 800a998:	f8ca 2000 	str.w	r2, [sl]
 800a99c:	f1bb 0f00 	cmp.w	fp, #0
 800a9a0:	d050      	beq.n	800aa44 <__hexnan+0x130>
 800a9a2:	454c      	cmp	r4, r9
 800a9a4:	d206      	bcs.n	800a9b4 <__hexnan+0xa0>
 800a9a6:	2d07      	cmp	r5, #7
 800a9a8:	dc04      	bgt.n	800a9b4 <__hexnan+0xa0>
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f7ff ff8a 	bl	800a8c8 <L_shift>
 800a9b4:	4544      	cmp	r4, r8
 800a9b6:	d934      	bls.n	800aa22 <__hexnan+0x10e>
 800a9b8:	f1a8 0204 	sub.w	r2, r8, #4
 800a9bc:	4623      	mov	r3, r4
 800a9be:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9c6:	429f      	cmp	r7, r3
 800a9c8:	d2f9      	bcs.n	800a9be <__hexnan+0xaa>
 800a9ca:	1b3b      	subs	r3, r7, r4
 800a9cc:	f023 0303 	bic.w	r3, r3, #3
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	3401      	adds	r4, #1
 800a9d4:	3e03      	subs	r6, #3
 800a9d6:	42b4      	cmp	r4, r6
 800a9d8:	bf88      	it	hi
 800a9da:	2304      	movhi	r3, #4
 800a9dc:	4443      	add	r3, r8
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f843 2b04 	str.w	r2, [r3], #4
 800a9e4:	429f      	cmp	r7, r3
 800a9e6:	d2fb      	bcs.n	800a9e0 <__hexnan+0xcc>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	b91b      	cbnz	r3, 800a9f4 <__hexnan+0xe0>
 800a9ec:	4547      	cmp	r7, r8
 800a9ee:	d127      	bne.n	800aa40 <__hexnan+0x12c>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	2005      	movs	r0, #5
 800a9f6:	e026      	b.n	800aa46 <__hexnan+0x132>
 800a9f8:	3501      	adds	r5, #1
 800a9fa:	2d08      	cmp	r5, #8
 800a9fc:	f10b 0b01 	add.w	fp, fp, #1
 800aa00:	dd06      	ble.n	800aa10 <__hexnan+0xfc>
 800aa02:	4544      	cmp	r4, r8
 800aa04:	d9c3      	bls.n	800a98e <__hexnan+0x7a>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa0c:	2501      	movs	r5, #1
 800aa0e:	3c04      	subs	r4, #4
 800aa10:	6822      	ldr	r2, [r4, #0]
 800aa12:	f000 000f 	and.w	r0, r0, #15
 800aa16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	e7b7      	b.n	800a98e <__hexnan+0x7a>
 800aa1e:	2508      	movs	r5, #8
 800aa20:	e7b5      	b.n	800a98e <__hexnan+0x7a>
 800aa22:	9b01      	ldr	r3, [sp, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0df      	beq.n	800a9e8 <__hexnan+0xd4>
 800aa28:	f04f 32ff 	mov.w	r2, #4294967295
 800aa2c:	f1c3 0320 	rsb	r3, r3, #32
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa38:	401a      	ands	r2, r3
 800aa3a:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa3e:	e7d3      	b.n	800a9e8 <__hexnan+0xd4>
 800aa40:	3f04      	subs	r7, #4
 800aa42:	e7d1      	b.n	800a9e8 <__hexnan+0xd4>
 800aa44:	2004      	movs	r0, #4
 800aa46:	b007      	add	sp, #28
 800aa48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa4c <_localeconv_r>:
 800aa4c:	4800      	ldr	r0, [pc, #0]	; (800aa50 <_localeconv_r+0x4>)
 800aa4e:	4770      	bx	lr
 800aa50:	20000174 	.word	0x20000174

0800aa54 <malloc>:
 800aa54:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <malloc+0xc>)
 800aa56:	4601      	mov	r1, r0
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	f000 bd67 	b.w	800b52c <_malloc_r>
 800aa5e:	bf00      	nop
 800aa60:	2000001c 	.word	0x2000001c

0800aa64 <__ascii_mbtowc>:
 800aa64:	b082      	sub	sp, #8
 800aa66:	b901      	cbnz	r1, 800aa6a <__ascii_mbtowc+0x6>
 800aa68:	a901      	add	r1, sp, #4
 800aa6a:	b142      	cbz	r2, 800aa7e <__ascii_mbtowc+0x1a>
 800aa6c:	b14b      	cbz	r3, 800aa82 <__ascii_mbtowc+0x1e>
 800aa6e:	7813      	ldrb	r3, [r2, #0]
 800aa70:	600b      	str	r3, [r1, #0]
 800aa72:	7812      	ldrb	r2, [r2, #0]
 800aa74:	1e10      	subs	r0, r2, #0
 800aa76:	bf18      	it	ne
 800aa78:	2001      	movne	r0, #1
 800aa7a:	b002      	add	sp, #8
 800aa7c:	4770      	bx	lr
 800aa7e:	4610      	mov	r0, r2
 800aa80:	e7fb      	b.n	800aa7a <__ascii_mbtowc+0x16>
 800aa82:	f06f 0001 	mvn.w	r0, #1
 800aa86:	e7f8      	b.n	800aa7a <__ascii_mbtowc+0x16>

0800aa88 <memcpy>:
 800aa88:	440a      	add	r2, r1
 800aa8a:	4291      	cmp	r1, r2
 800aa8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa90:	d100      	bne.n	800aa94 <memcpy+0xc>
 800aa92:	4770      	bx	lr
 800aa94:	b510      	push	{r4, lr}
 800aa96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa9e:	4291      	cmp	r1, r2
 800aaa0:	d1f9      	bne.n	800aa96 <memcpy+0xe>
 800aaa2:	bd10      	pop	{r4, pc}

0800aaa4 <_Balloc>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	460d      	mov	r5, r1
 800aaac:	b976      	cbnz	r6, 800aacc <_Balloc+0x28>
 800aaae:	2010      	movs	r0, #16
 800aab0:	f7ff ffd0 	bl	800aa54 <malloc>
 800aab4:	4602      	mov	r2, r0
 800aab6:	6260      	str	r0, [r4, #36]	; 0x24
 800aab8:	b920      	cbnz	r0, 800aac4 <_Balloc+0x20>
 800aaba:	4b18      	ldr	r3, [pc, #96]	; (800ab1c <_Balloc+0x78>)
 800aabc:	4818      	ldr	r0, [pc, #96]	; (800ab20 <_Balloc+0x7c>)
 800aabe:	2166      	movs	r1, #102	; 0x66
 800aac0:	f000 ff40 	bl	800b944 <__assert_func>
 800aac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aac8:	6006      	str	r6, [r0, #0]
 800aaca:	60c6      	str	r6, [r0, #12]
 800aacc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aace:	68f3      	ldr	r3, [r6, #12]
 800aad0:	b183      	cbz	r3, 800aaf4 <_Balloc+0x50>
 800aad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aada:	b9b8      	cbnz	r0, 800ab0c <_Balloc+0x68>
 800aadc:	2101      	movs	r1, #1
 800aade:	fa01 f605 	lsl.w	r6, r1, r5
 800aae2:	1d72      	adds	r2, r6, #5
 800aae4:	0092      	lsls	r2, r2, #2
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fc9d 	bl	800b426 <_calloc_r>
 800aaec:	b160      	cbz	r0, 800ab08 <_Balloc+0x64>
 800aaee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaf2:	e00e      	b.n	800ab12 <_Balloc+0x6e>
 800aaf4:	2221      	movs	r2, #33	; 0x21
 800aaf6:	2104      	movs	r1, #4
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fc94 	bl	800b426 <_calloc_r>
 800aafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab00:	60f0      	str	r0, [r6, #12]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e4      	bne.n	800aad2 <_Balloc+0x2e>
 800ab08:	2000      	movs	r0, #0
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	6802      	ldr	r2, [r0, #0]
 800ab0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab12:	2300      	movs	r3, #0
 800ab14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab18:	e7f7      	b.n	800ab0a <_Balloc+0x66>
 800ab1a:	bf00      	nop
 800ab1c:	0800eaae 	.word	0x0800eaae
 800ab20:	0800ebac 	.word	0x0800ebac

0800ab24 <_Bfree>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab28:	4605      	mov	r5, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	b976      	cbnz	r6, 800ab4c <_Bfree+0x28>
 800ab2e:	2010      	movs	r0, #16
 800ab30:	f7ff ff90 	bl	800aa54 <malloc>
 800ab34:	4602      	mov	r2, r0
 800ab36:	6268      	str	r0, [r5, #36]	; 0x24
 800ab38:	b920      	cbnz	r0, 800ab44 <_Bfree+0x20>
 800ab3a:	4b09      	ldr	r3, [pc, #36]	; (800ab60 <_Bfree+0x3c>)
 800ab3c:	4809      	ldr	r0, [pc, #36]	; (800ab64 <_Bfree+0x40>)
 800ab3e:	218a      	movs	r1, #138	; 0x8a
 800ab40:	f000 ff00 	bl	800b944 <__assert_func>
 800ab44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab48:	6006      	str	r6, [r0, #0]
 800ab4a:	60c6      	str	r6, [r0, #12]
 800ab4c:	b13c      	cbz	r4, 800ab5e <_Bfree+0x3a>
 800ab4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab50:	6862      	ldr	r2, [r4, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab58:	6021      	str	r1, [r4, #0]
 800ab5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}
 800ab60:	0800eaae 	.word	0x0800eaae
 800ab64:	0800ebac 	.word	0x0800ebac

0800ab68 <__multadd>:
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	690d      	ldr	r5, [r1, #16]
 800ab6e:	4607      	mov	r7, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	461e      	mov	r6, r3
 800ab74:	f101 0c14 	add.w	ip, r1, #20
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f8dc 3000 	ldr.w	r3, [ip]
 800ab7e:	b299      	uxth	r1, r3
 800ab80:	fb02 6101 	mla	r1, r2, r1, r6
 800ab84:	0c1e      	lsrs	r6, r3, #16
 800ab86:	0c0b      	lsrs	r3, r1, #16
 800ab88:	fb02 3306 	mla	r3, r2, r6, r3
 800ab8c:	b289      	uxth	r1, r1
 800ab8e:	3001      	adds	r0, #1
 800ab90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab94:	4285      	cmp	r5, r0
 800ab96:	f84c 1b04 	str.w	r1, [ip], #4
 800ab9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab9e:	dcec      	bgt.n	800ab7a <__multadd+0x12>
 800aba0:	b30e      	cbz	r6, 800abe6 <__multadd+0x7e>
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	42ab      	cmp	r3, r5
 800aba6:	dc19      	bgt.n	800abdc <__multadd+0x74>
 800aba8:	6861      	ldr	r1, [r4, #4]
 800abaa:	4638      	mov	r0, r7
 800abac:	3101      	adds	r1, #1
 800abae:	f7ff ff79 	bl	800aaa4 <_Balloc>
 800abb2:	4680      	mov	r8, r0
 800abb4:	b928      	cbnz	r0, 800abc2 <__multadd+0x5a>
 800abb6:	4602      	mov	r2, r0
 800abb8:	4b0c      	ldr	r3, [pc, #48]	; (800abec <__multadd+0x84>)
 800abba:	480d      	ldr	r0, [pc, #52]	; (800abf0 <__multadd+0x88>)
 800abbc:	21b5      	movs	r1, #181	; 0xb5
 800abbe:	f000 fec1 	bl	800b944 <__assert_func>
 800abc2:	6922      	ldr	r2, [r4, #16]
 800abc4:	3202      	adds	r2, #2
 800abc6:	f104 010c 	add.w	r1, r4, #12
 800abca:	0092      	lsls	r2, r2, #2
 800abcc:	300c      	adds	r0, #12
 800abce:	f7ff ff5b 	bl	800aa88 <memcpy>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff ffa5 	bl	800ab24 <_Bfree>
 800abda:	4644      	mov	r4, r8
 800abdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abe0:	3501      	adds	r5, #1
 800abe2:	615e      	str	r6, [r3, #20]
 800abe4:	6125      	str	r5, [r4, #16]
 800abe6:	4620      	mov	r0, r4
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	0800eb20 	.word	0x0800eb20
 800abf0:	0800ebac 	.word	0x0800ebac

0800abf4 <__s2b>:
 800abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	460c      	mov	r4, r1
 800abfa:	4615      	mov	r5, r2
 800abfc:	461f      	mov	r7, r3
 800abfe:	2209      	movs	r2, #9
 800ac00:	3308      	adds	r3, #8
 800ac02:	4606      	mov	r6, r0
 800ac04:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	db09      	blt.n	800ac24 <__s2b+0x30>
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7ff ff47 	bl	800aaa4 <_Balloc>
 800ac16:	b940      	cbnz	r0, 800ac2a <__s2b+0x36>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4b19      	ldr	r3, [pc, #100]	; (800ac80 <__s2b+0x8c>)
 800ac1c:	4819      	ldr	r0, [pc, #100]	; (800ac84 <__s2b+0x90>)
 800ac1e:	21ce      	movs	r1, #206	; 0xce
 800ac20:	f000 fe90 	bl	800b944 <__assert_func>
 800ac24:	0052      	lsls	r2, r2, #1
 800ac26:	3101      	adds	r1, #1
 800ac28:	e7f0      	b.n	800ac0c <__s2b+0x18>
 800ac2a:	9b08      	ldr	r3, [sp, #32]
 800ac2c:	6143      	str	r3, [r0, #20]
 800ac2e:	2d09      	cmp	r5, #9
 800ac30:	f04f 0301 	mov.w	r3, #1
 800ac34:	6103      	str	r3, [r0, #16]
 800ac36:	dd16      	ble.n	800ac66 <__s2b+0x72>
 800ac38:	f104 0909 	add.w	r9, r4, #9
 800ac3c:	46c8      	mov	r8, r9
 800ac3e:	442c      	add	r4, r5
 800ac40:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac44:	4601      	mov	r1, r0
 800ac46:	3b30      	subs	r3, #48	; 0x30
 800ac48:	220a      	movs	r2, #10
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ff8c 	bl	800ab68 <__multadd>
 800ac50:	45a0      	cmp	r8, r4
 800ac52:	d1f5      	bne.n	800ac40 <__s2b+0x4c>
 800ac54:	f1a5 0408 	sub.w	r4, r5, #8
 800ac58:	444c      	add	r4, r9
 800ac5a:	1b2d      	subs	r5, r5, r4
 800ac5c:	1963      	adds	r3, r4, r5
 800ac5e:	42bb      	cmp	r3, r7
 800ac60:	db04      	blt.n	800ac6c <__s2b+0x78>
 800ac62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac66:	340a      	adds	r4, #10
 800ac68:	2509      	movs	r5, #9
 800ac6a:	e7f6      	b.n	800ac5a <__s2b+0x66>
 800ac6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac70:	4601      	mov	r1, r0
 800ac72:	3b30      	subs	r3, #48	; 0x30
 800ac74:	220a      	movs	r2, #10
 800ac76:	4630      	mov	r0, r6
 800ac78:	f7ff ff76 	bl	800ab68 <__multadd>
 800ac7c:	e7ee      	b.n	800ac5c <__s2b+0x68>
 800ac7e:	bf00      	nop
 800ac80:	0800eb20 	.word	0x0800eb20
 800ac84:	0800ebac 	.word	0x0800ebac

0800ac88 <__hi0bits>:
 800ac88:	0c03      	lsrs	r3, r0, #16
 800ac8a:	041b      	lsls	r3, r3, #16
 800ac8c:	b9d3      	cbnz	r3, 800acc4 <__hi0bits+0x3c>
 800ac8e:	0400      	lsls	r0, r0, #16
 800ac90:	2310      	movs	r3, #16
 800ac92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac96:	bf04      	itt	eq
 800ac98:	0200      	lsleq	r0, r0, #8
 800ac9a:	3308      	addeq	r3, #8
 800ac9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aca0:	bf04      	itt	eq
 800aca2:	0100      	lsleq	r0, r0, #4
 800aca4:	3304      	addeq	r3, #4
 800aca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acaa:	bf04      	itt	eq
 800acac:	0080      	lsleq	r0, r0, #2
 800acae:	3302      	addeq	r3, #2
 800acb0:	2800      	cmp	r0, #0
 800acb2:	db05      	blt.n	800acc0 <__hi0bits+0x38>
 800acb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acb8:	f103 0301 	add.w	r3, r3, #1
 800acbc:	bf08      	it	eq
 800acbe:	2320      	moveq	r3, #32
 800acc0:	4618      	mov	r0, r3
 800acc2:	4770      	bx	lr
 800acc4:	2300      	movs	r3, #0
 800acc6:	e7e4      	b.n	800ac92 <__hi0bits+0xa>

0800acc8 <__lo0bits>:
 800acc8:	6803      	ldr	r3, [r0, #0]
 800acca:	f013 0207 	ands.w	r2, r3, #7
 800acce:	4601      	mov	r1, r0
 800acd0:	d00b      	beq.n	800acea <__lo0bits+0x22>
 800acd2:	07da      	lsls	r2, r3, #31
 800acd4:	d423      	bmi.n	800ad1e <__lo0bits+0x56>
 800acd6:	0798      	lsls	r0, r3, #30
 800acd8:	bf49      	itett	mi
 800acda:	085b      	lsrmi	r3, r3, #1
 800acdc:	089b      	lsrpl	r3, r3, #2
 800acde:	2001      	movmi	r0, #1
 800ace0:	600b      	strmi	r3, [r1, #0]
 800ace2:	bf5c      	itt	pl
 800ace4:	600b      	strpl	r3, [r1, #0]
 800ace6:	2002      	movpl	r0, #2
 800ace8:	4770      	bx	lr
 800acea:	b298      	uxth	r0, r3
 800acec:	b9a8      	cbnz	r0, 800ad1a <__lo0bits+0x52>
 800acee:	0c1b      	lsrs	r3, r3, #16
 800acf0:	2010      	movs	r0, #16
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	b90a      	cbnz	r2, 800acfa <__lo0bits+0x32>
 800acf6:	3008      	adds	r0, #8
 800acf8:	0a1b      	lsrs	r3, r3, #8
 800acfa:	071a      	lsls	r2, r3, #28
 800acfc:	bf04      	itt	eq
 800acfe:	091b      	lsreq	r3, r3, #4
 800ad00:	3004      	addeq	r0, #4
 800ad02:	079a      	lsls	r2, r3, #30
 800ad04:	bf04      	itt	eq
 800ad06:	089b      	lsreq	r3, r3, #2
 800ad08:	3002      	addeq	r0, #2
 800ad0a:	07da      	lsls	r2, r3, #31
 800ad0c:	d403      	bmi.n	800ad16 <__lo0bits+0x4e>
 800ad0e:	085b      	lsrs	r3, r3, #1
 800ad10:	f100 0001 	add.w	r0, r0, #1
 800ad14:	d005      	beq.n	800ad22 <__lo0bits+0x5a>
 800ad16:	600b      	str	r3, [r1, #0]
 800ad18:	4770      	bx	lr
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	e7e9      	b.n	800acf2 <__lo0bits+0x2a>
 800ad1e:	2000      	movs	r0, #0
 800ad20:	4770      	bx	lr
 800ad22:	2020      	movs	r0, #32
 800ad24:	4770      	bx	lr
	...

0800ad28 <__i2b>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	f7ff feb9 	bl	800aaa4 <_Balloc>
 800ad32:	4602      	mov	r2, r0
 800ad34:	b928      	cbnz	r0, 800ad42 <__i2b+0x1a>
 800ad36:	4b05      	ldr	r3, [pc, #20]	; (800ad4c <__i2b+0x24>)
 800ad38:	4805      	ldr	r0, [pc, #20]	; (800ad50 <__i2b+0x28>)
 800ad3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad3e:	f000 fe01 	bl	800b944 <__assert_func>
 800ad42:	2301      	movs	r3, #1
 800ad44:	6144      	str	r4, [r0, #20]
 800ad46:	6103      	str	r3, [r0, #16]
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	bf00      	nop
 800ad4c:	0800eb20 	.word	0x0800eb20
 800ad50:	0800ebac 	.word	0x0800ebac

0800ad54 <__multiply>:
 800ad54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad58:	4691      	mov	r9, r2
 800ad5a:	690a      	ldr	r2, [r1, #16]
 800ad5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	bfb8      	it	lt
 800ad64:	460b      	movlt	r3, r1
 800ad66:	460c      	mov	r4, r1
 800ad68:	bfbc      	itt	lt
 800ad6a:	464c      	movlt	r4, r9
 800ad6c:	4699      	movlt	r9, r3
 800ad6e:	6927      	ldr	r7, [r4, #16]
 800ad70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad74:	68a3      	ldr	r3, [r4, #8]
 800ad76:	6861      	ldr	r1, [r4, #4]
 800ad78:	eb07 060a 	add.w	r6, r7, sl
 800ad7c:	42b3      	cmp	r3, r6
 800ad7e:	b085      	sub	sp, #20
 800ad80:	bfb8      	it	lt
 800ad82:	3101      	addlt	r1, #1
 800ad84:	f7ff fe8e 	bl	800aaa4 <_Balloc>
 800ad88:	b930      	cbnz	r0, 800ad98 <__multiply+0x44>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	4b44      	ldr	r3, [pc, #272]	; (800aea0 <__multiply+0x14c>)
 800ad8e:	4845      	ldr	r0, [pc, #276]	; (800aea4 <__multiply+0x150>)
 800ad90:	f240 115d 	movw	r1, #349	; 0x15d
 800ad94:	f000 fdd6 	bl	800b944 <__assert_func>
 800ad98:	f100 0514 	add.w	r5, r0, #20
 800ad9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ada0:	462b      	mov	r3, r5
 800ada2:	2200      	movs	r2, #0
 800ada4:	4543      	cmp	r3, r8
 800ada6:	d321      	bcc.n	800adec <__multiply+0x98>
 800ada8:	f104 0314 	add.w	r3, r4, #20
 800adac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adb0:	f109 0314 	add.w	r3, r9, #20
 800adb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adb8:	9202      	str	r2, [sp, #8]
 800adba:	1b3a      	subs	r2, r7, r4
 800adbc:	3a15      	subs	r2, #21
 800adbe:	f022 0203 	bic.w	r2, r2, #3
 800adc2:	3204      	adds	r2, #4
 800adc4:	f104 0115 	add.w	r1, r4, #21
 800adc8:	428f      	cmp	r7, r1
 800adca:	bf38      	it	cc
 800adcc:	2204      	movcc	r2, #4
 800adce:	9201      	str	r2, [sp, #4]
 800add0:	9a02      	ldr	r2, [sp, #8]
 800add2:	9303      	str	r3, [sp, #12]
 800add4:	429a      	cmp	r2, r3
 800add6:	d80c      	bhi.n	800adf2 <__multiply+0x9e>
 800add8:	2e00      	cmp	r6, #0
 800adda:	dd03      	ble.n	800ade4 <__multiply+0x90>
 800addc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d05a      	beq.n	800ae9a <__multiply+0x146>
 800ade4:	6106      	str	r6, [r0, #16]
 800ade6:	b005      	add	sp, #20
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adec:	f843 2b04 	str.w	r2, [r3], #4
 800adf0:	e7d8      	b.n	800ada4 <__multiply+0x50>
 800adf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800adf6:	f1ba 0f00 	cmp.w	sl, #0
 800adfa:	d024      	beq.n	800ae46 <__multiply+0xf2>
 800adfc:	f104 0e14 	add.w	lr, r4, #20
 800ae00:	46a9      	mov	r9, r5
 800ae02:	f04f 0c00 	mov.w	ip, #0
 800ae06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae0a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae0e:	fa1f fb82 	uxth.w	fp, r2
 800ae12:	b289      	uxth	r1, r1
 800ae14:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae1c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae20:	4461      	add	r1, ip
 800ae22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae26:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae2e:	b289      	uxth	r1, r1
 800ae30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae34:	4577      	cmp	r7, lr
 800ae36:	f849 1b04 	str.w	r1, [r9], #4
 800ae3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae3e:	d8e2      	bhi.n	800ae06 <__multiply+0xb2>
 800ae40:	9a01      	ldr	r2, [sp, #4]
 800ae42:	f845 c002 	str.w	ip, [r5, r2]
 800ae46:	9a03      	ldr	r2, [sp, #12]
 800ae48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	f1b9 0f00 	cmp.w	r9, #0
 800ae52:	d020      	beq.n	800ae96 <__multiply+0x142>
 800ae54:	6829      	ldr	r1, [r5, #0]
 800ae56:	f104 0c14 	add.w	ip, r4, #20
 800ae5a:	46ae      	mov	lr, r5
 800ae5c:	f04f 0a00 	mov.w	sl, #0
 800ae60:	f8bc b000 	ldrh.w	fp, [ip]
 800ae64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae68:	fb09 220b 	mla	r2, r9, fp, r2
 800ae6c:	4492      	add	sl, r2
 800ae6e:	b289      	uxth	r1, r1
 800ae70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae74:	f84e 1b04 	str.w	r1, [lr], #4
 800ae78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae7c:	f8be 1000 	ldrh.w	r1, [lr]
 800ae80:	0c12      	lsrs	r2, r2, #16
 800ae82:	fb09 1102 	mla	r1, r9, r2, r1
 800ae86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae8a:	4567      	cmp	r7, ip
 800ae8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae90:	d8e6      	bhi.n	800ae60 <__multiply+0x10c>
 800ae92:	9a01      	ldr	r2, [sp, #4]
 800ae94:	50a9      	str	r1, [r5, r2]
 800ae96:	3504      	adds	r5, #4
 800ae98:	e79a      	b.n	800add0 <__multiply+0x7c>
 800ae9a:	3e01      	subs	r6, #1
 800ae9c:	e79c      	b.n	800add8 <__multiply+0x84>
 800ae9e:	bf00      	nop
 800aea0:	0800eb20 	.word	0x0800eb20
 800aea4:	0800ebac 	.word	0x0800ebac

0800aea8 <__pow5mult>:
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	4615      	mov	r5, r2
 800aeae:	f012 0203 	ands.w	r2, r2, #3
 800aeb2:	4606      	mov	r6, r0
 800aeb4:	460f      	mov	r7, r1
 800aeb6:	d007      	beq.n	800aec8 <__pow5mult+0x20>
 800aeb8:	4c25      	ldr	r4, [pc, #148]	; (800af50 <__pow5mult+0xa8>)
 800aeba:	3a01      	subs	r2, #1
 800aebc:	2300      	movs	r3, #0
 800aebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aec2:	f7ff fe51 	bl	800ab68 <__multadd>
 800aec6:	4607      	mov	r7, r0
 800aec8:	10ad      	asrs	r5, r5, #2
 800aeca:	d03d      	beq.n	800af48 <__pow5mult+0xa0>
 800aecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aece:	b97c      	cbnz	r4, 800aef0 <__pow5mult+0x48>
 800aed0:	2010      	movs	r0, #16
 800aed2:	f7ff fdbf 	bl	800aa54 <malloc>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6270      	str	r0, [r6, #36]	; 0x24
 800aeda:	b928      	cbnz	r0, 800aee8 <__pow5mult+0x40>
 800aedc:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <__pow5mult+0xac>)
 800aede:	481e      	ldr	r0, [pc, #120]	; (800af58 <__pow5mult+0xb0>)
 800aee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aee4:	f000 fd2e 	bl	800b944 <__assert_func>
 800aee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeec:	6004      	str	r4, [r0, #0]
 800aeee:	60c4      	str	r4, [r0, #12]
 800aef0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aef8:	b94c      	cbnz	r4, 800af0e <__pow5mult+0x66>
 800aefa:	f240 2171 	movw	r1, #625	; 0x271
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ff12 	bl	800ad28 <__i2b>
 800af04:	2300      	movs	r3, #0
 800af06:	f8c8 0008 	str.w	r0, [r8, #8]
 800af0a:	4604      	mov	r4, r0
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	f04f 0900 	mov.w	r9, #0
 800af12:	07eb      	lsls	r3, r5, #31
 800af14:	d50a      	bpl.n	800af2c <__pow5mult+0x84>
 800af16:	4639      	mov	r1, r7
 800af18:	4622      	mov	r2, r4
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ff1a 	bl	800ad54 <__multiply>
 800af20:	4639      	mov	r1, r7
 800af22:	4680      	mov	r8, r0
 800af24:	4630      	mov	r0, r6
 800af26:	f7ff fdfd 	bl	800ab24 <_Bfree>
 800af2a:	4647      	mov	r7, r8
 800af2c:	106d      	asrs	r5, r5, #1
 800af2e:	d00b      	beq.n	800af48 <__pow5mult+0xa0>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	b938      	cbnz	r0, 800af44 <__pow5mult+0x9c>
 800af34:	4622      	mov	r2, r4
 800af36:	4621      	mov	r1, r4
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff ff0b 	bl	800ad54 <__multiply>
 800af3e:	6020      	str	r0, [r4, #0]
 800af40:	f8c0 9000 	str.w	r9, [r0]
 800af44:	4604      	mov	r4, r0
 800af46:	e7e4      	b.n	800af12 <__pow5mult+0x6a>
 800af48:	4638      	mov	r0, r7
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	bf00      	nop
 800af50:	0800ecf8 	.word	0x0800ecf8
 800af54:	0800eaae 	.word	0x0800eaae
 800af58:	0800ebac 	.word	0x0800ebac

0800af5c <__lshift>:
 800af5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af60:	460c      	mov	r4, r1
 800af62:	6849      	ldr	r1, [r1, #4]
 800af64:	6923      	ldr	r3, [r4, #16]
 800af66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	4607      	mov	r7, r0
 800af6e:	4691      	mov	r9, r2
 800af70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af74:	f108 0601 	add.w	r6, r8, #1
 800af78:	42b3      	cmp	r3, r6
 800af7a:	db0b      	blt.n	800af94 <__lshift+0x38>
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7ff fd91 	bl	800aaa4 <_Balloc>
 800af82:	4605      	mov	r5, r0
 800af84:	b948      	cbnz	r0, 800af9a <__lshift+0x3e>
 800af86:	4602      	mov	r2, r0
 800af88:	4b2a      	ldr	r3, [pc, #168]	; (800b034 <__lshift+0xd8>)
 800af8a:	482b      	ldr	r0, [pc, #172]	; (800b038 <__lshift+0xdc>)
 800af8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af90:	f000 fcd8 	bl	800b944 <__assert_func>
 800af94:	3101      	adds	r1, #1
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	e7ee      	b.n	800af78 <__lshift+0x1c>
 800af9a:	2300      	movs	r3, #0
 800af9c:	f100 0114 	add.w	r1, r0, #20
 800afa0:	f100 0210 	add.w	r2, r0, #16
 800afa4:	4618      	mov	r0, r3
 800afa6:	4553      	cmp	r3, sl
 800afa8:	db37      	blt.n	800b01a <__lshift+0xbe>
 800afaa:	6920      	ldr	r0, [r4, #16]
 800afac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afb0:	f104 0314 	add.w	r3, r4, #20
 800afb4:	f019 091f 	ands.w	r9, r9, #31
 800afb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afc0:	d02f      	beq.n	800b022 <__lshift+0xc6>
 800afc2:	f1c9 0e20 	rsb	lr, r9, #32
 800afc6:	468a      	mov	sl, r1
 800afc8:	f04f 0c00 	mov.w	ip, #0
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	fa02 f209 	lsl.w	r2, r2, r9
 800afd2:	ea42 020c 	orr.w	r2, r2, ip
 800afd6:	f84a 2b04 	str.w	r2, [sl], #4
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	4298      	cmp	r0, r3
 800afe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800afe4:	d8f2      	bhi.n	800afcc <__lshift+0x70>
 800afe6:	1b03      	subs	r3, r0, r4
 800afe8:	3b15      	subs	r3, #21
 800afea:	f023 0303 	bic.w	r3, r3, #3
 800afee:	3304      	adds	r3, #4
 800aff0:	f104 0215 	add.w	r2, r4, #21
 800aff4:	4290      	cmp	r0, r2
 800aff6:	bf38      	it	cc
 800aff8:	2304      	movcc	r3, #4
 800affa:	f841 c003 	str.w	ip, [r1, r3]
 800affe:	f1bc 0f00 	cmp.w	ip, #0
 800b002:	d001      	beq.n	800b008 <__lshift+0xac>
 800b004:	f108 0602 	add.w	r6, r8, #2
 800b008:	3e01      	subs	r6, #1
 800b00a:	4638      	mov	r0, r7
 800b00c:	612e      	str	r6, [r5, #16]
 800b00e:	4621      	mov	r1, r4
 800b010:	f7ff fd88 	bl	800ab24 <_Bfree>
 800b014:	4628      	mov	r0, r5
 800b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b01e:	3301      	adds	r3, #1
 800b020:	e7c1      	b.n	800afa6 <__lshift+0x4a>
 800b022:	3904      	subs	r1, #4
 800b024:	f853 2b04 	ldr.w	r2, [r3], #4
 800b028:	f841 2f04 	str.w	r2, [r1, #4]!
 800b02c:	4298      	cmp	r0, r3
 800b02e:	d8f9      	bhi.n	800b024 <__lshift+0xc8>
 800b030:	e7ea      	b.n	800b008 <__lshift+0xac>
 800b032:	bf00      	nop
 800b034:	0800eb20 	.word	0x0800eb20
 800b038:	0800ebac 	.word	0x0800ebac

0800b03c <__mcmp>:
 800b03c:	b530      	push	{r4, r5, lr}
 800b03e:	6902      	ldr	r2, [r0, #16]
 800b040:	690c      	ldr	r4, [r1, #16]
 800b042:	1b12      	subs	r2, r2, r4
 800b044:	d10e      	bne.n	800b064 <__mcmp+0x28>
 800b046:	f100 0314 	add.w	r3, r0, #20
 800b04a:	3114      	adds	r1, #20
 800b04c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b05c:	42a5      	cmp	r5, r4
 800b05e:	d003      	beq.n	800b068 <__mcmp+0x2c>
 800b060:	d305      	bcc.n	800b06e <__mcmp+0x32>
 800b062:	2201      	movs	r2, #1
 800b064:	4610      	mov	r0, r2
 800b066:	bd30      	pop	{r4, r5, pc}
 800b068:	4283      	cmp	r3, r0
 800b06a:	d3f3      	bcc.n	800b054 <__mcmp+0x18>
 800b06c:	e7fa      	b.n	800b064 <__mcmp+0x28>
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295
 800b072:	e7f7      	b.n	800b064 <__mcmp+0x28>

0800b074 <__mdiff>:
 800b074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	460c      	mov	r4, r1
 800b07a:	4606      	mov	r6, r0
 800b07c:	4611      	mov	r1, r2
 800b07e:	4620      	mov	r0, r4
 800b080:	4690      	mov	r8, r2
 800b082:	f7ff ffdb 	bl	800b03c <__mcmp>
 800b086:	1e05      	subs	r5, r0, #0
 800b088:	d110      	bne.n	800b0ac <__mdiff+0x38>
 800b08a:	4629      	mov	r1, r5
 800b08c:	4630      	mov	r0, r6
 800b08e:	f7ff fd09 	bl	800aaa4 <_Balloc>
 800b092:	b930      	cbnz	r0, 800b0a2 <__mdiff+0x2e>
 800b094:	4b3a      	ldr	r3, [pc, #232]	; (800b180 <__mdiff+0x10c>)
 800b096:	4602      	mov	r2, r0
 800b098:	f240 2132 	movw	r1, #562	; 0x232
 800b09c:	4839      	ldr	r0, [pc, #228]	; (800b184 <__mdiff+0x110>)
 800b09e:	f000 fc51 	bl	800b944 <__assert_func>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	bfa4      	itt	ge
 800b0ae:	4643      	movge	r3, r8
 800b0b0:	46a0      	movge	r8, r4
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0b8:	bfa6      	itte	ge
 800b0ba:	461c      	movge	r4, r3
 800b0bc:	2500      	movge	r5, #0
 800b0be:	2501      	movlt	r5, #1
 800b0c0:	f7ff fcf0 	bl	800aaa4 <_Balloc>
 800b0c4:	b920      	cbnz	r0, 800b0d0 <__mdiff+0x5c>
 800b0c6:	4b2e      	ldr	r3, [pc, #184]	; (800b180 <__mdiff+0x10c>)
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0ce:	e7e5      	b.n	800b09c <__mdiff+0x28>
 800b0d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0d4:	6926      	ldr	r6, [r4, #16]
 800b0d6:	60c5      	str	r5, [r0, #12]
 800b0d8:	f104 0914 	add.w	r9, r4, #20
 800b0dc:	f108 0514 	add.w	r5, r8, #20
 800b0e0:	f100 0e14 	add.w	lr, r0, #20
 800b0e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b0e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0ec:	f108 0210 	add.w	r2, r8, #16
 800b0f0:	46f2      	mov	sl, lr
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0fc:	fa1f f883 	uxth.w	r8, r3
 800b100:	fa11 f18b 	uxtah	r1, r1, fp
 800b104:	0c1b      	lsrs	r3, r3, #16
 800b106:	eba1 0808 	sub.w	r8, r1, r8
 800b10a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b10e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b112:	fa1f f888 	uxth.w	r8, r8
 800b116:	1419      	asrs	r1, r3, #16
 800b118:	454e      	cmp	r6, r9
 800b11a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b11e:	f84a 3b04 	str.w	r3, [sl], #4
 800b122:	d8e7      	bhi.n	800b0f4 <__mdiff+0x80>
 800b124:	1b33      	subs	r3, r6, r4
 800b126:	3b15      	subs	r3, #21
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	3304      	adds	r3, #4
 800b12e:	3415      	adds	r4, #21
 800b130:	42a6      	cmp	r6, r4
 800b132:	bf38      	it	cc
 800b134:	2304      	movcc	r3, #4
 800b136:	441d      	add	r5, r3
 800b138:	4473      	add	r3, lr
 800b13a:	469e      	mov	lr, r3
 800b13c:	462e      	mov	r6, r5
 800b13e:	4566      	cmp	r6, ip
 800b140:	d30e      	bcc.n	800b160 <__mdiff+0xec>
 800b142:	f10c 0203 	add.w	r2, ip, #3
 800b146:	1b52      	subs	r2, r2, r5
 800b148:	f022 0203 	bic.w	r2, r2, #3
 800b14c:	3d03      	subs	r5, #3
 800b14e:	45ac      	cmp	ip, r5
 800b150:	bf38      	it	cc
 800b152:	2200      	movcc	r2, #0
 800b154:	441a      	add	r2, r3
 800b156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b15a:	b17b      	cbz	r3, 800b17c <__mdiff+0x108>
 800b15c:	6107      	str	r7, [r0, #16]
 800b15e:	e7a3      	b.n	800b0a8 <__mdiff+0x34>
 800b160:	f856 8b04 	ldr.w	r8, [r6], #4
 800b164:	fa11 f288 	uxtah	r2, r1, r8
 800b168:	1414      	asrs	r4, r2, #16
 800b16a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b16e:	b292      	uxth	r2, r2
 800b170:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b174:	f84e 2b04 	str.w	r2, [lr], #4
 800b178:	1421      	asrs	r1, r4, #16
 800b17a:	e7e0      	b.n	800b13e <__mdiff+0xca>
 800b17c:	3f01      	subs	r7, #1
 800b17e:	e7ea      	b.n	800b156 <__mdiff+0xe2>
 800b180:	0800eb20 	.word	0x0800eb20
 800b184:	0800ebac 	.word	0x0800ebac

0800b188 <__ulp>:
 800b188:	b082      	sub	sp, #8
 800b18a:	ed8d 0b00 	vstr	d0, [sp]
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	4912      	ldr	r1, [pc, #72]	; (800b1dc <__ulp+0x54>)
 800b192:	4019      	ands	r1, r3
 800b194:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b198:	2900      	cmp	r1, #0
 800b19a:	dd05      	ble.n	800b1a8 <__ulp+0x20>
 800b19c:	2200      	movs	r2, #0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	ec43 2b10 	vmov	d0, r2, r3
 800b1a4:	b002      	add	sp, #8
 800b1a6:	4770      	bx	lr
 800b1a8:	4249      	negs	r1, r1
 800b1aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b1ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b1b2:	f04f 0200 	mov.w	r2, #0
 800b1b6:	f04f 0300 	mov.w	r3, #0
 800b1ba:	da04      	bge.n	800b1c6 <__ulp+0x3e>
 800b1bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b1c0:	fa41 f300 	asr.w	r3, r1, r0
 800b1c4:	e7ec      	b.n	800b1a0 <__ulp+0x18>
 800b1c6:	f1a0 0114 	sub.w	r1, r0, #20
 800b1ca:	291e      	cmp	r1, #30
 800b1cc:	bfda      	itte	le
 800b1ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b1d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b1d6:	2101      	movgt	r1, #1
 800b1d8:	460a      	mov	r2, r1
 800b1da:	e7e1      	b.n	800b1a0 <__ulp+0x18>
 800b1dc:	7ff00000 	.word	0x7ff00000

0800b1e0 <__b2d>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	6905      	ldr	r5, [r0, #16]
 800b1e4:	f100 0714 	add.w	r7, r0, #20
 800b1e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1ec:	1f2e      	subs	r6, r5, #4
 800b1ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f7ff fd48 	bl	800ac88 <__hi0bits>
 800b1f8:	f1c0 0320 	rsb	r3, r0, #32
 800b1fc:	280a      	cmp	r0, #10
 800b1fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b27c <__b2d+0x9c>
 800b202:	600b      	str	r3, [r1, #0]
 800b204:	dc14      	bgt.n	800b230 <__b2d+0x50>
 800b206:	f1c0 0e0b 	rsb	lr, r0, #11
 800b20a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b20e:	42b7      	cmp	r7, r6
 800b210:	ea41 030c 	orr.w	r3, r1, ip
 800b214:	bf34      	ite	cc
 800b216:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b21a:	2100      	movcs	r1, #0
 800b21c:	3015      	adds	r0, #21
 800b21e:	fa04 f000 	lsl.w	r0, r4, r0
 800b222:	fa21 f10e 	lsr.w	r1, r1, lr
 800b226:	ea40 0201 	orr.w	r2, r0, r1
 800b22a:	ec43 2b10 	vmov	d0, r2, r3
 800b22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b230:	42b7      	cmp	r7, r6
 800b232:	bf3a      	itte	cc
 800b234:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b238:	f1a5 0608 	subcc.w	r6, r5, #8
 800b23c:	2100      	movcs	r1, #0
 800b23e:	380b      	subs	r0, #11
 800b240:	d017      	beq.n	800b272 <__b2d+0x92>
 800b242:	f1c0 0c20 	rsb	ip, r0, #32
 800b246:	fa04 f500 	lsl.w	r5, r4, r0
 800b24a:	42be      	cmp	r6, r7
 800b24c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b250:	ea45 0504 	orr.w	r5, r5, r4
 800b254:	bf8c      	ite	hi
 800b256:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b25a:	2400      	movls	r4, #0
 800b25c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b260:	fa01 f000 	lsl.w	r0, r1, r0
 800b264:	fa24 f40c 	lsr.w	r4, r4, ip
 800b268:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b26c:	ea40 0204 	orr.w	r2, r0, r4
 800b270:	e7db      	b.n	800b22a <__b2d+0x4a>
 800b272:	ea44 030c 	orr.w	r3, r4, ip
 800b276:	460a      	mov	r2, r1
 800b278:	e7d7      	b.n	800b22a <__b2d+0x4a>
 800b27a:	bf00      	nop
 800b27c:	3ff00000 	.word	0x3ff00000

0800b280 <__d2b>:
 800b280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b284:	4689      	mov	r9, r1
 800b286:	2101      	movs	r1, #1
 800b288:	ec57 6b10 	vmov	r6, r7, d0
 800b28c:	4690      	mov	r8, r2
 800b28e:	f7ff fc09 	bl	800aaa4 <_Balloc>
 800b292:	4604      	mov	r4, r0
 800b294:	b930      	cbnz	r0, 800b2a4 <__d2b+0x24>
 800b296:	4602      	mov	r2, r0
 800b298:	4b25      	ldr	r3, [pc, #148]	; (800b330 <__d2b+0xb0>)
 800b29a:	4826      	ldr	r0, [pc, #152]	; (800b334 <__d2b+0xb4>)
 800b29c:	f240 310a 	movw	r1, #778	; 0x30a
 800b2a0:	f000 fb50 	bl	800b944 <__assert_func>
 800b2a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2ac:	bb35      	cbnz	r5, 800b2fc <__d2b+0x7c>
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	d028      	beq.n	800b306 <__d2b+0x86>
 800b2b4:	4668      	mov	r0, sp
 800b2b6:	9600      	str	r6, [sp, #0]
 800b2b8:	f7ff fd06 	bl	800acc8 <__lo0bits>
 800b2bc:	9900      	ldr	r1, [sp, #0]
 800b2be:	b300      	cbz	r0, 800b302 <__d2b+0x82>
 800b2c0:	9a01      	ldr	r2, [sp, #4]
 800b2c2:	f1c0 0320 	rsb	r3, r0, #32
 800b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ca:	430b      	orrs	r3, r1
 800b2cc:	40c2      	lsrs	r2, r0
 800b2ce:	6163      	str	r3, [r4, #20]
 800b2d0:	9201      	str	r2, [sp, #4]
 800b2d2:	9b01      	ldr	r3, [sp, #4]
 800b2d4:	61a3      	str	r3, [r4, #24]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bf14      	ite	ne
 800b2da:	2202      	movne	r2, #2
 800b2dc:	2201      	moveq	r2, #1
 800b2de:	6122      	str	r2, [r4, #16]
 800b2e0:	b1d5      	cbz	r5, 800b318 <__d2b+0x98>
 800b2e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2e6:	4405      	add	r5, r0
 800b2e8:	f8c9 5000 	str.w	r5, [r9]
 800b2ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2f0:	f8c8 0000 	str.w	r0, [r8]
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	b003      	add	sp, #12
 800b2f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b300:	e7d5      	b.n	800b2ae <__d2b+0x2e>
 800b302:	6161      	str	r1, [r4, #20]
 800b304:	e7e5      	b.n	800b2d2 <__d2b+0x52>
 800b306:	a801      	add	r0, sp, #4
 800b308:	f7ff fcde 	bl	800acc8 <__lo0bits>
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	6163      	str	r3, [r4, #20]
 800b310:	2201      	movs	r2, #1
 800b312:	6122      	str	r2, [r4, #16]
 800b314:	3020      	adds	r0, #32
 800b316:	e7e3      	b.n	800b2e0 <__d2b+0x60>
 800b318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b31c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b320:	f8c9 0000 	str.w	r0, [r9]
 800b324:	6918      	ldr	r0, [r3, #16]
 800b326:	f7ff fcaf 	bl	800ac88 <__hi0bits>
 800b32a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b32e:	e7df      	b.n	800b2f0 <__d2b+0x70>
 800b330:	0800eb20 	.word	0x0800eb20
 800b334:	0800ebac 	.word	0x0800ebac

0800b338 <__ratio>:
 800b338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	4688      	mov	r8, r1
 800b33e:	4669      	mov	r1, sp
 800b340:	4681      	mov	r9, r0
 800b342:	f7ff ff4d 	bl	800b1e0 <__b2d>
 800b346:	a901      	add	r1, sp, #4
 800b348:	4640      	mov	r0, r8
 800b34a:	ec55 4b10 	vmov	r4, r5, d0
 800b34e:	f7ff ff47 	bl	800b1e0 <__b2d>
 800b352:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b356:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b35a:	eba3 0c02 	sub.w	ip, r3, r2
 800b35e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b368:	ec51 0b10 	vmov	r0, r1, d0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	bfd6      	itet	le
 800b370:	460a      	movle	r2, r1
 800b372:	462a      	movgt	r2, r5
 800b374:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b378:	468b      	mov	fp, r1
 800b37a:	462f      	mov	r7, r5
 800b37c:	bfd4      	ite	le
 800b37e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b382:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b386:	4620      	mov	r0, r4
 800b388:	ee10 2a10 	vmov	r2, s0
 800b38c:	465b      	mov	r3, fp
 800b38e:	4639      	mov	r1, r7
 800b390:	f7f5 fa74 	bl	800087c <__aeabi_ddiv>
 800b394:	ec41 0b10 	vmov	d0, r0, r1
 800b398:	b003      	add	sp, #12
 800b39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b39e <__copybits>:
 800b39e:	3901      	subs	r1, #1
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	1149      	asrs	r1, r1, #5
 800b3a4:	6914      	ldr	r4, [r2, #16]
 800b3a6:	3101      	adds	r1, #1
 800b3a8:	f102 0314 	add.w	r3, r2, #20
 800b3ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3b4:	1f05      	subs	r5, r0, #4
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	d30c      	bcc.n	800b3d4 <__copybits+0x36>
 800b3ba:	1aa3      	subs	r3, r4, r2
 800b3bc:	3b11      	subs	r3, #17
 800b3be:	f023 0303 	bic.w	r3, r3, #3
 800b3c2:	3211      	adds	r2, #17
 800b3c4:	42a2      	cmp	r2, r4
 800b3c6:	bf88      	it	hi
 800b3c8:	2300      	movhi	r3, #0
 800b3ca:	4418      	add	r0, r3
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4288      	cmp	r0, r1
 800b3d0:	d305      	bcc.n	800b3de <__copybits+0x40>
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3dc:	e7eb      	b.n	800b3b6 <__copybits+0x18>
 800b3de:	f840 3b04 	str.w	r3, [r0], #4
 800b3e2:	e7f4      	b.n	800b3ce <__copybits+0x30>

0800b3e4 <__any_on>:
 800b3e4:	f100 0214 	add.w	r2, r0, #20
 800b3e8:	6900      	ldr	r0, [r0, #16]
 800b3ea:	114b      	asrs	r3, r1, #5
 800b3ec:	4298      	cmp	r0, r3
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	db11      	blt.n	800b416 <__any_on+0x32>
 800b3f2:	dd0a      	ble.n	800b40a <__any_on+0x26>
 800b3f4:	f011 011f 	ands.w	r1, r1, #31
 800b3f8:	d007      	beq.n	800b40a <__any_on+0x26>
 800b3fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3fe:	fa24 f001 	lsr.w	r0, r4, r1
 800b402:	fa00 f101 	lsl.w	r1, r0, r1
 800b406:	428c      	cmp	r4, r1
 800b408:	d10b      	bne.n	800b422 <__any_on+0x3e>
 800b40a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b40e:	4293      	cmp	r3, r2
 800b410:	d803      	bhi.n	800b41a <__any_on+0x36>
 800b412:	2000      	movs	r0, #0
 800b414:	bd10      	pop	{r4, pc}
 800b416:	4603      	mov	r3, r0
 800b418:	e7f7      	b.n	800b40a <__any_on+0x26>
 800b41a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b41e:	2900      	cmp	r1, #0
 800b420:	d0f5      	beq.n	800b40e <__any_on+0x2a>
 800b422:	2001      	movs	r0, #1
 800b424:	e7f6      	b.n	800b414 <__any_on+0x30>

0800b426 <_calloc_r>:
 800b426:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b428:	fba1 2402 	umull	r2, r4, r1, r2
 800b42c:	b94c      	cbnz	r4, 800b442 <_calloc_r+0x1c>
 800b42e:	4611      	mov	r1, r2
 800b430:	9201      	str	r2, [sp, #4]
 800b432:	f000 f87b 	bl	800b52c <_malloc_r>
 800b436:	9a01      	ldr	r2, [sp, #4]
 800b438:	4605      	mov	r5, r0
 800b43a:	b930      	cbnz	r0, 800b44a <_calloc_r+0x24>
 800b43c:	4628      	mov	r0, r5
 800b43e:	b003      	add	sp, #12
 800b440:	bd30      	pop	{r4, r5, pc}
 800b442:	220c      	movs	r2, #12
 800b444:	6002      	str	r2, [r0, #0]
 800b446:	2500      	movs	r5, #0
 800b448:	e7f8      	b.n	800b43c <_calloc_r+0x16>
 800b44a:	4621      	mov	r1, r4
 800b44c:	f7fc fbc0 	bl	8007bd0 <memset>
 800b450:	e7f4      	b.n	800b43c <_calloc_r+0x16>
	...

0800b454 <_free_r>:
 800b454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b456:	2900      	cmp	r1, #0
 800b458:	d044      	beq.n	800b4e4 <_free_r+0x90>
 800b45a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45e:	9001      	str	r0, [sp, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	f1a1 0404 	sub.w	r4, r1, #4
 800b466:	bfb8      	it	lt
 800b468:	18e4      	addlt	r4, r4, r3
 800b46a:	f000 fab5 	bl	800b9d8 <__malloc_lock>
 800b46e:	4a1e      	ldr	r2, [pc, #120]	; (800b4e8 <_free_r+0x94>)
 800b470:	9801      	ldr	r0, [sp, #4]
 800b472:	6813      	ldr	r3, [r2, #0]
 800b474:	b933      	cbnz	r3, 800b484 <_free_r+0x30>
 800b476:	6063      	str	r3, [r4, #4]
 800b478:	6014      	str	r4, [r2, #0]
 800b47a:	b003      	add	sp, #12
 800b47c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b480:	f000 bab0 	b.w	800b9e4 <__malloc_unlock>
 800b484:	42a3      	cmp	r3, r4
 800b486:	d908      	bls.n	800b49a <_free_r+0x46>
 800b488:	6825      	ldr	r5, [r4, #0]
 800b48a:	1961      	adds	r1, r4, r5
 800b48c:	428b      	cmp	r3, r1
 800b48e:	bf01      	itttt	eq
 800b490:	6819      	ldreq	r1, [r3, #0]
 800b492:	685b      	ldreq	r3, [r3, #4]
 800b494:	1949      	addeq	r1, r1, r5
 800b496:	6021      	streq	r1, [r4, #0]
 800b498:	e7ed      	b.n	800b476 <_free_r+0x22>
 800b49a:	461a      	mov	r2, r3
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	b10b      	cbz	r3, 800b4a4 <_free_r+0x50>
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	d9fa      	bls.n	800b49a <_free_r+0x46>
 800b4a4:	6811      	ldr	r1, [r2, #0]
 800b4a6:	1855      	adds	r5, r2, r1
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d10b      	bne.n	800b4c4 <_free_r+0x70>
 800b4ac:	6824      	ldr	r4, [r4, #0]
 800b4ae:	4421      	add	r1, r4
 800b4b0:	1854      	adds	r4, r2, r1
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	6011      	str	r1, [r2, #0]
 800b4b6:	d1e0      	bne.n	800b47a <_free_r+0x26>
 800b4b8:	681c      	ldr	r4, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	6053      	str	r3, [r2, #4]
 800b4be:	4421      	add	r1, r4
 800b4c0:	6011      	str	r1, [r2, #0]
 800b4c2:	e7da      	b.n	800b47a <_free_r+0x26>
 800b4c4:	d902      	bls.n	800b4cc <_free_r+0x78>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	6003      	str	r3, [r0, #0]
 800b4ca:	e7d6      	b.n	800b47a <_free_r+0x26>
 800b4cc:	6825      	ldr	r5, [r4, #0]
 800b4ce:	1961      	adds	r1, r4, r5
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf04      	itt	eq
 800b4d4:	6819      	ldreq	r1, [r3, #0]
 800b4d6:	685b      	ldreq	r3, [r3, #4]
 800b4d8:	6063      	str	r3, [r4, #4]
 800b4da:	bf04      	itt	eq
 800b4dc:	1949      	addeq	r1, r1, r5
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	6054      	str	r4, [r2, #4]
 800b4e2:	e7ca      	b.n	800b47a <_free_r+0x26>
 800b4e4:	b003      	add	sp, #12
 800b4e6:	bd30      	pop	{r4, r5, pc}
 800b4e8:	200003c8 	.word	0x200003c8

0800b4ec <sbrk_aligned>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	4e0e      	ldr	r6, [pc, #56]	; (800b528 <sbrk_aligned+0x3c>)
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	6831      	ldr	r1, [r6, #0]
 800b4f4:	4605      	mov	r5, r0
 800b4f6:	b911      	cbnz	r1, 800b4fe <sbrk_aligned+0x12>
 800b4f8:	f000 f9f2 	bl	800b8e0 <_sbrk_r>
 800b4fc:	6030      	str	r0, [r6, #0]
 800b4fe:	4621      	mov	r1, r4
 800b500:	4628      	mov	r0, r5
 800b502:	f000 f9ed 	bl	800b8e0 <_sbrk_r>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d00a      	beq.n	800b520 <sbrk_aligned+0x34>
 800b50a:	1cc4      	adds	r4, r0, #3
 800b50c:	f024 0403 	bic.w	r4, r4, #3
 800b510:	42a0      	cmp	r0, r4
 800b512:	d007      	beq.n	800b524 <sbrk_aligned+0x38>
 800b514:	1a21      	subs	r1, r4, r0
 800b516:	4628      	mov	r0, r5
 800b518:	f000 f9e2 	bl	800b8e0 <_sbrk_r>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d101      	bne.n	800b524 <sbrk_aligned+0x38>
 800b520:	f04f 34ff 	mov.w	r4, #4294967295
 800b524:	4620      	mov	r0, r4
 800b526:	bd70      	pop	{r4, r5, r6, pc}
 800b528:	200003cc 	.word	0x200003cc

0800b52c <_malloc_r>:
 800b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	1ccd      	adds	r5, r1, #3
 800b532:	f025 0503 	bic.w	r5, r5, #3
 800b536:	3508      	adds	r5, #8
 800b538:	2d0c      	cmp	r5, #12
 800b53a:	bf38      	it	cc
 800b53c:	250c      	movcc	r5, #12
 800b53e:	2d00      	cmp	r5, #0
 800b540:	4607      	mov	r7, r0
 800b542:	db01      	blt.n	800b548 <_malloc_r+0x1c>
 800b544:	42a9      	cmp	r1, r5
 800b546:	d905      	bls.n	800b554 <_malloc_r+0x28>
 800b548:	230c      	movs	r3, #12
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	2600      	movs	r6, #0
 800b54e:	4630      	mov	r0, r6
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	4e2e      	ldr	r6, [pc, #184]	; (800b610 <_malloc_r+0xe4>)
 800b556:	f000 fa3f 	bl	800b9d8 <__malloc_lock>
 800b55a:	6833      	ldr	r3, [r6, #0]
 800b55c:	461c      	mov	r4, r3
 800b55e:	bb34      	cbnz	r4, 800b5ae <_malloc_r+0x82>
 800b560:	4629      	mov	r1, r5
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ffc2 	bl	800b4ec <sbrk_aligned>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	4604      	mov	r4, r0
 800b56c:	d14d      	bne.n	800b60a <_malloc_r+0xde>
 800b56e:	6834      	ldr	r4, [r6, #0]
 800b570:	4626      	mov	r6, r4
 800b572:	2e00      	cmp	r6, #0
 800b574:	d140      	bne.n	800b5f8 <_malloc_r+0xcc>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	4631      	mov	r1, r6
 800b57a:	4638      	mov	r0, r7
 800b57c:	eb04 0803 	add.w	r8, r4, r3
 800b580:	f000 f9ae 	bl	800b8e0 <_sbrk_r>
 800b584:	4580      	cmp	r8, r0
 800b586:	d13a      	bne.n	800b5fe <_malloc_r+0xd2>
 800b588:	6821      	ldr	r1, [r4, #0]
 800b58a:	3503      	adds	r5, #3
 800b58c:	1a6d      	subs	r5, r5, r1
 800b58e:	f025 0503 	bic.w	r5, r5, #3
 800b592:	3508      	adds	r5, #8
 800b594:	2d0c      	cmp	r5, #12
 800b596:	bf38      	it	cc
 800b598:	250c      	movcc	r5, #12
 800b59a:	4629      	mov	r1, r5
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ffa5 	bl	800b4ec <sbrk_aligned>
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	d02b      	beq.n	800b5fe <_malloc_r+0xd2>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	442b      	add	r3, r5
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	e00e      	b.n	800b5cc <_malloc_r+0xa0>
 800b5ae:	6822      	ldr	r2, [r4, #0]
 800b5b0:	1b52      	subs	r2, r2, r5
 800b5b2:	d41e      	bmi.n	800b5f2 <_malloc_r+0xc6>
 800b5b4:	2a0b      	cmp	r2, #11
 800b5b6:	d916      	bls.n	800b5e6 <_malloc_r+0xba>
 800b5b8:	1961      	adds	r1, r4, r5
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	6025      	str	r5, [r4, #0]
 800b5be:	bf18      	it	ne
 800b5c0:	6059      	strne	r1, [r3, #4]
 800b5c2:	6863      	ldr	r3, [r4, #4]
 800b5c4:	bf08      	it	eq
 800b5c6:	6031      	streq	r1, [r6, #0]
 800b5c8:	5162      	str	r2, [r4, r5]
 800b5ca:	604b      	str	r3, [r1, #4]
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f104 060b 	add.w	r6, r4, #11
 800b5d2:	f000 fa07 	bl	800b9e4 <__malloc_unlock>
 800b5d6:	f026 0607 	bic.w	r6, r6, #7
 800b5da:	1d23      	adds	r3, r4, #4
 800b5dc:	1af2      	subs	r2, r6, r3
 800b5de:	d0b6      	beq.n	800b54e <_malloc_r+0x22>
 800b5e0:	1b9b      	subs	r3, r3, r6
 800b5e2:	50a3      	str	r3, [r4, r2]
 800b5e4:	e7b3      	b.n	800b54e <_malloc_r+0x22>
 800b5e6:	6862      	ldr	r2, [r4, #4]
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	bf0c      	ite	eq
 800b5ec:	6032      	streq	r2, [r6, #0]
 800b5ee:	605a      	strne	r2, [r3, #4]
 800b5f0:	e7ec      	b.n	800b5cc <_malloc_r+0xa0>
 800b5f2:	4623      	mov	r3, r4
 800b5f4:	6864      	ldr	r4, [r4, #4]
 800b5f6:	e7b2      	b.n	800b55e <_malloc_r+0x32>
 800b5f8:	4634      	mov	r4, r6
 800b5fa:	6876      	ldr	r6, [r6, #4]
 800b5fc:	e7b9      	b.n	800b572 <_malloc_r+0x46>
 800b5fe:	230c      	movs	r3, #12
 800b600:	603b      	str	r3, [r7, #0]
 800b602:	4638      	mov	r0, r7
 800b604:	f000 f9ee 	bl	800b9e4 <__malloc_unlock>
 800b608:	e7a1      	b.n	800b54e <_malloc_r+0x22>
 800b60a:	6025      	str	r5, [r4, #0]
 800b60c:	e7de      	b.n	800b5cc <_malloc_r+0xa0>
 800b60e:	bf00      	nop
 800b610:	200003c8 	.word	0x200003c8

0800b614 <__ssputs_r>:
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	688e      	ldr	r6, [r1, #8]
 800b61a:	429e      	cmp	r6, r3
 800b61c:	4682      	mov	sl, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	4690      	mov	r8, r2
 800b622:	461f      	mov	r7, r3
 800b624:	d838      	bhi.n	800b698 <__ssputs_r+0x84>
 800b626:	898a      	ldrh	r2, [r1, #12]
 800b628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b62c:	d032      	beq.n	800b694 <__ssputs_r+0x80>
 800b62e:	6825      	ldr	r5, [r4, #0]
 800b630:	6909      	ldr	r1, [r1, #16]
 800b632:	eba5 0901 	sub.w	r9, r5, r1
 800b636:	6965      	ldr	r5, [r4, #20]
 800b638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b63c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b640:	3301      	adds	r3, #1
 800b642:	444b      	add	r3, r9
 800b644:	106d      	asrs	r5, r5, #1
 800b646:	429d      	cmp	r5, r3
 800b648:	bf38      	it	cc
 800b64a:	461d      	movcc	r5, r3
 800b64c:	0553      	lsls	r3, r2, #21
 800b64e:	d531      	bpl.n	800b6b4 <__ssputs_r+0xa0>
 800b650:	4629      	mov	r1, r5
 800b652:	f7ff ff6b 	bl	800b52c <_malloc_r>
 800b656:	4606      	mov	r6, r0
 800b658:	b950      	cbnz	r0, 800b670 <__ssputs_r+0x5c>
 800b65a:	230c      	movs	r3, #12
 800b65c:	f8ca 3000 	str.w	r3, [sl]
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	f04f 30ff 	mov.w	r0, #4294967295
 800b66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b670:	6921      	ldr	r1, [r4, #16]
 800b672:	464a      	mov	r2, r9
 800b674:	f7ff fa08 	bl	800aa88 <memcpy>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	6126      	str	r6, [r4, #16]
 800b686:	6165      	str	r5, [r4, #20]
 800b688:	444e      	add	r6, r9
 800b68a:	eba5 0509 	sub.w	r5, r5, r9
 800b68e:	6026      	str	r6, [r4, #0]
 800b690:	60a5      	str	r5, [r4, #8]
 800b692:	463e      	mov	r6, r7
 800b694:	42be      	cmp	r6, r7
 800b696:	d900      	bls.n	800b69a <__ssputs_r+0x86>
 800b698:	463e      	mov	r6, r7
 800b69a:	6820      	ldr	r0, [r4, #0]
 800b69c:	4632      	mov	r2, r6
 800b69e:	4641      	mov	r1, r8
 800b6a0:	f000 f980 	bl	800b9a4 <memmove>
 800b6a4:	68a3      	ldr	r3, [r4, #8]
 800b6a6:	1b9b      	subs	r3, r3, r6
 800b6a8:	60a3      	str	r3, [r4, #8]
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	4433      	add	r3, r6
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e7db      	b.n	800b66c <__ssputs_r+0x58>
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	f000 f99b 	bl	800b9f0 <_realloc_r>
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d1e1      	bne.n	800b684 <__ssputs_r+0x70>
 800b6c0:	6921      	ldr	r1, [r4, #16]
 800b6c2:	4650      	mov	r0, sl
 800b6c4:	f7ff fec6 	bl	800b454 <_free_r>
 800b6c8:	e7c7      	b.n	800b65a <__ssputs_r+0x46>
	...

0800b6cc <_svfiprintf_r>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	4698      	mov	r8, r3
 800b6d2:	898b      	ldrh	r3, [r1, #12]
 800b6d4:	061b      	lsls	r3, r3, #24
 800b6d6:	b09d      	sub	sp, #116	; 0x74
 800b6d8:	4607      	mov	r7, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	4614      	mov	r4, r2
 800b6de:	d50e      	bpl.n	800b6fe <_svfiprintf_r+0x32>
 800b6e0:	690b      	ldr	r3, [r1, #16]
 800b6e2:	b963      	cbnz	r3, 800b6fe <_svfiprintf_r+0x32>
 800b6e4:	2140      	movs	r1, #64	; 0x40
 800b6e6:	f7ff ff21 	bl	800b52c <_malloc_r>
 800b6ea:	6028      	str	r0, [r5, #0]
 800b6ec:	6128      	str	r0, [r5, #16]
 800b6ee:	b920      	cbnz	r0, 800b6fa <_svfiprintf_r+0x2e>
 800b6f0:	230c      	movs	r3, #12
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	e0d1      	b.n	800b89e <_svfiprintf_r+0x1d2>
 800b6fa:	2340      	movs	r3, #64	; 0x40
 800b6fc:	616b      	str	r3, [r5, #20]
 800b6fe:	2300      	movs	r3, #0
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	2320      	movs	r3, #32
 800b704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b708:	f8cd 800c 	str.w	r8, [sp, #12]
 800b70c:	2330      	movs	r3, #48	; 0x30
 800b70e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8b8 <_svfiprintf_r+0x1ec>
 800b712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b716:	f04f 0901 	mov.w	r9, #1
 800b71a:	4623      	mov	r3, r4
 800b71c:	469a      	mov	sl, r3
 800b71e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b722:	b10a      	cbz	r2, 800b728 <_svfiprintf_r+0x5c>
 800b724:	2a25      	cmp	r2, #37	; 0x25
 800b726:	d1f9      	bne.n	800b71c <_svfiprintf_r+0x50>
 800b728:	ebba 0b04 	subs.w	fp, sl, r4
 800b72c:	d00b      	beq.n	800b746 <_svfiprintf_r+0x7a>
 800b72e:	465b      	mov	r3, fp
 800b730:	4622      	mov	r2, r4
 800b732:	4629      	mov	r1, r5
 800b734:	4638      	mov	r0, r7
 800b736:	f7ff ff6d 	bl	800b614 <__ssputs_r>
 800b73a:	3001      	adds	r0, #1
 800b73c:	f000 80aa 	beq.w	800b894 <_svfiprintf_r+0x1c8>
 800b740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b742:	445a      	add	r2, fp
 800b744:	9209      	str	r2, [sp, #36]	; 0x24
 800b746:	f89a 3000 	ldrb.w	r3, [sl]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 80a2 	beq.w	800b894 <_svfiprintf_r+0x1c8>
 800b750:	2300      	movs	r3, #0
 800b752:	f04f 32ff 	mov.w	r2, #4294967295
 800b756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b75a:	f10a 0a01 	add.w	sl, sl, #1
 800b75e:	9304      	str	r3, [sp, #16]
 800b760:	9307      	str	r3, [sp, #28]
 800b762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b766:	931a      	str	r3, [sp, #104]	; 0x68
 800b768:	4654      	mov	r4, sl
 800b76a:	2205      	movs	r2, #5
 800b76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b770:	4851      	ldr	r0, [pc, #324]	; (800b8b8 <_svfiprintf_r+0x1ec>)
 800b772:	f7f4 fd4d 	bl	8000210 <memchr>
 800b776:	9a04      	ldr	r2, [sp, #16]
 800b778:	b9d8      	cbnz	r0, 800b7b2 <_svfiprintf_r+0xe6>
 800b77a:	06d0      	lsls	r0, r2, #27
 800b77c:	bf44      	itt	mi
 800b77e:	2320      	movmi	r3, #32
 800b780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b784:	0711      	lsls	r1, r2, #28
 800b786:	bf44      	itt	mi
 800b788:	232b      	movmi	r3, #43	; 0x2b
 800b78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b78e:	f89a 3000 	ldrb.w	r3, [sl]
 800b792:	2b2a      	cmp	r3, #42	; 0x2a
 800b794:	d015      	beq.n	800b7c2 <_svfiprintf_r+0xf6>
 800b796:	9a07      	ldr	r2, [sp, #28]
 800b798:	4654      	mov	r4, sl
 800b79a:	2000      	movs	r0, #0
 800b79c:	f04f 0c0a 	mov.w	ip, #10
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a6:	3b30      	subs	r3, #48	; 0x30
 800b7a8:	2b09      	cmp	r3, #9
 800b7aa:	d94e      	bls.n	800b84a <_svfiprintf_r+0x17e>
 800b7ac:	b1b0      	cbz	r0, 800b7dc <_svfiprintf_r+0x110>
 800b7ae:	9207      	str	r2, [sp, #28]
 800b7b0:	e014      	b.n	800b7dc <_svfiprintf_r+0x110>
 800b7b2:	eba0 0308 	sub.w	r3, r0, r8
 800b7b6:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	46a2      	mov	sl, r4
 800b7c0:	e7d2      	b.n	800b768 <_svfiprintf_r+0x9c>
 800b7c2:	9b03      	ldr	r3, [sp, #12]
 800b7c4:	1d19      	adds	r1, r3, #4
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	9103      	str	r1, [sp, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfbb      	ittet	lt
 800b7ce:	425b      	neglt	r3, r3
 800b7d0:	f042 0202 	orrlt.w	r2, r2, #2
 800b7d4:	9307      	strge	r3, [sp, #28]
 800b7d6:	9307      	strlt	r3, [sp, #28]
 800b7d8:	bfb8      	it	lt
 800b7da:	9204      	strlt	r2, [sp, #16]
 800b7dc:	7823      	ldrb	r3, [r4, #0]
 800b7de:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e0:	d10c      	bne.n	800b7fc <_svfiprintf_r+0x130>
 800b7e2:	7863      	ldrb	r3, [r4, #1]
 800b7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e6:	d135      	bne.n	800b854 <_svfiprintf_r+0x188>
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	1d1a      	adds	r2, r3, #4
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	9203      	str	r2, [sp, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfb8      	it	lt
 800b7f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7f8:	3402      	adds	r4, #2
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8c8 <_svfiprintf_r+0x1fc>
 800b800:	7821      	ldrb	r1, [r4, #0]
 800b802:	2203      	movs	r2, #3
 800b804:	4650      	mov	r0, sl
 800b806:	f7f4 fd03 	bl	8000210 <memchr>
 800b80a:	b140      	cbz	r0, 800b81e <_svfiprintf_r+0x152>
 800b80c:	2340      	movs	r3, #64	; 0x40
 800b80e:	eba0 000a 	sub.w	r0, r0, sl
 800b812:	fa03 f000 	lsl.w	r0, r3, r0
 800b816:	9b04      	ldr	r3, [sp, #16]
 800b818:	4303      	orrs	r3, r0
 800b81a:	3401      	adds	r4, #1
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b822:	4826      	ldr	r0, [pc, #152]	; (800b8bc <_svfiprintf_r+0x1f0>)
 800b824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b828:	2206      	movs	r2, #6
 800b82a:	f7f4 fcf1 	bl	8000210 <memchr>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d038      	beq.n	800b8a4 <_svfiprintf_r+0x1d8>
 800b832:	4b23      	ldr	r3, [pc, #140]	; (800b8c0 <_svfiprintf_r+0x1f4>)
 800b834:	bb1b      	cbnz	r3, 800b87e <_svfiprintf_r+0x1b2>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	3307      	adds	r3, #7
 800b83a:	f023 0307 	bic.w	r3, r3, #7
 800b83e:	3308      	adds	r3, #8
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b844:	4433      	add	r3, r6
 800b846:	9309      	str	r3, [sp, #36]	; 0x24
 800b848:	e767      	b.n	800b71a <_svfiprintf_r+0x4e>
 800b84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b84e:	460c      	mov	r4, r1
 800b850:	2001      	movs	r0, #1
 800b852:	e7a5      	b.n	800b7a0 <_svfiprintf_r+0xd4>
 800b854:	2300      	movs	r3, #0
 800b856:	3401      	adds	r4, #1
 800b858:	9305      	str	r3, [sp, #20]
 800b85a:	4619      	mov	r1, r3
 800b85c:	f04f 0c0a 	mov.w	ip, #10
 800b860:	4620      	mov	r0, r4
 800b862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b866:	3a30      	subs	r2, #48	; 0x30
 800b868:	2a09      	cmp	r2, #9
 800b86a:	d903      	bls.n	800b874 <_svfiprintf_r+0x1a8>
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0c5      	beq.n	800b7fc <_svfiprintf_r+0x130>
 800b870:	9105      	str	r1, [sp, #20]
 800b872:	e7c3      	b.n	800b7fc <_svfiprintf_r+0x130>
 800b874:	fb0c 2101 	mla	r1, ip, r1, r2
 800b878:	4604      	mov	r4, r0
 800b87a:	2301      	movs	r3, #1
 800b87c:	e7f0      	b.n	800b860 <_svfiprintf_r+0x194>
 800b87e:	ab03      	add	r3, sp, #12
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	462a      	mov	r2, r5
 800b884:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <_svfiprintf_r+0x1f8>)
 800b886:	a904      	add	r1, sp, #16
 800b888:	4638      	mov	r0, r7
 800b88a:	f7fc fa49 	bl	8007d20 <_printf_float>
 800b88e:	1c42      	adds	r2, r0, #1
 800b890:	4606      	mov	r6, r0
 800b892:	d1d6      	bne.n	800b842 <_svfiprintf_r+0x176>
 800b894:	89ab      	ldrh	r3, [r5, #12]
 800b896:	065b      	lsls	r3, r3, #25
 800b898:	f53f af2c 	bmi.w	800b6f4 <_svfiprintf_r+0x28>
 800b89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b89e:	b01d      	add	sp, #116	; 0x74
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	ab03      	add	r3, sp, #12
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	462a      	mov	r2, r5
 800b8aa:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <_svfiprintf_r+0x1f8>)
 800b8ac:	a904      	add	r1, sp, #16
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f7fc fcda 	bl	8008268 <_printf_i>
 800b8b4:	e7eb      	b.n	800b88e <_svfiprintf_r+0x1c2>
 800b8b6:	bf00      	nop
 800b8b8:	0800ed04 	.word	0x0800ed04
 800b8bc:	0800ed0e 	.word	0x0800ed0e
 800b8c0:	08007d21 	.word	0x08007d21
 800b8c4:	0800b615 	.word	0x0800b615
 800b8c8:	0800ed0a 	.word	0x0800ed0a
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <nan>:
 800b8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b8d8 <nan+0x8>
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	00000000 	.word	0x00000000
 800b8dc:	7ff80000 	.word	0x7ff80000

0800b8e0 <_sbrk_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d06      	ldr	r5, [pc, #24]	; (800b8fc <_sbrk_r+0x1c>)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	602b      	str	r3, [r5, #0]
 800b8ec:	f7f6 f90a 	bl	8001b04 <_sbrk>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d102      	bne.n	800b8fa <_sbrk_r+0x1a>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b103      	cbz	r3, 800b8fa <_sbrk_r+0x1a>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	200003d0 	.word	0x200003d0

0800b900 <strncmp>:
 800b900:	b510      	push	{r4, lr}
 800b902:	b17a      	cbz	r2, 800b924 <strncmp+0x24>
 800b904:	4603      	mov	r3, r0
 800b906:	3901      	subs	r1, #1
 800b908:	1884      	adds	r4, r0, r2
 800b90a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b90e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b912:	4290      	cmp	r0, r2
 800b914:	d101      	bne.n	800b91a <strncmp+0x1a>
 800b916:	42a3      	cmp	r3, r4
 800b918:	d101      	bne.n	800b91e <strncmp+0x1e>
 800b91a:	1a80      	subs	r0, r0, r2
 800b91c:	bd10      	pop	{r4, pc}
 800b91e:	2800      	cmp	r0, #0
 800b920:	d1f3      	bne.n	800b90a <strncmp+0xa>
 800b922:	e7fa      	b.n	800b91a <strncmp+0x1a>
 800b924:	4610      	mov	r0, r2
 800b926:	e7f9      	b.n	800b91c <strncmp+0x1c>

0800b928 <__ascii_wctomb>:
 800b928:	b149      	cbz	r1, 800b93e <__ascii_wctomb+0x16>
 800b92a:	2aff      	cmp	r2, #255	; 0xff
 800b92c:	bf85      	ittet	hi
 800b92e:	238a      	movhi	r3, #138	; 0x8a
 800b930:	6003      	strhi	r3, [r0, #0]
 800b932:	700a      	strbls	r2, [r1, #0]
 800b934:	f04f 30ff 	movhi.w	r0, #4294967295
 800b938:	bf98      	it	ls
 800b93a:	2001      	movls	r0, #1
 800b93c:	4770      	bx	lr
 800b93e:	4608      	mov	r0, r1
 800b940:	4770      	bx	lr
	...

0800b944 <__assert_func>:
 800b944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b946:	4614      	mov	r4, r2
 800b948:	461a      	mov	r2, r3
 800b94a:	4b09      	ldr	r3, [pc, #36]	; (800b970 <__assert_func+0x2c>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4605      	mov	r5, r0
 800b950:	68d8      	ldr	r0, [r3, #12]
 800b952:	b14c      	cbz	r4, 800b968 <__assert_func+0x24>
 800b954:	4b07      	ldr	r3, [pc, #28]	; (800b974 <__assert_func+0x30>)
 800b956:	9100      	str	r1, [sp, #0]
 800b958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b95c:	4906      	ldr	r1, [pc, #24]	; (800b978 <__assert_func+0x34>)
 800b95e:	462b      	mov	r3, r5
 800b960:	f000 f80e 	bl	800b980 <fiprintf>
 800b964:	f000 fa8c 	bl	800be80 <abort>
 800b968:	4b04      	ldr	r3, [pc, #16]	; (800b97c <__assert_func+0x38>)
 800b96a:	461c      	mov	r4, r3
 800b96c:	e7f3      	b.n	800b956 <__assert_func+0x12>
 800b96e:	bf00      	nop
 800b970:	2000001c 	.word	0x2000001c
 800b974:	0800ed15 	.word	0x0800ed15
 800b978:	0800ed22 	.word	0x0800ed22
 800b97c:	0800ed50 	.word	0x0800ed50

0800b980 <fiprintf>:
 800b980:	b40e      	push	{r1, r2, r3}
 800b982:	b503      	push	{r0, r1, lr}
 800b984:	4601      	mov	r1, r0
 800b986:	ab03      	add	r3, sp, #12
 800b988:	4805      	ldr	r0, [pc, #20]	; (800b9a0 <fiprintf+0x20>)
 800b98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98e:	6800      	ldr	r0, [r0, #0]
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	f000 f885 	bl	800baa0 <_vfiprintf_r>
 800b996:	b002      	add	sp, #8
 800b998:	f85d eb04 	ldr.w	lr, [sp], #4
 800b99c:	b003      	add	sp, #12
 800b99e:	4770      	bx	lr
 800b9a0:	2000001c 	.word	0x2000001c

0800b9a4 <memmove>:
 800b9a4:	4288      	cmp	r0, r1
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	eb01 0402 	add.w	r4, r1, r2
 800b9ac:	d902      	bls.n	800b9b4 <memmove+0x10>
 800b9ae:	4284      	cmp	r4, r0
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	d807      	bhi.n	800b9c4 <memmove+0x20>
 800b9b4:	1e43      	subs	r3, r0, #1
 800b9b6:	42a1      	cmp	r1, r4
 800b9b8:	d008      	beq.n	800b9cc <memmove+0x28>
 800b9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9c2:	e7f8      	b.n	800b9b6 <memmove+0x12>
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	428a      	cmp	r2, r1
 800b9ca:	d100      	bne.n	800b9ce <memmove+0x2a>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9d6:	e7f7      	b.n	800b9c8 <memmove+0x24>

0800b9d8 <__malloc_lock>:
 800b9d8:	4801      	ldr	r0, [pc, #4]	; (800b9e0 <__malloc_lock+0x8>)
 800b9da:	f000 bc11 	b.w	800c200 <__retarget_lock_acquire_recursive>
 800b9de:	bf00      	nop
 800b9e0:	200003d4 	.word	0x200003d4

0800b9e4 <__malloc_unlock>:
 800b9e4:	4801      	ldr	r0, [pc, #4]	; (800b9ec <__malloc_unlock+0x8>)
 800b9e6:	f000 bc0c 	b.w	800c202 <__retarget_lock_release_recursive>
 800b9ea:	bf00      	nop
 800b9ec:	200003d4 	.word	0x200003d4

0800b9f0 <_realloc_r>:
 800b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	460e      	mov	r6, r1
 800b9fa:	b921      	cbnz	r1, 800ba06 <_realloc_r+0x16>
 800b9fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba00:	4611      	mov	r1, r2
 800ba02:	f7ff bd93 	b.w	800b52c <_malloc_r>
 800ba06:	b92a      	cbnz	r2, 800ba14 <_realloc_r+0x24>
 800ba08:	f7ff fd24 	bl	800b454 <_free_r>
 800ba0c:	4625      	mov	r5, r4
 800ba0e:	4628      	mov	r0, r5
 800ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba14:	f000 fc5c 	bl	800c2d0 <_malloc_usable_size_r>
 800ba18:	4284      	cmp	r4, r0
 800ba1a:	4607      	mov	r7, r0
 800ba1c:	d802      	bhi.n	800ba24 <_realloc_r+0x34>
 800ba1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba22:	d812      	bhi.n	800ba4a <_realloc_r+0x5a>
 800ba24:	4621      	mov	r1, r4
 800ba26:	4640      	mov	r0, r8
 800ba28:	f7ff fd80 	bl	800b52c <_malloc_r>
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d0ed      	beq.n	800ba0e <_realloc_r+0x1e>
 800ba32:	42bc      	cmp	r4, r7
 800ba34:	4622      	mov	r2, r4
 800ba36:	4631      	mov	r1, r6
 800ba38:	bf28      	it	cs
 800ba3a:	463a      	movcs	r2, r7
 800ba3c:	f7ff f824 	bl	800aa88 <memcpy>
 800ba40:	4631      	mov	r1, r6
 800ba42:	4640      	mov	r0, r8
 800ba44:	f7ff fd06 	bl	800b454 <_free_r>
 800ba48:	e7e1      	b.n	800ba0e <_realloc_r+0x1e>
 800ba4a:	4635      	mov	r5, r6
 800ba4c:	e7df      	b.n	800ba0e <_realloc_r+0x1e>

0800ba4e <__sfputc_r>:
 800ba4e:	6893      	ldr	r3, [r2, #8]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	b410      	push	{r4}
 800ba56:	6093      	str	r3, [r2, #8]
 800ba58:	da08      	bge.n	800ba6c <__sfputc_r+0x1e>
 800ba5a:	6994      	ldr	r4, [r2, #24]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	db01      	blt.n	800ba64 <__sfputc_r+0x16>
 800ba60:	290a      	cmp	r1, #10
 800ba62:	d103      	bne.n	800ba6c <__sfputc_r+0x1e>
 800ba64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba68:	f000 b94a 	b.w	800bd00 <__swbuf_r>
 800ba6c:	6813      	ldr	r3, [r2, #0]
 800ba6e:	1c58      	adds	r0, r3, #1
 800ba70:	6010      	str	r0, [r2, #0]
 800ba72:	7019      	strb	r1, [r3, #0]
 800ba74:	4608      	mov	r0, r1
 800ba76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <__sfputs_r>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4614      	mov	r4, r2
 800ba84:	18d5      	adds	r5, r2, r3
 800ba86:	42ac      	cmp	r4, r5
 800ba88:	d101      	bne.n	800ba8e <__sfputs_r+0x12>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	e007      	b.n	800ba9e <__sfputs_r+0x22>
 800ba8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba92:	463a      	mov	r2, r7
 800ba94:	4630      	mov	r0, r6
 800ba96:	f7ff ffda 	bl	800ba4e <__sfputc_r>
 800ba9a:	1c43      	adds	r3, r0, #1
 800ba9c:	d1f3      	bne.n	800ba86 <__sfputs_r+0xa>
 800ba9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800baa0 <_vfiprintf_r>:
 800baa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	460d      	mov	r5, r1
 800baa6:	b09d      	sub	sp, #116	; 0x74
 800baa8:	4614      	mov	r4, r2
 800baaa:	4698      	mov	r8, r3
 800baac:	4606      	mov	r6, r0
 800baae:	b118      	cbz	r0, 800bab8 <_vfiprintf_r+0x18>
 800bab0:	6983      	ldr	r3, [r0, #24]
 800bab2:	b90b      	cbnz	r3, 800bab8 <_vfiprintf_r+0x18>
 800bab4:	f000 fb06 	bl	800c0c4 <__sinit>
 800bab8:	4b89      	ldr	r3, [pc, #548]	; (800bce0 <_vfiprintf_r+0x240>)
 800baba:	429d      	cmp	r5, r3
 800babc:	d11b      	bne.n	800baf6 <_vfiprintf_r+0x56>
 800babe:	6875      	ldr	r5, [r6, #4]
 800bac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac2:	07d9      	lsls	r1, r3, #31
 800bac4:	d405      	bmi.n	800bad2 <_vfiprintf_r+0x32>
 800bac6:	89ab      	ldrh	r3, [r5, #12]
 800bac8:	059a      	lsls	r2, r3, #22
 800baca:	d402      	bmi.n	800bad2 <_vfiprintf_r+0x32>
 800bacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bace:	f000 fb97 	bl	800c200 <__retarget_lock_acquire_recursive>
 800bad2:	89ab      	ldrh	r3, [r5, #12]
 800bad4:	071b      	lsls	r3, r3, #28
 800bad6:	d501      	bpl.n	800badc <_vfiprintf_r+0x3c>
 800bad8:	692b      	ldr	r3, [r5, #16]
 800bada:	b9eb      	cbnz	r3, 800bb18 <_vfiprintf_r+0x78>
 800badc:	4629      	mov	r1, r5
 800bade:	4630      	mov	r0, r6
 800bae0:	f000 f960 	bl	800bda4 <__swsetup_r>
 800bae4:	b1c0      	cbz	r0, 800bb18 <_vfiprintf_r+0x78>
 800bae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae8:	07dc      	lsls	r4, r3, #31
 800baea:	d50e      	bpl.n	800bb0a <_vfiprintf_r+0x6a>
 800baec:	f04f 30ff 	mov.w	r0, #4294967295
 800baf0:	b01d      	add	sp, #116	; 0x74
 800baf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf6:	4b7b      	ldr	r3, [pc, #492]	; (800bce4 <_vfiprintf_r+0x244>)
 800baf8:	429d      	cmp	r5, r3
 800bafa:	d101      	bne.n	800bb00 <_vfiprintf_r+0x60>
 800bafc:	68b5      	ldr	r5, [r6, #8]
 800bafe:	e7df      	b.n	800bac0 <_vfiprintf_r+0x20>
 800bb00:	4b79      	ldr	r3, [pc, #484]	; (800bce8 <_vfiprintf_r+0x248>)
 800bb02:	429d      	cmp	r5, r3
 800bb04:	bf08      	it	eq
 800bb06:	68f5      	ldreq	r5, [r6, #12]
 800bb08:	e7da      	b.n	800bac0 <_vfiprintf_r+0x20>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	0598      	lsls	r0, r3, #22
 800bb0e:	d4ed      	bmi.n	800baec <_vfiprintf_r+0x4c>
 800bb10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb12:	f000 fb76 	bl	800c202 <__retarget_lock_release_recursive>
 800bb16:	e7e9      	b.n	800baec <_vfiprintf_r+0x4c>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb1c:	2320      	movs	r3, #32
 800bb1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb22:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb26:	2330      	movs	r3, #48	; 0x30
 800bb28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcec <_vfiprintf_r+0x24c>
 800bb2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb30:	f04f 0901 	mov.w	r9, #1
 800bb34:	4623      	mov	r3, r4
 800bb36:	469a      	mov	sl, r3
 800bb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb3c:	b10a      	cbz	r2, 800bb42 <_vfiprintf_r+0xa2>
 800bb3e:	2a25      	cmp	r2, #37	; 0x25
 800bb40:	d1f9      	bne.n	800bb36 <_vfiprintf_r+0x96>
 800bb42:	ebba 0b04 	subs.w	fp, sl, r4
 800bb46:	d00b      	beq.n	800bb60 <_vfiprintf_r+0xc0>
 800bb48:	465b      	mov	r3, fp
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ff94 	bl	800ba7c <__sfputs_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	f000 80aa 	beq.w	800bcae <_vfiprintf_r+0x20e>
 800bb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb5c:	445a      	add	r2, fp
 800bb5e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb60:	f89a 3000 	ldrb.w	r3, [sl]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 80a2 	beq.w	800bcae <_vfiprintf_r+0x20e>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb74:	f10a 0a01 	add.w	sl, sl, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb80:	931a      	str	r3, [sp, #104]	; 0x68
 800bb82:	4654      	mov	r4, sl
 800bb84:	2205      	movs	r2, #5
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4858      	ldr	r0, [pc, #352]	; (800bcec <_vfiprintf_r+0x24c>)
 800bb8c:	f7f4 fb40 	bl	8000210 <memchr>
 800bb90:	9a04      	ldr	r2, [sp, #16]
 800bb92:	b9d8      	cbnz	r0, 800bbcc <_vfiprintf_r+0x12c>
 800bb94:	06d1      	lsls	r1, r2, #27
 800bb96:	bf44      	itt	mi
 800bb98:	2320      	movmi	r3, #32
 800bb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb9e:	0713      	lsls	r3, r2, #28
 800bba0:	bf44      	itt	mi
 800bba2:	232b      	movmi	r3, #43	; 0x2b
 800bba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbac:	2b2a      	cmp	r3, #42	; 0x2a
 800bbae:	d015      	beq.n	800bbdc <_vfiprintf_r+0x13c>
 800bbb0:	9a07      	ldr	r2, [sp, #28]
 800bbb2:	4654      	mov	r4, sl
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f04f 0c0a 	mov.w	ip, #10
 800bbba:	4621      	mov	r1, r4
 800bbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc0:	3b30      	subs	r3, #48	; 0x30
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d94e      	bls.n	800bc64 <_vfiprintf_r+0x1c4>
 800bbc6:	b1b0      	cbz	r0, 800bbf6 <_vfiprintf_r+0x156>
 800bbc8:	9207      	str	r2, [sp, #28]
 800bbca:	e014      	b.n	800bbf6 <_vfiprintf_r+0x156>
 800bbcc:	eba0 0308 	sub.w	r3, r0, r8
 800bbd0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	46a2      	mov	sl, r4
 800bbda:	e7d2      	b.n	800bb82 <_vfiprintf_r+0xe2>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	1d19      	adds	r1, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9103      	str	r1, [sp, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bfbb      	ittet	lt
 800bbe8:	425b      	neglt	r3, r3
 800bbea:	f042 0202 	orrlt.w	r2, r2, #2
 800bbee:	9307      	strge	r3, [sp, #28]
 800bbf0:	9307      	strlt	r3, [sp, #28]
 800bbf2:	bfb8      	it	lt
 800bbf4:	9204      	strlt	r2, [sp, #16]
 800bbf6:	7823      	ldrb	r3, [r4, #0]
 800bbf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbfa:	d10c      	bne.n	800bc16 <_vfiprintf_r+0x176>
 800bbfc:	7863      	ldrb	r3, [r4, #1]
 800bbfe:	2b2a      	cmp	r3, #42	; 0x2a
 800bc00:	d135      	bne.n	800bc6e <_vfiprintf_r+0x1ce>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	1d1a      	adds	r2, r3, #4
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	9203      	str	r2, [sp, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfb8      	it	lt
 800bc0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc12:	3402      	adds	r4, #2
 800bc14:	9305      	str	r3, [sp, #20]
 800bc16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcfc <_vfiprintf_r+0x25c>
 800bc1a:	7821      	ldrb	r1, [r4, #0]
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	4650      	mov	r0, sl
 800bc20:	f7f4 faf6 	bl	8000210 <memchr>
 800bc24:	b140      	cbz	r0, 800bc38 <_vfiprintf_r+0x198>
 800bc26:	2340      	movs	r3, #64	; 0x40
 800bc28:	eba0 000a 	sub.w	r0, r0, sl
 800bc2c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	4303      	orrs	r3, r0
 800bc34:	3401      	adds	r4, #1
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3c:	482c      	ldr	r0, [pc, #176]	; (800bcf0 <_vfiprintf_r+0x250>)
 800bc3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc42:	2206      	movs	r2, #6
 800bc44:	f7f4 fae4 	bl	8000210 <memchr>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d03f      	beq.n	800bccc <_vfiprintf_r+0x22c>
 800bc4c:	4b29      	ldr	r3, [pc, #164]	; (800bcf4 <_vfiprintf_r+0x254>)
 800bc4e:	bb1b      	cbnz	r3, 800bc98 <_vfiprintf_r+0x1f8>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	3307      	adds	r3, #7
 800bc54:	f023 0307 	bic.w	r3, r3, #7
 800bc58:	3308      	adds	r3, #8
 800bc5a:	9303      	str	r3, [sp, #12]
 800bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5e:	443b      	add	r3, r7
 800bc60:	9309      	str	r3, [sp, #36]	; 0x24
 800bc62:	e767      	b.n	800bb34 <_vfiprintf_r+0x94>
 800bc64:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc68:	460c      	mov	r4, r1
 800bc6a:	2001      	movs	r0, #1
 800bc6c:	e7a5      	b.n	800bbba <_vfiprintf_r+0x11a>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	3401      	adds	r4, #1
 800bc72:	9305      	str	r3, [sp, #20]
 800bc74:	4619      	mov	r1, r3
 800bc76:	f04f 0c0a 	mov.w	ip, #10
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc80:	3a30      	subs	r2, #48	; 0x30
 800bc82:	2a09      	cmp	r2, #9
 800bc84:	d903      	bls.n	800bc8e <_vfiprintf_r+0x1ee>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0c5      	beq.n	800bc16 <_vfiprintf_r+0x176>
 800bc8a:	9105      	str	r1, [sp, #20]
 800bc8c:	e7c3      	b.n	800bc16 <_vfiprintf_r+0x176>
 800bc8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc92:	4604      	mov	r4, r0
 800bc94:	2301      	movs	r3, #1
 800bc96:	e7f0      	b.n	800bc7a <_vfiprintf_r+0x1da>
 800bc98:	ab03      	add	r3, sp, #12
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <_vfiprintf_r+0x258>)
 800bca0:	a904      	add	r1, sp, #16
 800bca2:	4630      	mov	r0, r6
 800bca4:	f7fc f83c 	bl	8007d20 <_printf_float>
 800bca8:	4607      	mov	r7, r0
 800bcaa:	1c78      	adds	r0, r7, #1
 800bcac:	d1d6      	bne.n	800bc5c <_vfiprintf_r+0x1bc>
 800bcae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcb0:	07d9      	lsls	r1, r3, #31
 800bcb2:	d405      	bmi.n	800bcc0 <_vfiprintf_r+0x220>
 800bcb4:	89ab      	ldrh	r3, [r5, #12]
 800bcb6:	059a      	lsls	r2, r3, #22
 800bcb8:	d402      	bmi.n	800bcc0 <_vfiprintf_r+0x220>
 800bcba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcbc:	f000 faa1 	bl	800c202 <__retarget_lock_release_recursive>
 800bcc0:	89ab      	ldrh	r3, [r5, #12]
 800bcc2:	065b      	lsls	r3, r3, #25
 800bcc4:	f53f af12 	bmi.w	800baec <_vfiprintf_r+0x4c>
 800bcc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcca:	e711      	b.n	800baf0 <_vfiprintf_r+0x50>
 800bccc:	ab03      	add	r3, sp, #12
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	462a      	mov	r2, r5
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <_vfiprintf_r+0x258>)
 800bcd4:	a904      	add	r1, sp, #16
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7fc fac6 	bl	8008268 <_printf_i>
 800bcdc:	e7e4      	b.n	800bca8 <_vfiprintf_r+0x208>
 800bcde:	bf00      	nop
 800bce0:	0800ed74 	.word	0x0800ed74
 800bce4:	0800ed94 	.word	0x0800ed94
 800bce8:	0800ed54 	.word	0x0800ed54
 800bcec:	0800ed04 	.word	0x0800ed04
 800bcf0:	0800ed0e 	.word	0x0800ed0e
 800bcf4:	08007d21 	.word	0x08007d21
 800bcf8:	0800ba7d 	.word	0x0800ba7d
 800bcfc:	0800ed0a 	.word	0x0800ed0a

0800bd00 <__swbuf_r>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	460e      	mov	r6, r1
 800bd04:	4614      	mov	r4, r2
 800bd06:	4605      	mov	r5, r0
 800bd08:	b118      	cbz	r0, 800bd12 <__swbuf_r+0x12>
 800bd0a:	6983      	ldr	r3, [r0, #24]
 800bd0c:	b90b      	cbnz	r3, 800bd12 <__swbuf_r+0x12>
 800bd0e:	f000 f9d9 	bl	800c0c4 <__sinit>
 800bd12:	4b21      	ldr	r3, [pc, #132]	; (800bd98 <__swbuf_r+0x98>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	d12b      	bne.n	800bd70 <__swbuf_r+0x70>
 800bd18:	686c      	ldr	r4, [r5, #4]
 800bd1a:	69a3      	ldr	r3, [r4, #24]
 800bd1c:	60a3      	str	r3, [r4, #8]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	071a      	lsls	r2, r3, #28
 800bd22:	d52f      	bpl.n	800bd84 <__swbuf_r+0x84>
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	b36b      	cbz	r3, 800bd84 <__swbuf_r+0x84>
 800bd28:	6923      	ldr	r3, [r4, #16]
 800bd2a:	6820      	ldr	r0, [r4, #0]
 800bd2c:	1ac0      	subs	r0, r0, r3
 800bd2e:	6963      	ldr	r3, [r4, #20]
 800bd30:	b2f6      	uxtb	r6, r6
 800bd32:	4283      	cmp	r3, r0
 800bd34:	4637      	mov	r7, r6
 800bd36:	dc04      	bgt.n	800bd42 <__swbuf_r+0x42>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f000 f92e 	bl	800bf9c <_fflush_r>
 800bd40:	bb30      	cbnz	r0, 800bd90 <__swbuf_r+0x90>
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	60a3      	str	r3, [r4, #8]
 800bd48:	6823      	ldr	r3, [r4, #0]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	6022      	str	r2, [r4, #0]
 800bd4e:	701e      	strb	r6, [r3, #0]
 800bd50:	6963      	ldr	r3, [r4, #20]
 800bd52:	3001      	adds	r0, #1
 800bd54:	4283      	cmp	r3, r0
 800bd56:	d004      	beq.n	800bd62 <__swbuf_r+0x62>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	07db      	lsls	r3, r3, #31
 800bd5c:	d506      	bpl.n	800bd6c <__swbuf_r+0x6c>
 800bd5e:	2e0a      	cmp	r6, #10
 800bd60:	d104      	bne.n	800bd6c <__swbuf_r+0x6c>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4628      	mov	r0, r5
 800bd66:	f000 f919 	bl	800bf9c <_fflush_r>
 800bd6a:	b988      	cbnz	r0, 800bd90 <__swbuf_r+0x90>
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd70:	4b0a      	ldr	r3, [pc, #40]	; (800bd9c <__swbuf_r+0x9c>)
 800bd72:	429c      	cmp	r4, r3
 800bd74:	d101      	bne.n	800bd7a <__swbuf_r+0x7a>
 800bd76:	68ac      	ldr	r4, [r5, #8]
 800bd78:	e7cf      	b.n	800bd1a <__swbuf_r+0x1a>
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <__swbuf_r+0xa0>)
 800bd7c:	429c      	cmp	r4, r3
 800bd7e:	bf08      	it	eq
 800bd80:	68ec      	ldreq	r4, [r5, #12]
 800bd82:	e7ca      	b.n	800bd1a <__swbuf_r+0x1a>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 f80c 	bl	800bda4 <__swsetup_r>
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	d0cb      	beq.n	800bd28 <__swbuf_r+0x28>
 800bd90:	f04f 37ff 	mov.w	r7, #4294967295
 800bd94:	e7ea      	b.n	800bd6c <__swbuf_r+0x6c>
 800bd96:	bf00      	nop
 800bd98:	0800ed74 	.word	0x0800ed74
 800bd9c:	0800ed94 	.word	0x0800ed94
 800bda0:	0800ed54 	.word	0x0800ed54

0800bda4 <__swsetup_r>:
 800bda4:	4b32      	ldr	r3, [pc, #200]	; (800be70 <__swsetup_r+0xcc>)
 800bda6:	b570      	push	{r4, r5, r6, lr}
 800bda8:	681d      	ldr	r5, [r3, #0]
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460c      	mov	r4, r1
 800bdae:	b125      	cbz	r5, 800bdba <__swsetup_r+0x16>
 800bdb0:	69ab      	ldr	r3, [r5, #24]
 800bdb2:	b913      	cbnz	r3, 800bdba <__swsetup_r+0x16>
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f000 f985 	bl	800c0c4 <__sinit>
 800bdba:	4b2e      	ldr	r3, [pc, #184]	; (800be74 <__swsetup_r+0xd0>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	d10f      	bne.n	800bde0 <__swsetup_r+0x3c>
 800bdc0:	686c      	ldr	r4, [r5, #4]
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdc8:	0719      	lsls	r1, r3, #28
 800bdca:	d42c      	bmi.n	800be26 <__swsetup_r+0x82>
 800bdcc:	06dd      	lsls	r5, r3, #27
 800bdce:	d411      	bmi.n	800bdf4 <__swsetup_r+0x50>
 800bdd0:	2309      	movs	r3, #9
 800bdd2:	6033      	str	r3, [r6, #0]
 800bdd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdd8:	81a3      	strh	r3, [r4, #12]
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	e03e      	b.n	800be5e <__swsetup_r+0xba>
 800bde0:	4b25      	ldr	r3, [pc, #148]	; (800be78 <__swsetup_r+0xd4>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d101      	bne.n	800bdea <__swsetup_r+0x46>
 800bde6:	68ac      	ldr	r4, [r5, #8]
 800bde8:	e7eb      	b.n	800bdc2 <__swsetup_r+0x1e>
 800bdea:	4b24      	ldr	r3, [pc, #144]	; (800be7c <__swsetup_r+0xd8>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	bf08      	it	eq
 800bdf0:	68ec      	ldreq	r4, [r5, #12]
 800bdf2:	e7e6      	b.n	800bdc2 <__swsetup_r+0x1e>
 800bdf4:	0758      	lsls	r0, r3, #29
 800bdf6:	d512      	bpl.n	800be1e <__swsetup_r+0x7a>
 800bdf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdfa:	b141      	cbz	r1, 800be0e <__swsetup_r+0x6a>
 800bdfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be00:	4299      	cmp	r1, r3
 800be02:	d002      	beq.n	800be0a <__swsetup_r+0x66>
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff fb25 	bl	800b454 <_free_r>
 800be0a:	2300      	movs	r3, #0
 800be0c:	6363      	str	r3, [r4, #52]	; 0x34
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	2300      	movs	r3, #0
 800be18:	6063      	str	r3, [r4, #4]
 800be1a:	6923      	ldr	r3, [r4, #16]
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	f043 0308 	orr.w	r3, r3, #8
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	b94b      	cbnz	r3, 800be3e <__swsetup_r+0x9a>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be34:	d003      	beq.n	800be3e <__swsetup_r+0x9a>
 800be36:	4621      	mov	r1, r4
 800be38:	4630      	mov	r0, r6
 800be3a:	f000 fa09 	bl	800c250 <__smakebuf_r>
 800be3e:	89a0      	ldrh	r0, [r4, #12]
 800be40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be44:	f010 0301 	ands.w	r3, r0, #1
 800be48:	d00a      	beq.n	800be60 <__swsetup_r+0xbc>
 800be4a:	2300      	movs	r3, #0
 800be4c:	60a3      	str	r3, [r4, #8]
 800be4e:	6963      	ldr	r3, [r4, #20]
 800be50:	425b      	negs	r3, r3
 800be52:	61a3      	str	r3, [r4, #24]
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	b943      	cbnz	r3, 800be6a <__swsetup_r+0xc6>
 800be58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be5c:	d1ba      	bne.n	800bdd4 <__swsetup_r+0x30>
 800be5e:	bd70      	pop	{r4, r5, r6, pc}
 800be60:	0781      	lsls	r1, r0, #30
 800be62:	bf58      	it	pl
 800be64:	6963      	ldrpl	r3, [r4, #20]
 800be66:	60a3      	str	r3, [r4, #8]
 800be68:	e7f4      	b.n	800be54 <__swsetup_r+0xb0>
 800be6a:	2000      	movs	r0, #0
 800be6c:	e7f7      	b.n	800be5e <__swsetup_r+0xba>
 800be6e:	bf00      	nop
 800be70:	2000001c 	.word	0x2000001c
 800be74:	0800ed74 	.word	0x0800ed74
 800be78:	0800ed94 	.word	0x0800ed94
 800be7c:	0800ed54 	.word	0x0800ed54

0800be80 <abort>:
 800be80:	b508      	push	{r3, lr}
 800be82:	2006      	movs	r0, #6
 800be84:	f000 fa54 	bl	800c330 <raise>
 800be88:	2001      	movs	r0, #1
 800be8a:	f7f5 fdc3 	bl	8001a14 <_exit>
	...

0800be90 <__sflush_r>:
 800be90:	898a      	ldrh	r2, [r1, #12]
 800be92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	4605      	mov	r5, r0
 800be98:	0710      	lsls	r0, r2, #28
 800be9a:	460c      	mov	r4, r1
 800be9c:	d458      	bmi.n	800bf50 <__sflush_r+0xc0>
 800be9e:	684b      	ldr	r3, [r1, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	dc05      	bgt.n	800beb0 <__sflush_r+0x20>
 800bea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dc02      	bgt.n	800beb0 <__sflush_r+0x20>
 800beaa:	2000      	movs	r0, #0
 800beac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d0f9      	beq.n	800beaa <__sflush_r+0x1a>
 800beb6:	2300      	movs	r3, #0
 800beb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bebc:	682f      	ldr	r7, [r5, #0]
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	d032      	beq.n	800bf28 <__sflush_r+0x98>
 800bec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	075a      	lsls	r2, r3, #29
 800bec8:	d505      	bpl.n	800bed6 <__sflush_r+0x46>
 800beca:	6863      	ldr	r3, [r4, #4]
 800becc:	1ac0      	subs	r0, r0, r3
 800bece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bed0:	b10b      	cbz	r3, 800bed6 <__sflush_r+0x46>
 800bed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bed4:	1ac0      	subs	r0, r0, r3
 800bed6:	2300      	movs	r3, #0
 800bed8:	4602      	mov	r2, r0
 800beda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bedc:	6a21      	ldr	r1, [r4, #32]
 800bede:	4628      	mov	r0, r5
 800bee0:	47b0      	blx	r6
 800bee2:	1c43      	adds	r3, r0, #1
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	d106      	bne.n	800bef6 <__sflush_r+0x66>
 800bee8:	6829      	ldr	r1, [r5, #0]
 800beea:	291d      	cmp	r1, #29
 800beec:	d82c      	bhi.n	800bf48 <__sflush_r+0xb8>
 800beee:	4a2a      	ldr	r2, [pc, #168]	; (800bf98 <__sflush_r+0x108>)
 800bef0:	40ca      	lsrs	r2, r1
 800bef2:	07d6      	lsls	r6, r2, #31
 800bef4:	d528      	bpl.n	800bf48 <__sflush_r+0xb8>
 800bef6:	2200      	movs	r2, #0
 800bef8:	6062      	str	r2, [r4, #4]
 800befa:	04d9      	lsls	r1, r3, #19
 800befc:	6922      	ldr	r2, [r4, #16]
 800befe:	6022      	str	r2, [r4, #0]
 800bf00:	d504      	bpl.n	800bf0c <__sflush_r+0x7c>
 800bf02:	1c42      	adds	r2, r0, #1
 800bf04:	d101      	bne.n	800bf0a <__sflush_r+0x7a>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	b903      	cbnz	r3, 800bf0c <__sflush_r+0x7c>
 800bf0a:	6560      	str	r0, [r4, #84]	; 0x54
 800bf0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf0e:	602f      	str	r7, [r5, #0]
 800bf10:	2900      	cmp	r1, #0
 800bf12:	d0ca      	beq.n	800beaa <__sflush_r+0x1a>
 800bf14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf18:	4299      	cmp	r1, r3
 800bf1a:	d002      	beq.n	800bf22 <__sflush_r+0x92>
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f7ff fa99 	bl	800b454 <_free_r>
 800bf22:	2000      	movs	r0, #0
 800bf24:	6360      	str	r0, [r4, #52]	; 0x34
 800bf26:	e7c1      	b.n	800beac <__sflush_r+0x1c>
 800bf28:	6a21      	ldr	r1, [r4, #32]
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b0      	blx	r6
 800bf30:	1c41      	adds	r1, r0, #1
 800bf32:	d1c7      	bne.n	800bec4 <__sflush_r+0x34>
 800bf34:	682b      	ldr	r3, [r5, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0c4      	beq.n	800bec4 <__sflush_r+0x34>
 800bf3a:	2b1d      	cmp	r3, #29
 800bf3c:	d001      	beq.n	800bf42 <__sflush_r+0xb2>
 800bf3e:	2b16      	cmp	r3, #22
 800bf40:	d101      	bne.n	800bf46 <__sflush_r+0xb6>
 800bf42:	602f      	str	r7, [r5, #0]
 800bf44:	e7b1      	b.n	800beaa <__sflush_r+0x1a>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf4c:	81a3      	strh	r3, [r4, #12]
 800bf4e:	e7ad      	b.n	800beac <__sflush_r+0x1c>
 800bf50:	690f      	ldr	r7, [r1, #16]
 800bf52:	2f00      	cmp	r7, #0
 800bf54:	d0a9      	beq.n	800beaa <__sflush_r+0x1a>
 800bf56:	0793      	lsls	r3, r2, #30
 800bf58:	680e      	ldr	r6, [r1, #0]
 800bf5a:	bf08      	it	eq
 800bf5c:	694b      	ldreq	r3, [r1, #20]
 800bf5e:	600f      	str	r7, [r1, #0]
 800bf60:	bf18      	it	ne
 800bf62:	2300      	movne	r3, #0
 800bf64:	eba6 0807 	sub.w	r8, r6, r7
 800bf68:	608b      	str	r3, [r1, #8]
 800bf6a:	f1b8 0f00 	cmp.w	r8, #0
 800bf6e:	dd9c      	ble.n	800beaa <__sflush_r+0x1a>
 800bf70:	6a21      	ldr	r1, [r4, #32]
 800bf72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf74:	4643      	mov	r3, r8
 800bf76:	463a      	mov	r2, r7
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b0      	blx	r6
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	dc06      	bgt.n	800bf8e <__sflush_r+0xfe>
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf86:	81a3      	strh	r3, [r4, #12]
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8c:	e78e      	b.n	800beac <__sflush_r+0x1c>
 800bf8e:	4407      	add	r7, r0
 800bf90:	eba8 0800 	sub.w	r8, r8, r0
 800bf94:	e7e9      	b.n	800bf6a <__sflush_r+0xda>
 800bf96:	bf00      	nop
 800bf98:	20400001 	.word	0x20400001

0800bf9c <_fflush_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	690b      	ldr	r3, [r1, #16]
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	460c      	mov	r4, r1
 800bfa4:	b913      	cbnz	r3, 800bfac <_fflush_r+0x10>
 800bfa6:	2500      	movs	r5, #0
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	b118      	cbz	r0, 800bfb6 <_fflush_r+0x1a>
 800bfae:	6983      	ldr	r3, [r0, #24]
 800bfb0:	b90b      	cbnz	r3, 800bfb6 <_fflush_r+0x1a>
 800bfb2:	f000 f887 	bl	800c0c4 <__sinit>
 800bfb6:	4b14      	ldr	r3, [pc, #80]	; (800c008 <_fflush_r+0x6c>)
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	d11b      	bne.n	800bff4 <_fflush_r+0x58>
 800bfbc:	686c      	ldr	r4, [r5, #4]
 800bfbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0ef      	beq.n	800bfa6 <_fflush_r+0xa>
 800bfc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfc8:	07d0      	lsls	r0, r2, #31
 800bfca:	d404      	bmi.n	800bfd6 <_fflush_r+0x3a>
 800bfcc:	0599      	lsls	r1, r3, #22
 800bfce:	d402      	bmi.n	800bfd6 <_fflush_r+0x3a>
 800bfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfd2:	f000 f915 	bl	800c200 <__retarget_lock_acquire_recursive>
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	4621      	mov	r1, r4
 800bfda:	f7ff ff59 	bl	800be90 <__sflush_r>
 800bfde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfe0:	07da      	lsls	r2, r3, #31
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	d4e0      	bmi.n	800bfa8 <_fflush_r+0xc>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	059b      	lsls	r3, r3, #22
 800bfea:	d4dd      	bmi.n	800bfa8 <_fflush_r+0xc>
 800bfec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfee:	f000 f908 	bl	800c202 <__retarget_lock_release_recursive>
 800bff2:	e7d9      	b.n	800bfa8 <_fflush_r+0xc>
 800bff4:	4b05      	ldr	r3, [pc, #20]	; (800c00c <_fflush_r+0x70>)
 800bff6:	429c      	cmp	r4, r3
 800bff8:	d101      	bne.n	800bffe <_fflush_r+0x62>
 800bffa:	68ac      	ldr	r4, [r5, #8]
 800bffc:	e7df      	b.n	800bfbe <_fflush_r+0x22>
 800bffe:	4b04      	ldr	r3, [pc, #16]	; (800c010 <_fflush_r+0x74>)
 800c000:	429c      	cmp	r4, r3
 800c002:	bf08      	it	eq
 800c004:	68ec      	ldreq	r4, [r5, #12]
 800c006:	e7da      	b.n	800bfbe <_fflush_r+0x22>
 800c008:	0800ed74 	.word	0x0800ed74
 800c00c:	0800ed94 	.word	0x0800ed94
 800c010:	0800ed54 	.word	0x0800ed54

0800c014 <std>:
 800c014:	2300      	movs	r3, #0
 800c016:	b510      	push	{r4, lr}
 800c018:	4604      	mov	r4, r0
 800c01a:	e9c0 3300 	strd	r3, r3, [r0]
 800c01e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c022:	6083      	str	r3, [r0, #8]
 800c024:	8181      	strh	r1, [r0, #12]
 800c026:	6643      	str	r3, [r0, #100]	; 0x64
 800c028:	81c2      	strh	r2, [r0, #14]
 800c02a:	6183      	str	r3, [r0, #24]
 800c02c:	4619      	mov	r1, r3
 800c02e:	2208      	movs	r2, #8
 800c030:	305c      	adds	r0, #92	; 0x5c
 800c032:	f7fb fdcd 	bl	8007bd0 <memset>
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <std+0x38>)
 800c038:	6263      	str	r3, [r4, #36]	; 0x24
 800c03a:	4b05      	ldr	r3, [pc, #20]	; (800c050 <std+0x3c>)
 800c03c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <std+0x40>)
 800c040:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c042:	4b05      	ldr	r3, [pc, #20]	; (800c058 <std+0x44>)
 800c044:	6224      	str	r4, [r4, #32]
 800c046:	6323      	str	r3, [r4, #48]	; 0x30
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	bf00      	nop
 800c04c:	0800c369 	.word	0x0800c369
 800c050:	0800c38b 	.word	0x0800c38b
 800c054:	0800c3c3 	.word	0x0800c3c3
 800c058:	0800c3e7 	.word	0x0800c3e7

0800c05c <_cleanup_r>:
 800c05c:	4901      	ldr	r1, [pc, #4]	; (800c064 <_cleanup_r+0x8>)
 800c05e:	f000 b8af 	b.w	800c1c0 <_fwalk_reent>
 800c062:	bf00      	nop
 800c064:	0800bf9d 	.word	0x0800bf9d

0800c068 <__sfmoreglue>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	2268      	movs	r2, #104	; 0x68
 800c06c:	1e4d      	subs	r5, r1, #1
 800c06e:	4355      	muls	r5, r2
 800c070:	460e      	mov	r6, r1
 800c072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c076:	f7ff fa59 	bl	800b52c <_malloc_r>
 800c07a:	4604      	mov	r4, r0
 800c07c:	b140      	cbz	r0, 800c090 <__sfmoreglue+0x28>
 800c07e:	2100      	movs	r1, #0
 800c080:	e9c0 1600 	strd	r1, r6, [r0]
 800c084:	300c      	adds	r0, #12
 800c086:	60a0      	str	r0, [r4, #8]
 800c088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c08c:	f7fb fda0 	bl	8007bd0 <memset>
 800c090:	4620      	mov	r0, r4
 800c092:	bd70      	pop	{r4, r5, r6, pc}

0800c094 <__sfp_lock_acquire>:
 800c094:	4801      	ldr	r0, [pc, #4]	; (800c09c <__sfp_lock_acquire+0x8>)
 800c096:	f000 b8b3 	b.w	800c200 <__retarget_lock_acquire_recursive>
 800c09a:	bf00      	nop
 800c09c:	200003d5 	.word	0x200003d5

0800c0a0 <__sfp_lock_release>:
 800c0a0:	4801      	ldr	r0, [pc, #4]	; (800c0a8 <__sfp_lock_release+0x8>)
 800c0a2:	f000 b8ae 	b.w	800c202 <__retarget_lock_release_recursive>
 800c0a6:	bf00      	nop
 800c0a8:	200003d5 	.word	0x200003d5

0800c0ac <__sinit_lock_acquire>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	; (800c0b4 <__sinit_lock_acquire+0x8>)
 800c0ae:	f000 b8a7 	b.w	800c200 <__retarget_lock_acquire_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	200003d6 	.word	0x200003d6

0800c0b8 <__sinit_lock_release>:
 800c0b8:	4801      	ldr	r0, [pc, #4]	; (800c0c0 <__sinit_lock_release+0x8>)
 800c0ba:	f000 b8a2 	b.w	800c202 <__retarget_lock_release_recursive>
 800c0be:	bf00      	nop
 800c0c0:	200003d6 	.word	0x200003d6

0800c0c4 <__sinit>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	f7ff fff0 	bl	800c0ac <__sinit_lock_acquire>
 800c0cc:	69a3      	ldr	r3, [r4, #24]
 800c0ce:	b11b      	cbz	r3, 800c0d8 <__sinit+0x14>
 800c0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d4:	f7ff bff0 	b.w	800c0b8 <__sinit_lock_release>
 800c0d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c0de:	4b13      	ldr	r3, [pc, #76]	; (800c12c <__sinit+0x68>)
 800c0e0:	4a13      	ldr	r2, [pc, #76]	; (800c130 <__sinit+0x6c>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	bf04      	itt	eq
 800c0ea:	2301      	moveq	r3, #1
 800c0ec:	61a3      	streq	r3, [r4, #24]
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 f820 	bl	800c134 <__sfp>
 800c0f4:	6060      	str	r0, [r4, #4]
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f81c 	bl	800c134 <__sfp>
 800c0fc:	60a0      	str	r0, [r4, #8]
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 f818 	bl	800c134 <__sfp>
 800c104:	2200      	movs	r2, #0
 800c106:	60e0      	str	r0, [r4, #12]
 800c108:	2104      	movs	r1, #4
 800c10a:	6860      	ldr	r0, [r4, #4]
 800c10c:	f7ff ff82 	bl	800c014 <std>
 800c110:	68a0      	ldr	r0, [r4, #8]
 800c112:	2201      	movs	r2, #1
 800c114:	2109      	movs	r1, #9
 800c116:	f7ff ff7d 	bl	800c014 <std>
 800c11a:	68e0      	ldr	r0, [r4, #12]
 800c11c:	2202      	movs	r2, #2
 800c11e:	2112      	movs	r1, #18
 800c120:	f7ff ff78 	bl	800c014 <std>
 800c124:	2301      	movs	r3, #1
 800c126:	61a3      	str	r3, [r4, #24]
 800c128:	e7d2      	b.n	800c0d0 <__sinit+0xc>
 800c12a:	bf00      	nop
 800c12c:	0800e90c 	.word	0x0800e90c
 800c130:	0800c05d 	.word	0x0800c05d

0800c134 <__sfp>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	4607      	mov	r7, r0
 800c138:	f7ff ffac 	bl	800c094 <__sfp_lock_acquire>
 800c13c:	4b1e      	ldr	r3, [pc, #120]	; (800c1b8 <__sfp+0x84>)
 800c13e:	681e      	ldr	r6, [r3, #0]
 800c140:	69b3      	ldr	r3, [r6, #24]
 800c142:	b913      	cbnz	r3, 800c14a <__sfp+0x16>
 800c144:	4630      	mov	r0, r6
 800c146:	f7ff ffbd 	bl	800c0c4 <__sinit>
 800c14a:	3648      	adds	r6, #72	; 0x48
 800c14c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c150:	3b01      	subs	r3, #1
 800c152:	d503      	bpl.n	800c15c <__sfp+0x28>
 800c154:	6833      	ldr	r3, [r6, #0]
 800c156:	b30b      	cbz	r3, 800c19c <__sfp+0x68>
 800c158:	6836      	ldr	r6, [r6, #0]
 800c15a:	e7f7      	b.n	800c14c <__sfp+0x18>
 800c15c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c160:	b9d5      	cbnz	r5, 800c198 <__sfp+0x64>
 800c162:	4b16      	ldr	r3, [pc, #88]	; (800c1bc <__sfp+0x88>)
 800c164:	60e3      	str	r3, [r4, #12]
 800c166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c16a:	6665      	str	r5, [r4, #100]	; 0x64
 800c16c:	f000 f847 	bl	800c1fe <__retarget_lock_init_recursive>
 800c170:	f7ff ff96 	bl	800c0a0 <__sfp_lock_release>
 800c174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c17c:	6025      	str	r5, [r4, #0]
 800c17e:	61a5      	str	r5, [r4, #24]
 800c180:	2208      	movs	r2, #8
 800c182:	4629      	mov	r1, r5
 800c184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c188:	f7fb fd22 	bl	8007bd0 <memset>
 800c18c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c194:	4620      	mov	r0, r4
 800c196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c198:	3468      	adds	r4, #104	; 0x68
 800c19a:	e7d9      	b.n	800c150 <__sfp+0x1c>
 800c19c:	2104      	movs	r1, #4
 800c19e:	4638      	mov	r0, r7
 800c1a0:	f7ff ff62 	bl	800c068 <__sfmoreglue>
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	6030      	str	r0, [r6, #0]
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d1d5      	bne.n	800c158 <__sfp+0x24>
 800c1ac:	f7ff ff78 	bl	800c0a0 <__sfp_lock_release>
 800c1b0:	230c      	movs	r3, #12
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	e7ee      	b.n	800c194 <__sfp+0x60>
 800c1b6:	bf00      	nop
 800c1b8:	0800e90c 	.word	0x0800e90c
 800c1bc:	ffff0001 	.word	0xffff0001

0800c1c0 <_fwalk_reent>:
 800c1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	4688      	mov	r8, r1
 800c1c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1cc:	2700      	movs	r7, #0
 800c1ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1d2:	f1b9 0901 	subs.w	r9, r9, #1
 800c1d6:	d505      	bpl.n	800c1e4 <_fwalk_reent+0x24>
 800c1d8:	6824      	ldr	r4, [r4, #0]
 800c1da:	2c00      	cmp	r4, #0
 800c1dc:	d1f7      	bne.n	800c1ce <_fwalk_reent+0xe>
 800c1de:	4638      	mov	r0, r7
 800c1e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e4:	89ab      	ldrh	r3, [r5, #12]
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d907      	bls.n	800c1fa <_fwalk_reent+0x3a>
 800c1ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	d003      	beq.n	800c1fa <_fwalk_reent+0x3a>
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	47c0      	blx	r8
 800c1f8:	4307      	orrs	r7, r0
 800c1fa:	3568      	adds	r5, #104	; 0x68
 800c1fc:	e7e9      	b.n	800c1d2 <_fwalk_reent+0x12>

0800c1fe <__retarget_lock_init_recursive>:
 800c1fe:	4770      	bx	lr

0800c200 <__retarget_lock_acquire_recursive>:
 800c200:	4770      	bx	lr

0800c202 <__retarget_lock_release_recursive>:
 800c202:	4770      	bx	lr

0800c204 <__swhatbuf_r>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	460e      	mov	r6, r1
 800c208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20c:	2900      	cmp	r1, #0
 800c20e:	b096      	sub	sp, #88	; 0x58
 800c210:	4614      	mov	r4, r2
 800c212:	461d      	mov	r5, r3
 800c214:	da08      	bge.n	800c228 <__swhatbuf_r+0x24>
 800c216:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	602a      	str	r2, [r5, #0]
 800c21e:	061a      	lsls	r2, r3, #24
 800c220:	d410      	bmi.n	800c244 <__swhatbuf_r+0x40>
 800c222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c226:	e00e      	b.n	800c246 <__swhatbuf_r+0x42>
 800c228:	466a      	mov	r2, sp
 800c22a:	f000 f903 	bl	800c434 <_fstat_r>
 800c22e:	2800      	cmp	r0, #0
 800c230:	dbf1      	blt.n	800c216 <__swhatbuf_r+0x12>
 800c232:	9a01      	ldr	r2, [sp, #4]
 800c234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c23c:	425a      	negs	r2, r3
 800c23e:	415a      	adcs	r2, r3
 800c240:	602a      	str	r2, [r5, #0]
 800c242:	e7ee      	b.n	800c222 <__swhatbuf_r+0x1e>
 800c244:	2340      	movs	r3, #64	; 0x40
 800c246:	2000      	movs	r0, #0
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	b016      	add	sp, #88	; 0x58
 800c24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c250 <__smakebuf_r>:
 800c250:	898b      	ldrh	r3, [r1, #12]
 800c252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c254:	079d      	lsls	r5, r3, #30
 800c256:	4606      	mov	r6, r0
 800c258:	460c      	mov	r4, r1
 800c25a:	d507      	bpl.n	800c26c <__smakebuf_r+0x1c>
 800c25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	6123      	str	r3, [r4, #16]
 800c264:	2301      	movs	r3, #1
 800c266:	6163      	str	r3, [r4, #20]
 800c268:	b002      	add	sp, #8
 800c26a:	bd70      	pop	{r4, r5, r6, pc}
 800c26c:	ab01      	add	r3, sp, #4
 800c26e:	466a      	mov	r2, sp
 800c270:	f7ff ffc8 	bl	800c204 <__swhatbuf_r>
 800c274:	9900      	ldr	r1, [sp, #0]
 800c276:	4605      	mov	r5, r0
 800c278:	4630      	mov	r0, r6
 800c27a:	f7ff f957 	bl	800b52c <_malloc_r>
 800c27e:	b948      	cbnz	r0, 800c294 <__smakebuf_r+0x44>
 800c280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c284:	059a      	lsls	r2, r3, #22
 800c286:	d4ef      	bmi.n	800c268 <__smakebuf_r+0x18>
 800c288:	f023 0303 	bic.w	r3, r3, #3
 800c28c:	f043 0302 	orr.w	r3, r3, #2
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	e7e3      	b.n	800c25c <__smakebuf_r+0xc>
 800c294:	4b0d      	ldr	r3, [pc, #52]	; (800c2cc <__smakebuf_r+0x7c>)
 800c296:	62b3      	str	r3, [r6, #40]	; 0x28
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	6020      	str	r0, [r4, #0]
 800c29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	9b00      	ldr	r3, [sp, #0]
 800c2a4:	6163      	str	r3, [r4, #20]
 800c2a6:	9b01      	ldr	r3, [sp, #4]
 800c2a8:	6120      	str	r0, [r4, #16]
 800c2aa:	b15b      	cbz	r3, 800c2c4 <__smakebuf_r+0x74>
 800c2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f000 f8d1 	bl	800c458 <_isatty_r>
 800c2b6:	b128      	cbz	r0, 800c2c4 <__smakebuf_r+0x74>
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	f023 0303 	bic.w	r3, r3, #3
 800c2be:	f043 0301 	orr.w	r3, r3, #1
 800c2c2:	81a3      	strh	r3, [r4, #12]
 800c2c4:	89a0      	ldrh	r0, [r4, #12]
 800c2c6:	4305      	orrs	r5, r0
 800c2c8:	81a5      	strh	r5, [r4, #12]
 800c2ca:	e7cd      	b.n	800c268 <__smakebuf_r+0x18>
 800c2cc:	0800c05d 	.word	0x0800c05d

0800c2d0 <_malloc_usable_size_r>:
 800c2d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2d4:	1f18      	subs	r0, r3, #4
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfbc      	itt	lt
 800c2da:	580b      	ldrlt	r3, [r1, r0]
 800c2dc:	18c0      	addlt	r0, r0, r3
 800c2de:	4770      	bx	lr

0800c2e0 <_raise_r>:
 800c2e0:	291f      	cmp	r1, #31
 800c2e2:	b538      	push	{r3, r4, r5, lr}
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	d904      	bls.n	800c2f4 <_raise_r+0x14>
 800c2ea:	2316      	movs	r3, #22
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f2:	bd38      	pop	{r3, r4, r5, pc}
 800c2f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2f6:	b112      	cbz	r2, 800c2fe <_raise_r+0x1e>
 800c2f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2fc:	b94b      	cbnz	r3, 800c312 <_raise_r+0x32>
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f830 	bl	800c364 <_getpid_r>
 800c304:	462a      	mov	r2, r5
 800c306:	4601      	mov	r1, r0
 800c308:	4620      	mov	r0, r4
 800c30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c30e:	f000 b817 	b.w	800c340 <_kill_r>
 800c312:	2b01      	cmp	r3, #1
 800c314:	d00a      	beq.n	800c32c <_raise_r+0x4c>
 800c316:	1c59      	adds	r1, r3, #1
 800c318:	d103      	bne.n	800c322 <_raise_r+0x42>
 800c31a:	2316      	movs	r3, #22
 800c31c:	6003      	str	r3, [r0, #0]
 800c31e:	2001      	movs	r0, #1
 800c320:	e7e7      	b.n	800c2f2 <_raise_r+0x12>
 800c322:	2400      	movs	r4, #0
 800c324:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c328:	4628      	mov	r0, r5
 800c32a:	4798      	blx	r3
 800c32c:	2000      	movs	r0, #0
 800c32e:	e7e0      	b.n	800c2f2 <_raise_r+0x12>

0800c330 <raise>:
 800c330:	4b02      	ldr	r3, [pc, #8]	; (800c33c <raise+0xc>)
 800c332:	4601      	mov	r1, r0
 800c334:	6818      	ldr	r0, [r3, #0]
 800c336:	f7ff bfd3 	b.w	800c2e0 <_raise_r>
 800c33a:	bf00      	nop
 800c33c:	2000001c 	.word	0x2000001c

0800c340 <_kill_r>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	4d07      	ldr	r5, [pc, #28]	; (800c360 <_kill_r+0x20>)
 800c344:	2300      	movs	r3, #0
 800c346:	4604      	mov	r4, r0
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	602b      	str	r3, [r5, #0]
 800c34e:	f7f5 fb51 	bl	80019f4 <_kill>
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	d102      	bne.n	800c35c <_kill_r+0x1c>
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	b103      	cbz	r3, 800c35c <_kill_r+0x1c>
 800c35a:	6023      	str	r3, [r4, #0]
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
 800c35e:	bf00      	nop
 800c360:	200003d0 	.word	0x200003d0

0800c364 <_getpid_r>:
 800c364:	f7f5 bb3e 	b.w	80019e4 <_getpid>

0800c368 <__sread>:
 800c368:	b510      	push	{r4, lr}
 800c36a:	460c      	mov	r4, r1
 800c36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c370:	f000 f894 	bl	800c49c <_read_r>
 800c374:	2800      	cmp	r0, #0
 800c376:	bfab      	itete	ge
 800c378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c37a:	89a3      	ldrhlt	r3, [r4, #12]
 800c37c:	181b      	addge	r3, r3, r0
 800c37e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c382:	bfac      	ite	ge
 800c384:	6563      	strge	r3, [r4, #84]	; 0x54
 800c386:	81a3      	strhlt	r3, [r4, #12]
 800c388:	bd10      	pop	{r4, pc}

0800c38a <__swrite>:
 800c38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38e:	461f      	mov	r7, r3
 800c390:	898b      	ldrh	r3, [r1, #12]
 800c392:	05db      	lsls	r3, r3, #23
 800c394:	4605      	mov	r5, r0
 800c396:	460c      	mov	r4, r1
 800c398:	4616      	mov	r6, r2
 800c39a:	d505      	bpl.n	800c3a8 <__swrite+0x1e>
 800c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f000 f868 	bl	800c478 <_lseek_r>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	4632      	mov	r2, r6
 800c3b6:	463b      	mov	r3, r7
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	f000 b817 	b.w	800c3f0 <_write_r>

0800c3c2 <__sseek>:
 800c3c2:	b510      	push	{r4, lr}
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ca:	f000 f855 	bl	800c478 <_lseek_r>
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	bf15      	itete	ne
 800c3d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3de:	81a3      	strheq	r3, [r4, #12]
 800c3e0:	bf18      	it	ne
 800c3e2:	81a3      	strhne	r3, [r4, #12]
 800c3e4:	bd10      	pop	{r4, pc}

0800c3e6 <__sclose>:
 800c3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ea:	f000 b813 	b.w	800c414 <_close_r>
	...

0800c3f0 <_write_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d07      	ldr	r5, [pc, #28]	; (800c410 <_write_r+0x20>)
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f7f5 fb2f 	bl	8001a62 <_write>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_write_r+0x1e>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_write_r+0x1e>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	200003d0 	.word	0x200003d0

0800c414 <_close_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d06      	ldr	r5, [pc, #24]	; (800c430 <_close_r+0x1c>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	602b      	str	r3, [r5, #0]
 800c420:	f7f5 fb3b 	bl	8001a9a <_close>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d102      	bne.n	800c42e <_close_r+0x1a>
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	b103      	cbz	r3, 800c42e <_close_r+0x1a>
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	200003d0 	.word	0x200003d0

0800c434 <_fstat_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d07      	ldr	r5, [pc, #28]	; (800c454 <_fstat_r+0x20>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	4611      	mov	r1, r2
 800c440:	602b      	str	r3, [r5, #0]
 800c442:	f7f5 fb36 	bl	8001ab2 <_fstat>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	d102      	bne.n	800c450 <_fstat_r+0x1c>
 800c44a:	682b      	ldr	r3, [r5, #0]
 800c44c:	b103      	cbz	r3, 800c450 <_fstat_r+0x1c>
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	bd38      	pop	{r3, r4, r5, pc}
 800c452:	bf00      	nop
 800c454:	200003d0 	.word	0x200003d0

0800c458 <_isatty_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d06      	ldr	r5, [pc, #24]	; (800c474 <_isatty_r+0x1c>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	602b      	str	r3, [r5, #0]
 800c464:	f7f5 fb35 	bl	8001ad2 <_isatty>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_isatty_r+0x1a>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_isatty_r+0x1a>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	200003d0 	.word	0x200003d0

0800c478 <_lseek_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4d07      	ldr	r5, [pc, #28]	; (800c498 <_lseek_r+0x20>)
 800c47c:	4604      	mov	r4, r0
 800c47e:	4608      	mov	r0, r1
 800c480:	4611      	mov	r1, r2
 800c482:	2200      	movs	r2, #0
 800c484:	602a      	str	r2, [r5, #0]
 800c486:	461a      	mov	r2, r3
 800c488:	f7f5 fb2e 	bl	8001ae8 <_lseek>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_lseek_r+0x1e>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_lseek_r+0x1e>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	200003d0 	.word	0x200003d0

0800c49c <_read_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	; (800c4bc <_read_r+0x20>)
 800c4a0:	4604      	mov	r4, r0
 800c4a2:	4608      	mov	r0, r1
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	602a      	str	r2, [r5, #0]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f7f5 fabc 	bl	8001a28 <_read>
 800c4b0:	1c43      	adds	r3, r0, #1
 800c4b2:	d102      	bne.n	800c4ba <_read_r+0x1e>
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	b103      	cbz	r3, 800c4ba <_read_r+0x1e>
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	200003d0 	.word	0x200003d0

0800c4c0 <pow>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	ed2d 8b02 	vpush	{d8}
 800c4c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c4ca:	eef0 8a60 	vmov.f32	s17, s1
 800c4ce:	ec55 4b11 	vmov	r4, r5, d1
 800c4d2:	f000 f865 	bl	800c5a0 <__ieee754_pow>
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	462b      	mov	r3, r5
 800c4da:	4620      	mov	r0, r4
 800c4dc:	4629      	mov	r1, r5
 800c4de:	ec57 6b10 	vmov	r6, r7, d0
 800c4e2:	f7f4 fb3b 	bl	8000b5c <__aeabi_dcmpun>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d13b      	bne.n	800c562 <pow+0xa2>
 800c4ea:	ec51 0b18 	vmov	r0, r1, d8
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f7f4 fb01 	bl	8000af8 <__aeabi_dcmpeq>
 800c4f6:	b1b8      	cbz	r0, 800c528 <pow+0x68>
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	f7f4 fafa 	bl	8000af8 <__aeabi_dcmpeq>
 800c504:	2800      	cmp	r0, #0
 800c506:	d146      	bne.n	800c596 <pow+0xd6>
 800c508:	ec45 4b10 	vmov	d0, r4, r5
 800c50c:	f000 fe61 	bl	800d1d2 <finite>
 800c510:	b338      	cbz	r0, 800c562 <pow+0xa2>
 800c512:	2200      	movs	r2, #0
 800c514:	2300      	movs	r3, #0
 800c516:	4620      	mov	r0, r4
 800c518:	4629      	mov	r1, r5
 800c51a:	f7f4 faf7 	bl	8000b0c <__aeabi_dcmplt>
 800c51e:	b300      	cbz	r0, 800c562 <pow+0xa2>
 800c520:	f7fb fb2c 	bl	8007b7c <__errno>
 800c524:	2322      	movs	r3, #34	; 0x22
 800c526:	e01b      	b.n	800c560 <pow+0xa0>
 800c528:	ec47 6b10 	vmov	d0, r6, r7
 800c52c:	f000 fe51 	bl	800d1d2 <finite>
 800c530:	b9e0      	cbnz	r0, 800c56c <pow+0xac>
 800c532:	eeb0 0a48 	vmov.f32	s0, s16
 800c536:	eef0 0a68 	vmov.f32	s1, s17
 800c53a:	f000 fe4a 	bl	800d1d2 <finite>
 800c53e:	b1a8      	cbz	r0, 800c56c <pow+0xac>
 800c540:	ec45 4b10 	vmov	d0, r4, r5
 800c544:	f000 fe45 	bl	800d1d2 <finite>
 800c548:	b180      	cbz	r0, 800c56c <pow+0xac>
 800c54a:	4632      	mov	r2, r6
 800c54c:	463b      	mov	r3, r7
 800c54e:	4630      	mov	r0, r6
 800c550:	4639      	mov	r1, r7
 800c552:	f7f4 fb03 	bl	8000b5c <__aeabi_dcmpun>
 800c556:	2800      	cmp	r0, #0
 800c558:	d0e2      	beq.n	800c520 <pow+0x60>
 800c55a:	f7fb fb0f 	bl	8007b7c <__errno>
 800c55e:	2321      	movs	r3, #33	; 0x21
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	ecbd 8b02 	vpop	{d8}
 800c566:	ec47 6b10 	vmov	d0, r6, r7
 800c56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c56c:	2200      	movs	r2, #0
 800c56e:	2300      	movs	r3, #0
 800c570:	4630      	mov	r0, r6
 800c572:	4639      	mov	r1, r7
 800c574:	f7f4 fac0 	bl	8000af8 <__aeabi_dcmpeq>
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0f2      	beq.n	800c562 <pow+0xa2>
 800c57c:	eeb0 0a48 	vmov.f32	s0, s16
 800c580:	eef0 0a68 	vmov.f32	s1, s17
 800c584:	f000 fe25 	bl	800d1d2 <finite>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d0ea      	beq.n	800c562 <pow+0xa2>
 800c58c:	ec45 4b10 	vmov	d0, r4, r5
 800c590:	f000 fe1f 	bl	800d1d2 <finite>
 800c594:	e7c3      	b.n	800c51e <pow+0x5e>
 800c596:	4f01      	ldr	r7, [pc, #4]	; (800c59c <pow+0xdc>)
 800c598:	2600      	movs	r6, #0
 800c59a:	e7e2      	b.n	800c562 <pow+0xa2>
 800c59c:	3ff00000 	.word	0x3ff00000

0800c5a0 <__ieee754_pow>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ed2d 8b06 	vpush	{d8-d10}
 800c5a8:	b089      	sub	sp, #36	; 0x24
 800c5aa:	ed8d 1b00 	vstr	d1, [sp]
 800c5ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5b6:	ea58 0102 	orrs.w	r1, r8, r2
 800c5ba:	ec57 6b10 	vmov	r6, r7, d0
 800c5be:	d115      	bne.n	800c5ec <__ieee754_pow+0x4c>
 800c5c0:	19b3      	adds	r3, r6, r6
 800c5c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5c6:	4152      	adcs	r2, r2
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	4b89      	ldr	r3, [pc, #548]	; (800c7f0 <__ieee754_pow+0x250>)
 800c5cc:	4193      	sbcs	r3, r2
 800c5ce:	f080 84d2 	bcs.w	800cf76 <__ieee754_pow+0x9d6>
 800c5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	4639      	mov	r1, r7
 800c5da:	f7f3 fe6f 	bl	80002bc <__adddf3>
 800c5de:	ec41 0b10 	vmov	d0, r0, r1
 800c5e2:	b009      	add	sp, #36	; 0x24
 800c5e4:	ecbd 8b06 	vpop	{d8-d10}
 800c5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ec:	4b81      	ldr	r3, [pc, #516]	; (800c7f4 <__ieee754_pow+0x254>)
 800c5ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c5f2:	429c      	cmp	r4, r3
 800c5f4:	ee10 aa10 	vmov	sl, s0
 800c5f8:	463d      	mov	r5, r7
 800c5fa:	dc06      	bgt.n	800c60a <__ieee754_pow+0x6a>
 800c5fc:	d101      	bne.n	800c602 <__ieee754_pow+0x62>
 800c5fe:	2e00      	cmp	r6, #0
 800c600:	d1e7      	bne.n	800c5d2 <__ieee754_pow+0x32>
 800c602:	4598      	cmp	r8, r3
 800c604:	dc01      	bgt.n	800c60a <__ieee754_pow+0x6a>
 800c606:	d10f      	bne.n	800c628 <__ieee754_pow+0x88>
 800c608:	b172      	cbz	r2, 800c628 <__ieee754_pow+0x88>
 800c60a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c60e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c612:	ea55 050a 	orrs.w	r5, r5, sl
 800c616:	d1dc      	bne.n	800c5d2 <__ieee754_pow+0x32>
 800c618:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c61c:	18db      	adds	r3, r3, r3
 800c61e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c622:	4152      	adcs	r2, r2
 800c624:	429d      	cmp	r5, r3
 800c626:	e7d0      	b.n	800c5ca <__ieee754_pow+0x2a>
 800c628:	2d00      	cmp	r5, #0
 800c62a:	da3b      	bge.n	800c6a4 <__ieee754_pow+0x104>
 800c62c:	4b72      	ldr	r3, [pc, #456]	; (800c7f8 <__ieee754_pow+0x258>)
 800c62e:	4598      	cmp	r8, r3
 800c630:	dc51      	bgt.n	800c6d6 <__ieee754_pow+0x136>
 800c632:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c636:	4598      	cmp	r8, r3
 800c638:	f340 84ac 	ble.w	800cf94 <__ieee754_pow+0x9f4>
 800c63c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c640:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c644:	2b14      	cmp	r3, #20
 800c646:	dd0f      	ble.n	800c668 <__ieee754_pow+0xc8>
 800c648:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c64c:	fa22 f103 	lsr.w	r1, r2, r3
 800c650:	fa01 f303 	lsl.w	r3, r1, r3
 800c654:	4293      	cmp	r3, r2
 800c656:	f040 849d 	bne.w	800cf94 <__ieee754_pow+0x9f4>
 800c65a:	f001 0101 	and.w	r1, r1, #1
 800c65e:	f1c1 0302 	rsb	r3, r1, #2
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	b182      	cbz	r2, 800c688 <__ieee754_pow+0xe8>
 800c666:	e05f      	b.n	800c728 <__ieee754_pow+0x188>
 800c668:	2a00      	cmp	r2, #0
 800c66a:	d15b      	bne.n	800c724 <__ieee754_pow+0x184>
 800c66c:	f1c3 0314 	rsb	r3, r3, #20
 800c670:	fa48 f103 	asr.w	r1, r8, r3
 800c674:	fa01 f303 	lsl.w	r3, r1, r3
 800c678:	4543      	cmp	r3, r8
 800c67a:	f040 8488 	bne.w	800cf8e <__ieee754_pow+0x9ee>
 800c67e:	f001 0101 	and.w	r1, r1, #1
 800c682:	f1c1 0302 	rsb	r3, r1, #2
 800c686:	9304      	str	r3, [sp, #16]
 800c688:	4b5c      	ldr	r3, [pc, #368]	; (800c7fc <__ieee754_pow+0x25c>)
 800c68a:	4598      	cmp	r8, r3
 800c68c:	d132      	bne.n	800c6f4 <__ieee754_pow+0x154>
 800c68e:	f1b9 0f00 	cmp.w	r9, #0
 800c692:	f280 8478 	bge.w	800cf86 <__ieee754_pow+0x9e6>
 800c696:	4959      	ldr	r1, [pc, #356]	; (800c7fc <__ieee754_pow+0x25c>)
 800c698:	4632      	mov	r2, r6
 800c69a:	463b      	mov	r3, r7
 800c69c:	2000      	movs	r0, #0
 800c69e:	f7f4 f8ed 	bl	800087c <__aeabi_ddiv>
 800c6a2:	e79c      	b.n	800c5de <__ieee754_pow+0x3e>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d13d      	bne.n	800c728 <__ieee754_pow+0x188>
 800c6ac:	4b51      	ldr	r3, [pc, #324]	; (800c7f4 <__ieee754_pow+0x254>)
 800c6ae:	4598      	cmp	r8, r3
 800c6b0:	d1ea      	bne.n	800c688 <__ieee754_pow+0xe8>
 800c6b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6ba:	ea53 030a 	orrs.w	r3, r3, sl
 800c6be:	f000 845a 	beq.w	800cf76 <__ieee754_pow+0x9d6>
 800c6c2:	4b4f      	ldr	r3, [pc, #316]	; (800c800 <__ieee754_pow+0x260>)
 800c6c4:	429c      	cmp	r4, r3
 800c6c6:	dd08      	ble.n	800c6da <__ieee754_pow+0x13a>
 800c6c8:	f1b9 0f00 	cmp.w	r9, #0
 800c6cc:	f2c0 8457 	blt.w	800cf7e <__ieee754_pow+0x9de>
 800c6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6d4:	e783      	b.n	800c5de <__ieee754_pow+0x3e>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e7e5      	b.n	800c6a6 <__ieee754_pow+0x106>
 800c6da:	f1b9 0f00 	cmp.w	r9, #0
 800c6de:	f04f 0000 	mov.w	r0, #0
 800c6e2:	f04f 0100 	mov.w	r1, #0
 800c6e6:	f6bf af7a 	bge.w	800c5de <__ieee754_pow+0x3e>
 800c6ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c6f2:	e774      	b.n	800c5de <__ieee754_pow+0x3e>
 800c6f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c6f8:	d106      	bne.n	800c708 <__ieee754_pow+0x168>
 800c6fa:	4632      	mov	r2, r6
 800c6fc:	463b      	mov	r3, r7
 800c6fe:	4630      	mov	r0, r6
 800c700:	4639      	mov	r1, r7
 800c702:	f7f3 ff91 	bl	8000628 <__aeabi_dmul>
 800c706:	e76a      	b.n	800c5de <__ieee754_pow+0x3e>
 800c708:	4b3e      	ldr	r3, [pc, #248]	; (800c804 <__ieee754_pow+0x264>)
 800c70a:	4599      	cmp	r9, r3
 800c70c:	d10c      	bne.n	800c728 <__ieee754_pow+0x188>
 800c70e:	2d00      	cmp	r5, #0
 800c710:	db0a      	blt.n	800c728 <__ieee754_pow+0x188>
 800c712:	ec47 6b10 	vmov	d0, r6, r7
 800c716:	b009      	add	sp, #36	; 0x24
 800c718:	ecbd 8b06 	vpop	{d8-d10}
 800c71c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	f000 bc6c 	b.w	800cffc <__ieee754_sqrt>
 800c724:	2300      	movs	r3, #0
 800c726:	9304      	str	r3, [sp, #16]
 800c728:	ec47 6b10 	vmov	d0, r6, r7
 800c72c:	f000 fd48 	bl	800d1c0 <fabs>
 800c730:	ec51 0b10 	vmov	r0, r1, d0
 800c734:	f1ba 0f00 	cmp.w	sl, #0
 800c738:	d129      	bne.n	800c78e <__ieee754_pow+0x1ee>
 800c73a:	b124      	cbz	r4, 800c746 <__ieee754_pow+0x1a6>
 800c73c:	4b2f      	ldr	r3, [pc, #188]	; (800c7fc <__ieee754_pow+0x25c>)
 800c73e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c742:	429a      	cmp	r2, r3
 800c744:	d123      	bne.n	800c78e <__ieee754_pow+0x1ee>
 800c746:	f1b9 0f00 	cmp.w	r9, #0
 800c74a:	da05      	bge.n	800c758 <__ieee754_pow+0x1b8>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	2000      	movs	r0, #0
 800c752:	492a      	ldr	r1, [pc, #168]	; (800c7fc <__ieee754_pow+0x25c>)
 800c754:	f7f4 f892 	bl	800087c <__aeabi_ddiv>
 800c758:	2d00      	cmp	r5, #0
 800c75a:	f6bf af40 	bge.w	800c5de <__ieee754_pow+0x3e>
 800c75e:	9b04      	ldr	r3, [sp, #16]
 800c760:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c764:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c768:	4323      	orrs	r3, r4
 800c76a:	d108      	bne.n	800c77e <__ieee754_pow+0x1de>
 800c76c:	4602      	mov	r2, r0
 800c76e:	460b      	mov	r3, r1
 800c770:	4610      	mov	r0, r2
 800c772:	4619      	mov	r1, r3
 800c774:	f7f3 fda0 	bl	80002b8 <__aeabi_dsub>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	e78f      	b.n	800c69e <__ieee754_pow+0xfe>
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	2b01      	cmp	r3, #1
 800c782:	f47f af2c 	bne.w	800c5de <__ieee754_pow+0x3e>
 800c786:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c78a:	4619      	mov	r1, r3
 800c78c:	e727      	b.n	800c5de <__ieee754_pow+0x3e>
 800c78e:	0feb      	lsrs	r3, r5, #31
 800c790:	3b01      	subs	r3, #1
 800c792:	9306      	str	r3, [sp, #24]
 800c794:	9a06      	ldr	r2, [sp, #24]
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	4313      	orrs	r3, r2
 800c79a:	d102      	bne.n	800c7a2 <__ieee754_pow+0x202>
 800c79c:	4632      	mov	r2, r6
 800c79e:	463b      	mov	r3, r7
 800c7a0:	e7e6      	b.n	800c770 <__ieee754_pow+0x1d0>
 800c7a2:	4b19      	ldr	r3, [pc, #100]	; (800c808 <__ieee754_pow+0x268>)
 800c7a4:	4598      	cmp	r8, r3
 800c7a6:	f340 80fb 	ble.w	800c9a0 <__ieee754_pow+0x400>
 800c7aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7ae:	4598      	cmp	r8, r3
 800c7b0:	4b13      	ldr	r3, [pc, #76]	; (800c800 <__ieee754_pow+0x260>)
 800c7b2:	dd0c      	ble.n	800c7ce <__ieee754_pow+0x22e>
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	dc0f      	bgt.n	800c7d8 <__ieee754_pow+0x238>
 800c7b8:	f1b9 0f00 	cmp.w	r9, #0
 800c7bc:	da0f      	bge.n	800c7de <__ieee754_pow+0x23e>
 800c7be:	2000      	movs	r0, #0
 800c7c0:	b009      	add	sp, #36	; 0x24
 800c7c2:	ecbd 8b06 	vpop	{d8-d10}
 800c7c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	f000 bcf0 	b.w	800d1ae <__math_oflow>
 800c7ce:	429c      	cmp	r4, r3
 800c7d0:	dbf2      	blt.n	800c7b8 <__ieee754_pow+0x218>
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <__ieee754_pow+0x25c>)
 800c7d4:	429c      	cmp	r4, r3
 800c7d6:	dd19      	ble.n	800c80c <__ieee754_pow+0x26c>
 800c7d8:	f1b9 0f00 	cmp.w	r9, #0
 800c7dc:	dcef      	bgt.n	800c7be <__ieee754_pow+0x21e>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	b009      	add	sp, #36	; 0x24
 800c7e2:	ecbd 8b06 	vpop	{d8-d10}
 800c7e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ea:	f000 bcd7 	b.w	800d19c <__math_uflow>
 800c7ee:	bf00      	nop
 800c7f0:	fff00000 	.word	0xfff00000
 800c7f4:	7ff00000 	.word	0x7ff00000
 800c7f8:	433fffff 	.word	0x433fffff
 800c7fc:	3ff00000 	.word	0x3ff00000
 800c800:	3fefffff 	.word	0x3fefffff
 800c804:	3fe00000 	.word	0x3fe00000
 800c808:	41e00000 	.word	0x41e00000
 800c80c:	4b60      	ldr	r3, [pc, #384]	; (800c990 <__ieee754_pow+0x3f0>)
 800c80e:	2200      	movs	r2, #0
 800c810:	f7f3 fd52 	bl	80002b8 <__aeabi_dsub>
 800c814:	a354      	add	r3, pc, #336	; (adr r3, 800c968 <__ieee754_pow+0x3c8>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	4604      	mov	r4, r0
 800c81c:	460d      	mov	r5, r1
 800c81e:	f7f3 ff03 	bl	8000628 <__aeabi_dmul>
 800c822:	a353      	add	r3, pc, #332	; (adr r3, 800c970 <__ieee754_pow+0x3d0>)
 800c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c828:	4606      	mov	r6, r0
 800c82a:	460f      	mov	r7, r1
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fefa 	bl	8000628 <__aeabi_dmul>
 800c834:	4b57      	ldr	r3, [pc, #348]	; (800c994 <__ieee754_pow+0x3f4>)
 800c836:	4682      	mov	sl, r0
 800c838:	468b      	mov	fp, r1
 800c83a:	2200      	movs	r2, #0
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 fef2 	bl	8000628 <__aeabi_dmul>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	a14b      	add	r1, pc, #300	; (adr r1, 800c978 <__ieee754_pow+0x3d8>)
 800c84a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c84e:	f7f3 fd33 	bl	80002b8 <__aeabi_dsub>
 800c852:	4622      	mov	r2, r4
 800c854:	462b      	mov	r3, r5
 800c856:	f7f3 fee7 	bl	8000628 <__aeabi_dmul>
 800c85a:	4602      	mov	r2, r0
 800c85c:	460b      	mov	r3, r1
 800c85e:	2000      	movs	r0, #0
 800c860:	494d      	ldr	r1, [pc, #308]	; (800c998 <__ieee754_pow+0x3f8>)
 800c862:	f7f3 fd29 	bl	80002b8 <__aeabi_dsub>
 800c866:	4622      	mov	r2, r4
 800c868:	4680      	mov	r8, r0
 800c86a:	4689      	mov	r9, r1
 800c86c:	462b      	mov	r3, r5
 800c86e:	4620      	mov	r0, r4
 800c870:	4629      	mov	r1, r5
 800c872:	f7f3 fed9 	bl	8000628 <__aeabi_dmul>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	4640      	mov	r0, r8
 800c87c:	4649      	mov	r1, r9
 800c87e:	f7f3 fed3 	bl	8000628 <__aeabi_dmul>
 800c882:	a33f      	add	r3, pc, #252	; (adr r3, 800c980 <__ieee754_pow+0x3e0>)
 800c884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c888:	f7f3 fece 	bl	8000628 <__aeabi_dmul>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4650      	mov	r0, sl
 800c892:	4659      	mov	r1, fp
 800c894:	f7f3 fd10 	bl	80002b8 <__aeabi_dsub>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4680      	mov	r8, r0
 800c89e:	4689      	mov	r9, r1
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	4639      	mov	r1, r7
 800c8a4:	f7f3 fd0a 	bl	80002bc <__adddf3>
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	4632      	mov	r2, r6
 800c8ac:	463b      	mov	r3, r7
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	460d      	mov	r5, r1
 800c8b2:	f7f3 fd01 	bl	80002b8 <__aeabi_dsub>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4640      	mov	r0, r8
 800c8bc:	4649      	mov	r1, r9
 800c8be:	f7f3 fcfb 	bl	80002b8 <__aeabi_dsub>
 800c8c2:	9b04      	ldr	r3, [sp, #16]
 800c8c4:	9a06      	ldr	r2, [sp, #24]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	468b      	mov	fp, r1
 800c8ce:	f040 81e7 	bne.w	800cca0 <__ieee754_pow+0x700>
 800c8d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c988 <__ieee754_pow+0x3e8>
 800c8d6:	eeb0 8a47 	vmov.f32	s16, s14
 800c8da:	eef0 8a67 	vmov.f32	s17, s15
 800c8de:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8e2:	2600      	movs	r6, #0
 800c8e4:	4632      	mov	r2, r6
 800c8e6:	463b      	mov	r3, r7
 800c8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ec:	f7f3 fce4 	bl	80002b8 <__aeabi_dsub>
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	462b      	mov	r3, r5
 800c8f4:	f7f3 fe98 	bl	8000628 <__aeabi_dmul>
 800c8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8fc:	4680      	mov	r8, r0
 800c8fe:	4689      	mov	r9, r1
 800c900:	4650      	mov	r0, sl
 800c902:	4659      	mov	r1, fp
 800c904:	f7f3 fe90 	bl	8000628 <__aeabi_dmul>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4640      	mov	r0, r8
 800c90e:	4649      	mov	r1, r9
 800c910:	f7f3 fcd4 	bl	80002bc <__adddf3>
 800c914:	4632      	mov	r2, r6
 800c916:	463b      	mov	r3, r7
 800c918:	4680      	mov	r8, r0
 800c91a:	4689      	mov	r9, r1
 800c91c:	4620      	mov	r0, r4
 800c91e:	4629      	mov	r1, r5
 800c920:	f7f3 fe82 	bl	8000628 <__aeabi_dmul>
 800c924:	460b      	mov	r3, r1
 800c926:	4604      	mov	r4, r0
 800c928:	460d      	mov	r5, r1
 800c92a:	4602      	mov	r2, r0
 800c92c:	4649      	mov	r1, r9
 800c92e:	4640      	mov	r0, r8
 800c930:	f7f3 fcc4 	bl	80002bc <__adddf3>
 800c934:	4b19      	ldr	r3, [pc, #100]	; (800c99c <__ieee754_pow+0x3fc>)
 800c936:	4299      	cmp	r1, r3
 800c938:	ec45 4b19 	vmov	d9, r4, r5
 800c93c:	4606      	mov	r6, r0
 800c93e:	460f      	mov	r7, r1
 800c940:	468b      	mov	fp, r1
 800c942:	f340 82f1 	ble.w	800cf28 <__ieee754_pow+0x988>
 800c946:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c94a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c94e:	4303      	orrs	r3, r0
 800c950:	f000 81e4 	beq.w	800cd1c <__ieee754_pow+0x77c>
 800c954:	ec51 0b18 	vmov	r0, r1, d8
 800c958:	2200      	movs	r2, #0
 800c95a:	2300      	movs	r3, #0
 800c95c:	f7f4 f8d6 	bl	8000b0c <__aeabi_dcmplt>
 800c960:	3800      	subs	r0, #0
 800c962:	bf18      	it	ne
 800c964:	2001      	movne	r0, #1
 800c966:	e72b      	b.n	800c7c0 <__ieee754_pow+0x220>
 800c968:	60000000 	.word	0x60000000
 800c96c:	3ff71547 	.word	0x3ff71547
 800c970:	f85ddf44 	.word	0xf85ddf44
 800c974:	3e54ae0b 	.word	0x3e54ae0b
 800c978:	55555555 	.word	0x55555555
 800c97c:	3fd55555 	.word	0x3fd55555
 800c980:	652b82fe 	.word	0x652b82fe
 800c984:	3ff71547 	.word	0x3ff71547
 800c988:	00000000 	.word	0x00000000
 800c98c:	bff00000 	.word	0xbff00000
 800c990:	3ff00000 	.word	0x3ff00000
 800c994:	3fd00000 	.word	0x3fd00000
 800c998:	3fe00000 	.word	0x3fe00000
 800c99c:	408fffff 	.word	0x408fffff
 800c9a0:	4bd5      	ldr	r3, [pc, #852]	; (800ccf8 <__ieee754_pow+0x758>)
 800c9a2:	402b      	ands	r3, r5
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	b92b      	cbnz	r3, 800c9b4 <__ieee754_pow+0x414>
 800c9a8:	4bd4      	ldr	r3, [pc, #848]	; (800ccfc <__ieee754_pow+0x75c>)
 800c9aa:	f7f3 fe3d 	bl	8000628 <__aeabi_dmul>
 800c9ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	1523      	asrs	r3, r4, #20
 800c9b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9ba:	4413      	add	r3, r2
 800c9bc:	9305      	str	r3, [sp, #20]
 800c9be:	4bd0      	ldr	r3, [pc, #832]	; (800cd00 <__ieee754_pow+0x760>)
 800c9c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c9c8:	429c      	cmp	r4, r3
 800c9ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9ce:	dd08      	ble.n	800c9e2 <__ieee754_pow+0x442>
 800c9d0:	4bcc      	ldr	r3, [pc, #816]	; (800cd04 <__ieee754_pow+0x764>)
 800c9d2:	429c      	cmp	r4, r3
 800c9d4:	f340 8162 	ble.w	800cc9c <__ieee754_pow+0x6fc>
 800c9d8:	9b05      	ldr	r3, [sp, #20]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	9305      	str	r3, [sp, #20]
 800c9de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9e2:	2400      	movs	r4, #0
 800c9e4:	00e3      	lsls	r3, r4, #3
 800c9e6:	9307      	str	r3, [sp, #28]
 800c9e8:	4bc7      	ldr	r3, [pc, #796]	; (800cd08 <__ieee754_pow+0x768>)
 800c9ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9ee:	ed93 7b00 	vldr	d7, [r3]
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	ec53 2b17 	vmov	r2, r3, d7
 800c9f8:	eeb0 9a47 	vmov.f32	s18, s14
 800c9fc:	eef0 9a67 	vmov.f32	s19, s15
 800ca00:	4682      	mov	sl, r0
 800ca02:	f7f3 fc59 	bl	80002b8 <__aeabi_dsub>
 800ca06:	4652      	mov	r2, sl
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	ec51 0b19 	vmov	r0, r1, d9
 800ca12:	f7f3 fc53 	bl	80002bc <__adddf3>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	49bb      	ldr	r1, [pc, #748]	; (800cd0c <__ieee754_pow+0x76c>)
 800ca1e:	f7f3 ff2d 	bl	800087c <__aeabi_ddiv>
 800ca22:	ec41 0b1a 	vmov	d10, r0, r1
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	4639      	mov	r1, r7
 800ca2e:	f7f3 fdfb 	bl	8000628 <__aeabi_dmul>
 800ca32:	2300      	movs	r3, #0
 800ca34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca38:	9302      	str	r3, [sp, #8]
 800ca3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca3e:	46ab      	mov	fp, r5
 800ca40:	106d      	asrs	r5, r5, #1
 800ca42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca4a:	ec41 0b18 	vmov	d8, r0, r1
 800ca4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca52:	2200      	movs	r2, #0
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	4614      	mov	r4, r2
 800ca5a:	461d      	mov	r5, r3
 800ca5c:	f7f3 fde4 	bl	8000628 <__aeabi_dmul>
 800ca60:	4602      	mov	r2, r0
 800ca62:	460b      	mov	r3, r1
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f3 fc26 	bl	80002b8 <__aeabi_dsub>
 800ca6c:	ec53 2b19 	vmov	r2, r3, d9
 800ca70:	4606      	mov	r6, r0
 800ca72:	460f      	mov	r7, r1
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f3 fc1e 	bl	80002b8 <__aeabi_dsub>
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	4650      	mov	r0, sl
 800ca82:	4659      	mov	r1, fp
 800ca84:	f7f3 fc18 	bl	80002b8 <__aeabi_dsub>
 800ca88:	4642      	mov	r2, r8
 800ca8a:	464b      	mov	r3, r9
 800ca8c:	f7f3 fdcc 	bl	8000628 <__aeabi_dmul>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f3 fc0e 	bl	80002b8 <__aeabi_dsub>
 800ca9c:	ec53 2b1a 	vmov	r2, r3, d10
 800caa0:	f7f3 fdc2 	bl	8000628 <__aeabi_dmul>
 800caa4:	ec53 2b18 	vmov	r2, r3, d8
 800caa8:	ec41 0b19 	vmov	d9, r0, r1
 800caac:	ec51 0b18 	vmov	r0, r1, d8
 800cab0:	f7f3 fdba 	bl	8000628 <__aeabi_dmul>
 800cab4:	a37c      	add	r3, pc, #496	; (adr r3, 800cca8 <__ieee754_pow+0x708>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	4604      	mov	r4, r0
 800cabc:	460d      	mov	r5, r1
 800cabe:	f7f3 fdb3 	bl	8000628 <__aeabi_dmul>
 800cac2:	a37b      	add	r3, pc, #492	; (adr r3, 800ccb0 <__ieee754_pow+0x710>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fbf8 	bl	80002bc <__adddf3>
 800cacc:	4622      	mov	r2, r4
 800cace:	462b      	mov	r3, r5
 800cad0:	f7f3 fdaa 	bl	8000628 <__aeabi_dmul>
 800cad4:	a378      	add	r3, pc, #480	; (adr r3, 800ccb8 <__ieee754_pow+0x718>)
 800cad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cada:	f7f3 fbef 	bl	80002bc <__adddf3>
 800cade:	4622      	mov	r2, r4
 800cae0:	462b      	mov	r3, r5
 800cae2:	f7f3 fda1 	bl	8000628 <__aeabi_dmul>
 800cae6:	a376      	add	r3, pc, #472	; (adr r3, 800ccc0 <__ieee754_pow+0x720>)
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	f7f3 fbe6 	bl	80002bc <__adddf3>
 800caf0:	4622      	mov	r2, r4
 800caf2:	462b      	mov	r3, r5
 800caf4:	f7f3 fd98 	bl	8000628 <__aeabi_dmul>
 800caf8:	a373      	add	r3, pc, #460	; (adr r3, 800ccc8 <__ieee754_pow+0x728>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fbdd 	bl	80002bc <__adddf3>
 800cb02:	4622      	mov	r2, r4
 800cb04:	462b      	mov	r3, r5
 800cb06:	f7f3 fd8f 	bl	8000628 <__aeabi_dmul>
 800cb0a:	a371      	add	r3, pc, #452	; (adr r3, 800ccd0 <__ieee754_pow+0x730>)
 800cb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb10:	f7f3 fbd4 	bl	80002bc <__adddf3>
 800cb14:	4622      	mov	r2, r4
 800cb16:	4606      	mov	r6, r0
 800cb18:	460f      	mov	r7, r1
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	4629      	mov	r1, r5
 800cb20:	f7f3 fd82 	bl	8000628 <__aeabi_dmul>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4630      	mov	r0, r6
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	f7f3 fd7c 	bl	8000628 <__aeabi_dmul>
 800cb30:	4642      	mov	r2, r8
 800cb32:	4604      	mov	r4, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	464b      	mov	r3, r9
 800cb38:	ec51 0b18 	vmov	r0, r1, d8
 800cb3c:	f7f3 fbbe 	bl	80002bc <__adddf3>
 800cb40:	ec53 2b19 	vmov	r2, r3, d9
 800cb44:	f7f3 fd70 	bl	8000628 <__aeabi_dmul>
 800cb48:	4622      	mov	r2, r4
 800cb4a:	462b      	mov	r3, r5
 800cb4c:	f7f3 fbb6 	bl	80002bc <__adddf3>
 800cb50:	4642      	mov	r2, r8
 800cb52:	4682      	mov	sl, r0
 800cb54:	468b      	mov	fp, r1
 800cb56:	464b      	mov	r3, r9
 800cb58:	4640      	mov	r0, r8
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	f7f3 fd64 	bl	8000628 <__aeabi_dmul>
 800cb60:	4b6b      	ldr	r3, [pc, #428]	; (800cd10 <__ieee754_pow+0x770>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	4606      	mov	r6, r0
 800cb66:	460f      	mov	r7, r1
 800cb68:	f7f3 fba8 	bl	80002bc <__adddf3>
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	465b      	mov	r3, fp
 800cb70:	f7f3 fba4 	bl	80002bc <__adddf3>
 800cb74:	2000      	movs	r0, #0
 800cb76:	4604      	mov	r4, r0
 800cb78:	460d      	mov	r5, r1
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4640      	mov	r0, r8
 800cb80:	4649      	mov	r1, r9
 800cb82:	f7f3 fd51 	bl	8000628 <__aeabi_dmul>
 800cb86:	4b62      	ldr	r3, [pc, #392]	; (800cd10 <__ieee754_pow+0x770>)
 800cb88:	4680      	mov	r8, r0
 800cb8a:	4689      	mov	r9, r1
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	4620      	mov	r0, r4
 800cb90:	4629      	mov	r1, r5
 800cb92:	f7f3 fb91 	bl	80002b8 <__aeabi_dsub>
 800cb96:	4632      	mov	r2, r6
 800cb98:	463b      	mov	r3, r7
 800cb9a:	f7f3 fb8d 	bl	80002b8 <__aeabi_dsub>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	460b      	mov	r3, r1
 800cba2:	4650      	mov	r0, sl
 800cba4:	4659      	mov	r1, fp
 800cba6:	f7f3 fb87 	bl	80002b8 <__aeabi_dsub>
 800cbaa:	ec53 2b18 	vmov	r2, r3, d8
 800cbae:	f7f3 fd3b 	bl	8000628 <__aeabi_dmul>
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	462b      	mov	r3, r5
 800cbba:	ec51 0b19 	vmov	r0, r1, d9
 800cbbe:	f7f3 fd33 	bl	8000628 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fb77 	bl	80002bc <__adddf3>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	f7f3 fb6f 	bl	80002bc <__adddf3>
 800cbde:	a33e      	add	r3, pc, #248	; (adr r3, 800ccd8 <__ieee754_pow+0x738>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	460d      	mov	r5, r1
 800cbea:	f7f3 fd1d 	bl	8000628 <__aeabi_dmul>
 800cbee:	4642      	mov	r2, r8
 800cbf0:	ec41 0b18 	vmov	d8, r0, r1
 800cbf4:	464b      	mov	r3, r9
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7f3 fb5d 	bl	80002b8 <__aeabi_dsub>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fb57 	bl	80002b8 <__aeabi_dsub>
 800cc0a:	a335      	add	r3, pc, #212	; (adr r3, 800cce0 <__ieee754_pow+0x740>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	f7f3 fd0a 	bl	8000628 <__aeabi_dmul>
 800cc14:	a334      	add	r3, pc, #208	; (adr r3, 800cce8 <__ieee754_pow+0x748>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4629      	mov	r1, r5
 800cc22:	f7f3 fd01 	bl	8000628 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	f7f3 fb45 	bl	80002bc <__adddf3>
 800cc32:	9a07      	ldr	r2, [sp, #28]
 800cc34:	4b37      	ldr	r3, [pc, #220]	; (800cd14 <__ieee754_pow+0x774>)
 800cc36:	4413      	add	r3, r2
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fb3e 	bl	80002bc <__adddf3>
 800cc40:	4682      	mov	sl, r0
 800cc42:	9805      	ldr	r0, [sp, #20]
 800cc44:	468b      	mov	fp, r1
 800cc46:	f7f3 fc85 	bl	8000554 <__aeabi_i2d>
 800cc4a:	9a07      	ldr	r2, [sp, #28]
 800cc4c:	4b32      	ldr	r3, [pc, #200]	; (800cd18 <__ieee754_pow+0x778>)
 800cc4e:	4413      	add	r3, r2
 800cc50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	4652      	mov	r2, sl
 800cc5a:	465b      	mov	r3, fp
 800cc5c:	ec51 0b18 	vmov	r0, r1, d8
 800cc60:	f7f3 fb2c 	bl	80002bc <__adddf3>
 800cc64:	4642      	mov	r2, r8
 800cc66:	464b      	mov	r3, r9
 800cc68:	f7f3 fb28 	bl	80002bc <__adddf3>
 800cc6c:	4632      	mov	r2, r6
 800cc6e:	463b      	mov	r3, r7
 800cc70:	f7f3 fb24 	bl	80002bc <__adddf3>
 800cc74:	2000      	movs	r0, #0
 800cc76:	4632      	mov	r2, r6
 800cc78:	463b      	mov	r3, r7
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	f7f3 fb1b 	bl	80002b8 <__aeabi_dsub>
 800cc82:	4642      	mov	r2, r8
 800cc84:	464b      	mov	r3, r9
 800cc86:	f7f3 fb17 	bl	80002b8 <__aeabi_dsub>
 800cc8a:	ec53 2b18 	vmov	r2, r3, d8
 800cc8e:	f7f3 fb13 	bl	80002b8 <__aeabi_dsub>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	4650      	mov	r0, sl
 800cc98:	4659      	mov	r1, fp
 800cc9a:	e610      	b.n	800c8be <__ieee754_pow+0x31e>
 800cc9c:	2401      	movs	r4, #1
 800cc9e:	e6a1      	b.n	800c9e4 <__ieee754_pow+0x444>
 800cca0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ccf0 <__ieee754_pow+0x750>
 800cca4:	e617      	b.n	800c8d6 <__ieee754_pow+0x336>
 800cca6:	bf00      	nop
 800cca8:	4a454eef 	.word	0x4a454eef
 800ccac:	3fca7e28 	.word	0x3fca7e28
 800ccb0:	93c9db65 	.word	0x93c9db65
 800ccb4:	3fcd864a 	.word	0x3fcd864a
 800ccb8:	a91d4101 	.word	0xa91d4101
 800ccbc:	3fd17460 	.word	0x3fd17460
 800ccc0:	518f264d 	.word	0x518f264d
 800ccc4:	3fd55555 	.word	0x3fd55555
 800ccc8:	db6fabff 	.word	0xdb6fabff
 800cccc:	3fdb6db6 	.word	0x3fdb6db6
 800ccd0:	33333303 	.word	0x33333303
 800ccd4:	3fe33333 	.word	0x3fe33333
 800ccd8:	e0000000 	.word	0xe0000000
 800ccdc:	3feec709 	.word	0x3feec709
 800cce0:	dc3a03fd 	.word	0xdc3a03fd
 800cce4:	3feec709 	.word	0x3feec709
 800cce8:	145b01f5 	.word	0x145b01f5
 800ccec:	be3e2fe0 	.word	0xbe3e2fe0
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	3ff00000 	.word	0x3ff00000
 800ccf8:	7ff00000 	.word	0x7ff00000
 800ccfc:	43400000 	.word	0x43400000
 800cd00:	0003988e 	.word	0x0003988e
 800cd04:	000bb679 	.word	0x000bb679
 800cd08:	0800edb8 	.word	0x0800edb8
 800cd0c:	3ff00000 	.word	0x3ff00000
 800cd10:	40080000 	.word	0x40080000
 800cd14:	0800edd8 	.word	0x0800edd8
 800cd18:	0800edc8 	.word	0x0800edc8
 800cd1c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cff4 <__ieee754_pow+0xa54>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	4640      	mov	r0, r8
 800cd24:	4649      	mov	r1, r9
 800cd26:	f7f3 fac9 	bl	80002bc <__adddf3>
 800cd2a:	4622      	mov	r2, r4
 800cd2c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd30:	462b      	mov	r3, r5
 800cd32:	4630      	mov	r0, r6
 800cd34:	4639      	mov	r1, r7
 800cd36:	f7f3 fabf 	bl	80002b8 <__aeabi_dsub>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	ec51 0b1a 	vmov	r0, r1, d10
 800cd42:	f7f3 ff01 	bl	8000b48 <__aeabi_dcmpgt>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f47f ae04 	bne.w	800c954 <__ieee754_pow+0x3b4>
 800cd4c:	4aa4      	ldr	r2, [pc, #656]	; (800cfe0 <__ieee754_pow+0xa40>)
 800cd4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd52:	4293      	cmp	r3, r2
 800cd54:	f340 8108 	ble.w	800cf68 <__ieee754_pow+0x9c8>
 800cd58:	151b      	asrs	r3, r3, #20
 800cd5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd62:	fa4a f303 	asr.w	r3, sl, r3
 800cd66:	445b      	add	r3, fp
 800cd68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cd6c:	4e9d      	ldr	r6, [pc, #628]	; (800cfe4 <__ieee754_pow+0xa44>)
 800cd6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cd72:	4116      	asrs	r6, r2
 800cd74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cd78:	2000      	movs	r0, #0
 800cd7a:	ea23 0106 	bic.w	r1, r3, r6
 800cd7e:	f1c2 0214 	rsb	r2, r2, #20
 800cd82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cd86:	fa4a fa02 	asr.w	sl, sl, r2
 800cd8a:	f1bb 0f00 	cmp.w	fp, #0
 800cd8e:	4602      	mov	r2, r0
 800cd90:	460b      	mov	r3, r1
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	bfb8      	it	lt
 800cd98:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd9c:	f7f3 fa8c 	bl	80002b8 <__aeabi_dsub>
 800cda0:	ec41 0b19 	vmov	d9, r0, r1
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	ec51 0b19 	vmov	r0, r1, d9
 800cdac:	f7f3 fa86 	bl	80002bc <__adddf3>
 800cdb0:	a37b      	add	r3, pc, #492	; (adr r3, 800cfa0 <__ieee754_pow+0xa00>)
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	4604      	mov	r4, r0
 800cdba:	460d      	mov	r5, r1
 800cdbc:	f7f3 fc34 	bl	8000628 <__aeabi_dmul>
 800cdc0:	ec53 2b19 	vmov	r2, r3, d9
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	4620      	mov	r0, r4
 800cdca:	4629      	mov	r1, r5
 800cdcc:	f7f3 fa74 	bl	80002b8 <__aeabi_dsub>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4640      	mov	r0, r8
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	f7f3 fa6e 	bl	80002b8 <__aeabi_dsub>
 800cddc:	a372      	add	r3, pc, #456	; (adr r3, 800cfa8 <__ieee754_pow+0xa08>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	f7f3 fc21 	bl	8000628 <__aeabi_dmul>
 800cde6:	a372      	add	r3, pc, #456	; (adr r3, 800cfb0 <__ieee754_pow+0xa10>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	4680      	mov	r8, r0
 800cdee:	4689      	mov	r9, r1
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7f3 fc18 	bl	8000628 <__aeabi_dmul>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4640      	mov	r0, r8
 800cdfe:	4649      	mov	r1, r9
 800ce00:	f7f3 fa5c 	bl	80002bc <__adddf3>
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	4639      	mov	r1, r7
 800ce10:	f7f3 fa54 	bl	80002bc <__adddf3>
 800ce14:	4632      	mov	r2, r6
 800ce16:	463b      	mov	r3, r7
 800ce18:	4680      	mov	r8, r0
 800ce1a:	4689      	mov	r9, r1
 800ce1c:	f7f3 fa4c 	bl	80002b8 <__aeabi_dsub>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4620      	mov	r0, r4
 800ce26:	4629      	mov	r1, r5
 800ce28:	f7f3 fa46 	bl	80002b8 <__aeabi_dsub>
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	464b      	mov	r3, r9
 800ce34:	4640      	mov	r0, r8
 800ce36:	4649      	mov	r1, r9
 800ce38:	f7f3 fbf6 	bl	8000628 <__aeabi_dmul>
 800ce3c:	a35e      	add	r3, pc, #376	; (adr r3, 800cfb8 <__ieee754_pow+0xa18>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	4604      	mov	r4, r0
 800ce44:	460d      	mov	r5, r1
 800ce46:	f7f3 fbef 	bl	8000628 <__aeabi_dmul>
 800ce4a:	a35d      	add	r3, pc, #372	; (adr r3, 800cfc0 <__ieee754_pow+0xa20>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	f7f3 fa32 	bl	80002b8 <__aeabi_dsub>
 800ce54:	4622      	mov	r2, r4
 800ce56:	462b      	mov	r3, r5
 800ce58:	f7f3 fbe6 	bl	8000628 <__aeabi_dmul>
 800ce5c:	a35a      	add	r3, pc, #360	; (adr r3, 800cfc8 <__ieee754_pow+0xa28>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7f3 fa2b 	bl	80002bc <__adddf3>
 800ce66:	4622      	mov	r2, r4
 800ce68:	462b      	mov	r3, r5
 800ce6a:	f7f3 fbdd 	bl	8000628 <__aeabi_dmul>
 800ce6e:	a358      	add	r3, pc, #352	; (adr r3, 800cfd0 <__ieee754_pow+0xa30>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	f7f3 fa20 	bl	80002b8 <__aeabi_dsub>
 800ce78:	4622      	mov	r2, r4
 800ce7a:	462b      	mov	r3, r5
 800ce7c:	f7f3 fbd4 	bl	8000628 <__aeabi_dmul>
 800ce80:	a355      	add	r3, pc, #340	; (adr r3, 800cfd8 <__ieee754_pow+0xa38>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	f7f3 fa19 	bl	80002bc <__adddf3>
 800ce8a:	4622      	mov	r2, r4
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	f7f3 fbcb 	bl	8000628 <__aeabi_dmul>
 800ce92:	4602      	mov	r2, r0
 800ce94:	460b      	mov	r3, r1
 800ce96:	4640      	mov	r0, r8
 800ce98:	4649      	mov	r1, r9
 800ce9a:	f7f3 fa0d 	bl	80002b8 <__aeabi_dsub>
 800ce9e:	4604      	mov	r4, r0
 800cea0:	460d      	mov	r5, r1
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	4640      	mov	r0, r8
 800cea8:	4649      	mov	r1, r9
 800ceaa:	f7f3 fbbd 	bl	8000628 <__aeabi_dmul>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	ec41 0b19 	vmov	d9, r0, r1
 800ceb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ceb8:	4620      	mov	r0, r4
 800ceba:	4629      	mov	r1, r5
 800cebc:	f7f3 f9fc 	bl	80002b8 <__aeabi_dsub>
 800cec0:	4602      	mov	r2, r0
 800cec2:	460b      	mov	r3, r1
 800cec4:	ec51 0b19 	vmov	r0, r1, d9
 800cec8:	f7f3 fcd8 	bl	800087c <__aeabi_ddiv>
 800cecc:	4632      	mov	r2, r6
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	463b      	mov	r3, r7
 800ced4:	4640      	mov	r0, r8
 800ced6:	4649      	mov	r1, r9
 800ced8:	f7f3 fba6 	bl	8000628 <__aeabi_dmul>
 800cedc:	4632      	mov	r2, r6
 800cede:	463b      	mov	r3, r7
 800cee0:	f7f3 f9ec 	bl	80002bc <__adddf3>
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	4620      	mov	r0, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	f7f3 f9e4 	bl	80002b8 <__aeabi_dsub>
 800cef0:	4642      	mov	r2, r8
 800cef2:	464b      	mov	r3, r9
 800cef4:	f7f3 f9e0 	bl	80002b8 <__aeabi_dsub>
 800cef8:	460b      	mov	r3, r1
 800cefa:	4602      	mov	r2, r0
 800cefc:	493a      	ldr	r1, [pc, #232]	; (800cfe8 <__ieee754_pow+0xa48>)
 800cefe:	2000      	movs	r0, #0
 800cf00:	f7f3 f9da 	bl	80002b8 <__aeabi_dsub>
 800cf04:	ec41 0b10 	vmov	d0, r0, r1
 800cf08:	ee10 3a90 	vmov	r3, s1
 800cf0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf14:	da2b      	bge.n	800cf6e <__ieee754_pow+0x9ce>
 800cf16:	4650      	mov	r0, sl
 800cf18:	f000 f966 	bl	800d1e8 <scalbn>
 800cf1c:	ec51 0b10 	vmov	r0, r1, d0
 800cf20:	ec53 2b18 	vmov	r2, r3, d8
 800cf24:	f7ff bbed 	b.w	800c702 <__ieee754_pow+0x162>
 800cf28:	4b30      	ldr	r3, [pc, #192]	; (800cfec <__ieee754_pow+0xa4c>)
 800cf2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf2e:	429e      	cmp	r6, r3
 800cf30:	f77f af0c 	ble.w	800cd4c <__ieee754_pow+0x7ac>
 800cf34:	4b2e      	ldr	r3, [pc, #184]	; (800cff0 <__ieee754_pow+0xa50>)
 800cf36:	440b      	add	r3, r1
 800cf38:	4303      	orrs	r3, r0
 800cf3a:	d009      	beq.n	800cf50 <__ieee754_pow+0x9b0>
 800cf3c:	ec51 0b18 	vmov	r0, r1, d8
 800cf40:	2200      	movs	r2, #0
 800cf42:	2300      	movs	r3, #0
 800cf44:	f7f3 fde2 	bl	8000b0c <__aeabi_dcmplt>
 800cf48:	3800      	subs	r0, #0
 800cf4a:	bf18      	it	ne
 800cf4c:	2001      	movne	r0, #1
 800cf4e:	e447      	b.n	800c7e0 <__ieee754_pow+0x240>
 800cf50:	4622      	mov	r2, r4
 800cf52:	462b      	mov	r3, r5
 800cf54:	f7f3 f9b0 	bl	80002b8 <__aeabi_dsub>
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	f7f3 fdea 	bl	8000b34 <__aeabi_dcmpge>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f43f aef3 	beq.w	800cd4c <__ieee754_pow+0x7ac>
 800cf66:	e7e9      	b.n	800cf3c <__ieee754_pow+0x99c>
 800cf68:	f04f 0a00 	mov.w	sl, #0
 800cf6c:	e71a      	b.n	800cda4 <__ieee754_pow+0x804>
 800cf6e:	ec51 0b10 	vmov	r0, r1, d0
 800cf72:	4619      	mov	r1, r3
 800cf74:	e7d4      	b.n	800cf20 <__ieee754_pow+0x980>
 800cf76:	491c      	ldr	r1, [pc, #112]	; (800cfe8 <__ieee754_pow+0xa48>)
 800cf78:	2000      	movs	r0, #0
 800cf7a:	f7ff bb30 	b.w	800c5de <__ieee754_pow+0x3e>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	2100      	movs	r1, #0
 800cf82:	f7ff bb2c 	b.w	800c5de <__ieee754_pow+0x3e>
 800cf86:	4630      	mov	r0, r6
 800cf88:	4639      	mov	r1, r7
 800cf8a:	f7ff bb28 	b.w	800c5de <__ieee754_pow+0x3e>
 800cf8e:	9204      	str	r2, [sp, #16]
 800cf90:	f7ff bb7a 	b.w	800c688 <__ieee754_pow+0xe8>
 800cf94:	2300      	movs	r3, #0
 800cf96:	f7ff bb64 	b.w	800c662 <__ieee754_pow+0xc2>
 800cf9a:	bf00      	nop
 800cf9c:	f3af 8000 	nop.w
 800cfa0:	00000000 	.word	0x00000000
 800cfa4:	3fe62e43 	.word	0x3fe62e43
 800cfa8:	fefa39ef 	.word	0xfefa39ef
 800cfac:	3fe62e42 	.word	0x3fe62e42
 800cfb0:	0ca86c39 	.word	0x0ca86c39
 800cfb4:	be205c61 	.word	0xbe205c61
 800cfb8:	72bea4d0 	.word	0x72bea4d0
 800cfbc:	3e663769 	.word	0x3e663769
 800cfc0:	c5d26bf1 	.word	0xc5d26bf1
 800cfc4:	3ebbbd41 	.word	0x3ebbbd41
 800cfc8:	af25de2c 	.word	0xaf25de2c
 800cfcc:	3f11566a 	.word	0x3f11566a
 800cfd0:	16bebd93 	.word	0x16bebd93
 800cfd4:	3f66c16c 	.word	0x3f66c16c
 800cfd8:	5555553e 	.word	0x5555553e
 800cfdc:	3fc55555 	.word	0x3fc55555
 800cfe0:	3fe00000 	.word	0x3fe00000
 800cfe4:	000fffff 	.word	0x000fffff
 800cfe8:	3ff00000 	.word	0x3ff00000
 800cfec:	4090cbff 	.word	0x4090cbff
 800cff0:	3f6f3400 	.word	0x3f6f3400
 800cff4:	652b82fe 	.word	0x652b82fe
 800cff8:	3c971547 	.word	0x3c971547

0800cffc <__ieee754_sqrt>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	ec55 4b10 	vmov	r4, r5, d0
 800d004:	4e55      	ldr	r6, [pc, #340]	; (800d15c <__ieee754_sqrt+0x160>)
 800d006:	43ae      	bics	r6, r5
 800d008:	ee10 0a10 	vmov	r0, s0
 800d00c:	ee10 3a10 	vmov	r3, s0
 800d010:	462a      	mov	r2, r5
 800d012:	4629      	mov	r1, r5
 800d014:	d110      	bne.n	800d038 <__ieee754_sqrt+0x3c>
 800d016:	ee10 2a10 	vmov	r2, s0
 800d01a:	462b      	mov	r3, r5
 800d01c:	f7f3 fb04 	bl	8000628 <__aeabi_dmul>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4620      	mov	r0, r4
 800d026:	4629      	mov	r1, r5
 800d028:	f7f3 f948 	bl	80002bc <__adddf3>
 800d02c:	4604      	mov	r4, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	ec45 4b10 	vmov	d0, r4, r5
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d038:	2d00      	cmp	r5, #0
 800d03a:	dc10      	bgt.n	800d05e <__ieee754_sqrt+0x62>
 800d03c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d040:	4330      	orrs	r0, r6
 800d042:	d0f5      	beq.n	800d030 <__ieee754_sqrt+0x34>
 800d044:	b15d      	cbz	r5, 800d05e <__ieee754_sqrt+0x62>
 800d046:	ee10 2a10 	vmov	r2, s0
 800d04a:	462b      	mov	r3, r5
 800d04c:	ee10 0a10 	vmov	r0, s0
 800d050:	f7f3 f932 	bl	80002b8 <__aeabi_dsub>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	f7f3 fc10 	bl	800087c <__aeabi_ddiv>
 800d05c:	e7e6      	b.n	800d02c <__ieee754_sqrt+0x30>
 800d05e:	1512      	asrs	r2, r2, #20
 800d060:	d074      	beq.n	800d14c <__ieee754_sqrt+0x150>
 800d062:	07d4      	lsls	r4, r2, #31
 800d064:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d068:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d06c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d070:	bf5e      	ittt	pl
 800d072:	0fda      	lsrpl	r2, r3, #31
 800d074:	005b      	lslpl	r3, r3, #1
 800d076:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d07a:	2400      	movs	r4, #0
 800d07c:	0fda      	lsrs	r2, r3, #31
 800d07e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d082:	107f      	asrs	r7, r7, #1
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	2516      	movs	r5, #22
 800d088:	4620      	mov	r0, r4
 800d08a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d08e:	1886      	adds	r6, r0, r2
 800d090:	428e      	cmp	r6, r1
 800d092:	bfde      	ittt	le
 800d094:	1b89      	suble	r1, r1, r6
 800d096:	18b0      	addle	r0, r6, r2
 800d098:	18a4      	addle	r4, r4, r2
 800d09a:	0049      	lsls	r1, r1, #1
 800d09c:	3d01      	subs	r5, #1
 800d09e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d0a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d0a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0aa:	d1f0      	bne.n	800d08e <__ieee754_sqrt+0x92>
 800d0ac:	462a      	mov	r2, r5
 800d0ae:	f04f 0e20 	mov.w	lr, #32
 800d0b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0b6:	4281      	cmp	r1, r0
 800d0b8:	eb06 0c05 	add.w	ip, r6, r5
 800d0bc:	dc02      	bgt.n	800d0c4 <__ieee754_sqrt+0xc8>
 800d0be:	d113      	bne.n	800d0e8 <__ieee754_sqrt+0xec>
 800d0c0:	459c      	cmp	ip, r3
 800d0c2:	d811      	bhi.n	800d0e8 <__ieee754_sqrt+0xec>
 800d0c4:	f1bc 0f00 	cmp.w	ip, #0
 800d0c8:	eb0c 0506 	add.w	r5, ip, r6
 800d0cc:	da43      	bge.n	800d156 <__ieee754_sqrt+0x15a>
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	db41      	blt.n	800d156 <__ieee754_sqrt+0x15a>
 800d0d2:	f100 0801 	add.w	r8, r0, #1
 800d0d6:	1a09      	subs	r1, r1, r0
 800d0d8:	459c      	cmp	ip, r3
 800d0da:	bf88      	it	hi
 800d0dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d0e0:	eba3 030c 	sub.w	r3, r3, ip
 800d0e4:	4432      	add	r2, r6
 800d0e6:	4640      	mov	r0, r8
 800d0e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d0ec:	f1be 0e01 	subs.w	lr, lr, #1
 800d0f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d0f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d0f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0fc:	d1db      	bne.n	800d0b6 <__ieee754_sqrt+0xba>
 800d0fe:	430b      	orrs	r3, r1
 800d100:	d006      	beq.n	800d110 <__ieee754_sqrt+0x114>
 800d102:	1c50      	adds	r0, r2, #1
 800d104:	bf13      	iteet	ne
 800d106:	3201      	addne	r2, #1
 800d108:	3401      	addeq	r4, #1
 800d10a:	4672      	moveq	r2, lr
 800d10c:	f022 0201 	bicne.w	r2, r2, #1
 800d110:	1063      	asrs	r3, r4, #1
 800d112:	0852      	lsrs	r2, r2, #1
 800d114:	07e1      	lsls	r1, r4, #31
 800d116:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d11a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d11e:	bf48      	it	mi
 800d120:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d124:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d128:	4614      	mov	r4, r2
 800d12a:	e781      	b.n	800d030 <__ieee754_sqrt+0x34>
 800d12c:	0ad9      	lsrs	r1, r3, #11
 800d12e:	3815      	subs	r0, #21
 800d130:	055b      	lsls	r3, r3, #21
 800d132:	2900      	cmp	r1, #0
 800d134:	d0fa      	beq.n	800d12c <__ieee754_sqrt+0x130>
 800d136:	02cd      	lsls	r5, r1, #11
 800d138:	d50a      	bpl.n	800d150 <__ieee754_sqrt+0x154>
 800d13a:	f1c2 0420 	rsb	r4, r2, #32
 800d13e:	fa23 f404 	lsr.w	r4, r3, r4
 800d142:	1e55      	subs	r5, r2, #1
 800d144:	4093      	lsls	r3, r2
 800d146:	4321      	orrs	r1, r4
 800d148:	1b42      	subs	r2, r0, r5
 800d14a:	e78a      	b.n	800d062 <__ieee754_sqrt+0x66>
 800d14c:	4610      	mov	r0, r2
 800d14e:	e7f0      	b.n	800d132 <__ieee754_sqrt+0x136>
 800d150:	0049      	lsls	r1, r1, #1
 800d152:	3201      	adds	r2, #1
 800d154:	e7ef      	b.n	800d136 <__ieee754_sqrt+0x13a>
 800d156:	4680      	mov	r8, r0
 800d158:	e7bd      	b.n	800d0d6 <__ieee754_sqrt+0xda>
 800d15a:	bf00      	nop
 800d15c:	7ff00000 	.word	0x7ff00000

0800d160 <with_errno>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	4604      	mov	r4, r0
 800d164:	460d      	mov	r5, r1
 800d166:	4616      	mov	r6, r2
 800d168:	f7fa fd08 	bl	8007b7c <__errno>
 800d16c:	4629      	mov	r1, r5
 800d16e:	6006      	str	r6, [r0, #0]
 800d170:	4620      	mov	r0, r4
 800d172:	bd70      	pop	{r4, r5, r6, pc}

0800d174 <xflow>:
 800d174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d176:	4614      	mov	r4, r2
 800d178:	461d      	mov	r5, r3
 800d17a:	b108      	cbz	r0, 800d180 <xflow+0xc>
 800d17c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d180:	e9cd 2300 	strd	r2, r3, [sp]
 800d184:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d188:	4620      	mov	r0, r4
 800d18a:	4629      	mov	r1, r5
 800d18c:	f7f3 fa4c 	bl	8000628 <__aeabi_dmul>
 800d190:	2222      	movs	r2, #34	; 0x22
 800d192:	b003      	add	sp, #12
 800d194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d198:	f7ff bfe2 	b.w	800d160 <with_errno>

0800d19c <__math_uflow>:
 800d19c:	b508      	push	{r3, lr}
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1a4:	f7ff ffe6 	bl	800d174 <xflow>
 800d1a8:	ec41 0b10 	vmov	d0, r0, r1
 800d1ac:	bd08      	pop	{r3, pc}

0800d1ae <__math_oflow>:
 800d1ae:	b508      	push	{r3, lr}
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d1b6:	f7ff ffdd 	bl	800d174 <xflow>
 800d1ba:	ec41 0b10 	vmov	d0, r0, r1
 800d1be:	bd08      	pop	{r3, pc}

0800d1c0 <fabs>:
 800d1c0:	ec51 0b10 	vmov	r0, r1, d0
 800d1c4:	ee10 2a10 	vmov	r2, s0
 800d1c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d1cc:	ec43 2b10 	vmov	d0, r2, r3
 800d1d0:	4770      	bx	lr

0800d1d2 <finite>:
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	ed8d 0b00 	vstr	d0, [sp]
 800d1d8:	9801      	ldr	r0, [sp, #4]
 800d1da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d1de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d1e2:	0fc0      	lsrs	r0, r0, #31
 800d1e4:	b002      	add	sp, #8
 800d1e6:	4770      	bx	lr

0800d1e8 <scalbn>:
 800d1e8:	b570      	push	{r4, r5, r6, lr}
 800d1ea:	ec55 4b10 	vmov	r4, r5, d0
 800d1ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	462b      	mov	r3, r5
 800d1f6:	b99a      	cbnz	r2, 800d220 <scalbn+0x38>
 800d1f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1fc:	4323      	orrs	r3, r4
 800d1fe:	d036      	beq.n	800d26e <scalbn+0x86>
 800d200:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <scalbn+0x100>)
 800d202:	4629      	mov	r1, r5
 800d204:	ee10 0a10 	vmov	r0, s0
 800d208:	2200      	movs	r2, #0
 800d20a:	f7f3 fa0d 	bl	8000628 <__aeabi_dmul>
 800d20e:	4b37      	ldr	r3, [pc, #220]	; (800d2ec <scalbn+0x104>)
 800d210:	429e      	cmp	r6, r3
 800d212:	4604      	mov	r4, r0
 800d214:	460d      	mov	r5, r1
 800d216:	da10      	bge.n	800d23a <scalbn+0x52>
 800d218:	a32b      	add	r3, pc, #172	; (adr r3, 800d2c8 <scalbn+0xe0>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	e03a      	b.n	800d296 <scalbn+0xae>
 800d220:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d224:	428a      	cmp	r2, r1
 800d226:	d10c      	bne.n	800d242 <scalbn+0x5a>
 800d228:	ee10 2a10 	vmov	r2, s0
 800d22c:	4620      	mov	r0, r4
 800d22e:	4629      	mov	r1, r5
 800d230:	f7f3 f844 	bl	80002bc <__adddf3>
 800d234:	4604      	mov	r4, r0
 800d236:	460d      	mov	r5, r1
 800d238:	e019      	b.n	800d26e <scalbn+0x86>
 800d23a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d23e:	460b      	mov	r3, r1
 800d240:	3a36      	subs	r2, #54	; 0x36
 800d242:	4432      	add	r2, r6
 800d244:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d248:	428a      	cmp	r2, r1
 800d24a:	dd08      	ble.n	800d25e <scalbn+0x76>
 800d24c:	2d00      	cmp	r5, #0
 800d24e:	a120      	add	r1, pc, #128	; (adr r1, 800d2d0 <scalbn+0xe8>)
 800d250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d254:	da1c      	bge.n	800d290 <scalbn+0xa8>
 800d256:	a120      	add	r1, pc, #128	; (adr r1, 800d2d8 <scalbn+0xf0>)
 800d258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d25c:	e018      	b.n	800d290 <scalbn+0xa8>
 800d25e:	2a00      	cmp	r2, #0
 800d260:	dd08      	ble.n	800d274 <scalbn+0x8c>
 800d262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d26e:	ec45 4b10 	vmov	d0, r4, r5
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d278:	da19      	bge.n	800d2ae <scalbn+0xc6>
 800d27a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d27e:	429e      	cmp	r6, r3
 800d280:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d284:	dd0a      	ble.n	800d29c <scalbn+0xb4>
 800d286:	a112      	add	r1, pc, #72	; (adr r1, 800d2d0 <scalbn+0xe8>)
 800d288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e2      	bne.n	800d256 <scalbn+0x6e>
 800d290:	a30f      	add	r3, pc, #60	; (adr r3, 800d2d0 <scalbn+0xe8>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f3 f9c7 	bl	8000628 <__aeabi_dmul>
 800d29a:	e7cb      	b.n	800d234 <scalbn+0x4c>
 800d29c:	a10a      	add	r1, pc, #40	; (adr r1, 800d2c8 <scalbn+0xe0>)
 800d29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0b8      	beq.n	800d218 <scalbn+0x30>
 800d2a6:	a10e      	add	r1, pc, #56	; (adr r1, 800d2e0 <scalbn+0xf8>)
 800d2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ac:	e7b4      	b.n	800d218 <scalbn+0x30>
 800d2ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2b2:	3236      	adds	r2, #54	; 0x36
 800d2b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4b0c      	ldr	r3, [pc, #48]	; (800d2f0 <scalbn+0x108>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	e7e8      	b.n	800d296 <scalbn+0xae>
 800d2c4:	f3af 8000 	nop.w
 800d2c8:	c2f8f359 	.word	0xc2f8f359
 800d2cc:	01a56e1f 	.word	0x01a56e1f
 800d2d0:	8800759c 	.word	0x8800759c
 800d2d4:	7e37e43c 	.word	0x7e37e43c
 800d2d8:	8800759c 	.word	0x8800759c
 800d2dc:	fe37e43c 	.word	0xfe37e43c
 800d2e0:	c2f8f359 	.word	0xc2f8f359
 800d2e4:	81a56e1f 	.word	0x81a56e1f
 800d2e8:	43500000 	.word	0x43500000
 800d2ec:	ffff3cb0 	.word	0xffff3cb0
 800d2f0:	3c900000 	.word	0x3c900000

0800d2f4 <_init>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	bf00      	nop
 800d2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2fa:	bc08      	pop	{r3}
 800d2fc:	469e      	mov	lr, r3
 800d2fe:	4770      	bx	lr

0800d300 <_fini>:
 800d300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d302:	bf00      	nop
 800d304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d306:	bc08      	pop	{r3}
 800d308:	469e      	mov	lr, r3
 800d30a:	4770      	bx	lr
