
Test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007d28  08007d28  00017d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007eb8  08007eb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d38  20000074  08007f34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  08007f34  00021dac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b68d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a22  00000000  00000000  0003b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0003f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  000407e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9a3  00000000  00000000  00041d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8fd  00000000  00000000  0005c6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009787a  00000000  00000000  00078fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011082a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  0011087c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d10 	.word	0x08007d10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007d10 	.word	0x08007d10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fmul>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d06f      	beq.n	8000d60 <__aeabi_fmul+0xf8>
 8000c80:	441a      	add	r2, r3
 8000c82:	ea80 0c01 	eor.w	ip, r0, r1
 8000c86:	0240      	lsls	r0, r0, #9
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8e:	d01e      	beq.n	8000cce <__aeabi_fmul+0x66>
 8000c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca8:	bf3e      	ittt	cc
 8000caa:	0049      	lslcc	r1, r1, #1
 8000cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb0:	005b      	lslcc	r3, r3, #1
 8000cb2:	ea40 0001 	orr.w	r0, r0, r1
 8000cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cba:	2afd      	cmp	r2, #253	; 0xfd
 8000cbc:	d81d      	bhi.n	8000cfa <__aeabi_fmul+0x92>
 8000cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd6:	bf08      	it	eq
 8000cd8:	0249      	lsleq	r1, r1, #9
 8000cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ce2:	3a7f      	subs	r2, #127	; 0x7f
 8000ce4:	bfc2      	ittt	gt
 8000ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cee:	4770      	bxgt	lr
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	dc5d      	bgt.n	8000db8 <__aeabi_fmul+0x150>
 8000cfc:	f112 0f19 	cmn.w	r2, #25
 8000d00:	bfdc      	itt	le
 8000d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d06:	4770      	bxle	lr
 8000d08:	f1c2 0200 	rsb	r2, r2, #0
 8000d0c:	0041      	lsls	r1, r0, #1
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	f1c2 0220 	rsb	r2, r2, #32
 8000d16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1e:	f140 0000 	adc.w	r0, r0, #0
 8000d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d26:	bf08      	it	eq
 8000d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2c:	4770      	bx	lr
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0040      	lsleq	r0, r0, #1
 8000d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3e:	3a01      	subeq	r2, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xce>
 8000d42:	ea40 000c 	orr.w	r0, r0, ip
 8000d46:	f093 0f00 	teq	r3, #0
 8000d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0049      	lsleq	r1, r1, #1
 8000d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d56:	3b01      	subeq	r3, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xe6>
 8000d5a:	ea41 010c 	orr.w	r1, r1, ip
 8000d5e:	e78f      	b.n	8000c80 <__aeabi_fmul+0x18>
 8000d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	bf18      	it	ne
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d00a      	beq.n	8000d86 <__aeabi_fmul+0x11e>
 8000d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d74:	bf18      	it	ne
 8000d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	d1d8      	bne.n	8000d2e <__aeabi_fmul+0xc6>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	bf17      	itett	ne
 8000d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d90:	4608      	moveq	r0, r1
 8000d92:	f091 0f00 	teqne	r1, #0
 8000d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d9a:	d014      	beq.n	8000dc6 <__aeabi_fmul+0x15e>
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d101      	bne.n	8000da6 <__aeabi_fmul+0x13e>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d10f      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000da6:	ea93 0f0c 	teq	r3, ip
 8000daa:	d103      	bne.n	8000db4 <__aeabi_fmul+0x14c>
 8000dac:	024b      	lsls	r3, r1, #9
 8000dae:	bf18      	it	ne
 8000db0:	4608      	movne	r0, r1
 8000db2:	d108      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bx	lr
 8000dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fdiv>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d069      	beq.n	8000ebc <__aeabi_fdiv+0xec>
 8000de8:	eba2 0203 	sub.w	r2, r2, r3
 8000dec:	ea80 0c01 	eor.w	ip, r0, r1
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df6:	d037      	beq.n	8000e68 <__aeabi_fdiv+0x98>
 8000df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf38      	it	cc
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e16:	428b      	cmp	r3, r1
 8000e18:	bf24      	itt	cs
 8000e1a:	1a5b      	subcs	r3, r3, r1
 8000e1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e32:	bf24      	itt	cs
 8000e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e52:	d1e0      	bne.n	8000e16 <__aeabi_fdiv+0x46>
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	f63f af50 	bhi.w	8000cfa <__aeabi_fmul+0x92>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e70:	327f      	adds	r2, #127	; 0x7f
 8000e72:	bfc2      	ittt	gt
 8000e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7c:	4770      	bxgt	lr
 8000e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	3a01      	subs	r2, #1
 8000e88:	e737      	b.n	8000cfa <__aeabi_fmul+0x92>
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xc2>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xda>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e795      	b.n	8000de8 <__aeabi_fdiv+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	d108      	bne.n	8000ed8 <__aeabi_fdiv+0x108>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	f47f af7d 	bne.w	8000dc6 <__aeabi_fmul+0x15e>
 8000ecc:	ea93 0f0c 	teq	r3, ip
 8000ed0:	f47f af70 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e776      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ed8:	ea93 0f0c 	teq	r3, ip
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_fdiv+0x118>
 8000ede:	024b      	lsls	r3, r1, #9
 8000ee0:	f43f af4c 	beq.w	8000d7c <__aeabi_fmul+0x114>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e76e      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1ca      	bne.n	8000e8a <__aeabi_fdiv+0xba>
 8000ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef8:	f47f af5c 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f00:	f47f af3c 	bne.w	8000d7c <__aeabi_fmul+0x114>
 8000f04:	e75f      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000f06:	bf00      	nop

08000f08 <__gesf2>:
 8000f08:	f04f 3cff 	mov.w	ip, #4294967295
 8000f0c:	e006      	b.n	8000f1c <__cmpsf2+0x4>
 8000f0e:	bf00      	nop

08000f10 <__lesf2>:
 8000f10:	f04f 0c01 	mov.w	ip, #1
 8000f14:	e002      	b.n	8000f1c <__cmpsf2+0x4>
 8000f16:	bf00      	nop

08000f18 <__cmpsf2>:
 8000f18:	f04f 0c01 	mov.w	ip, #1
 8000f1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	bf18      	it	ne
 8000f2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f32:	d011      	beq.n	8000f58 <__cmpsf2+0x40>
 8000f34:	b001      	add	sp, #4
 8000f36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f3a:	bf18      	it	ne
 8000f3c:	ea90 0f01 	teqne	r0, r1
 8000f40:	bf58      	it	pl
 8000f42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f46:	bf88      	it	hi
 8000f48:	17c8      	asrhi	r0, r1, #31
 8000f4a:	bf38      	it	cc
 8000f4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f50:	bf18      	it	ne
 8000f52:	f040 0001 	orrne.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f5c:	d102      	bne.n	8000f64 <__cmpsf2+0x4c>
 8000f5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f62:	d105      	bne.n	8000f70 <__cmpsf2+0x58>
 8000f64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f68:	d1e4      	bne.n	8000f34 <__cmpsf2+0x1c>
 8000f6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f6e:	d0e1      	beq.n	8000f34 <__cmpsf2+0x1c>
 8000f70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__aeabi_cfrcmple>:
 8000f78:	4684      	mov	ip, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4661      	mov	r1, ip
 8000f7e:	e7ff      	b.n	8000f80 <__aeabi_cfcmpeq>

08000f80 <__aeabi_cfcmpeq>:
 8000f80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f82:	f7ff ffc9 	bl	8000f18 <__cmpsf2>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	bf48      	it	mi
 8000f8a:	f110 0f00 	cmnmi.w	r0, #0
 8000f8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f90 <__aeabi_fcmpeq>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff fff4 	bl	8000f80 <__aeabi_cfcmpeq>
 8000f98:	bf0c      	ite	eq
 8000f9a:	2001      	moveq	r0, #1
 8000f9c:	2000      	movne	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_fcmplt>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff ffea 	bl	8000f80 <__aeabi_cfcmpeq>
 8000fac:	bf34      	ite	cc
 8000fae:	2001      	movcc	r0, #1
 8000fb0:	2000      	movcs	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_fcmple>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff ffe0 	bl	8000f80 <__aeabi_cfcmpeq>
 8000fc0:	bf94      	ite	ls
 8000fc2:	2001      	movls	r0, #1
 8000fc4:	2000      	movhi	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmpge>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffd2 	bl	8000f78 <__aeabi_cfrcmple>
 8000fd4:	bf94      	ite	ls
 8000fd6:	2001      	movls	r0, #1
 8000fd8:	2000      	movhi	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmpgt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffc8 	bl	8000f78 <__aeabi_cfrcmple>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_f2uiz>:
 8000ff4:	0042      	lsls	r2, r0, #1
 8000ff6:	d20e      	bcs.n	8001016 <__aeabi_f2uiz+0x22>
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30b      	bcc.n	8001016 <__aeabi_f2uiz+0x22>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d409      	bmi.n	800101c <__aeabi_f2uiz+0x28>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	fa23 f002 	lsr.w	r0, r3, r2
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr
 800101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001020:	d101      	bne.n	8001026 <__aeabi_f2uiz+0x32>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	d102      	bne.n	800102c <__aeabi_f2uiz+0x38>
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	4770      	bx	lr
 800102c:	f04f 0000 	mov.w	r0, #0
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Basic_timer */
  Basic_timerHandle = osTimerNew(Timer_Callback, osTimerPeriodic, NULL, &Basic_timer_attributes);
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_FREERTOS_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_FREERTOS_Init+0x40>)
 8001040:	f003 fc54 	bl	80048ec <osTimerNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <MX_FREERTOS_Init+0x44>)
 8001048:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MX_FREERTOS_Init+0x48>)
 800104c:	2100      	movs	r1, #0
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_FREERTOS_Init+0x4c>)
 8001050:	f003 fb5e 	bl	8004710 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_FREERTOS_Init+0x50>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of Sensor */
  SensorHandle = osThreadNew(Sensor_task, NULL, &Sensor_attributes);
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_FREERTOS_Init+0x54>)
 800105c:	2100      	movs	r1, #0
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <MX_FREERTOS_Init+0x58>)
 8001060:	f003 fb56 	bl	8004710 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <MX_FREERTOS_Init+0x5c>)
 8001068:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08007de8 	.word	0x08007de8
 8001074:	08001165 	.word	0x08001165
 8001078:	200000ec 	.word	0x200000ec
 800107c:	08007da0 	.word	0x08007da0
 8001080:	08001095 	.word	0x08001095
 8001084:	200000e4 	.word	0x200000e4
 8001088:	08007dc4 	.word	0x08007dc4
 800108c:	080010b5 	.word	0x080010b5
 8001090:	200000e8 	.word	0x200000e8

08001094 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TxBuffer = "Default_here\r\n";
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <StartDefaultTask+0x18>)
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <StartDefaultTask+0x1c>)
 80010a0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

    osDelay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f003 fbdd 	bl	8004864 <osDelay>
 80010aa:	e7fa      	b.n	80010a2 <StartDefaultTask+0xe>
 80010ac:	20000090 	.word	0x20000090
 80010b0:	08007d48 	.word	0x08007d48

080010b4 <Sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_task */
void Sensor_task(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_task */
	max30102_init();
 80010bc:	f000 f99e 	bl	80013fc <max30102_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *) "oke\r\n", 5, 100);
 80010c0:	2364      	movs	r3, #100	; 0x64
 80010c2:	2205      	movs	r2, #5
 80010c4:	491f      	ldr	r1, [pc, #124]	; (8001144 <Sensor_task+0x90>)
 80010c6:	4820      	ldr	r0, [pc, #128]	; (8001148 <Sensor_task+0x94>)
 80010c8:	f003 f93c 	bl	8004344 <HAL_UART_Transmit>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80010cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d0:	481e      	ldr	r0, [pc, #120]	; (800114c <Sensor_task+0x98>)
 80010d2:	f001 f9bb 	bl	800244c <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d12d      	bne.n	8001138 <Sensor_task+0x84>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e0:	481b      	ldr	r0, [pc, #108]	; (8001150 <Sensor_task+0x9c>)
 80010e2:	f001 f9e2 	bl	80024aa <HAL_GPIO_TogglePin>
			  max30102_cal();
 80010e6:	f000 fbf7 	bl	80018d8 <max30102_cal>
			  uint8_t spo2 = max30102_getSpO2();
 80010ea:	f000 fd6d 	bl	8001bc8 <max30102_getSpO2>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
//			  uint8_t spo2 = max30102_getStatus();
			  uint8_t heartRate = max30102_getHeartRate();
 80010f2:	f000 fd5f 	bl	8001bb4 <max30102_getHeartRate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73bb      	strb	r3, [r7, #14]
+
			  HAL_UART_Transmit(&huart1, "gotheart\r\n", 10, 500 );
 80010fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010fe:	220a      	movs	r2, #10
 8001100:	4914      	ldr	r1, [pc, #80]	; (8001154 <Sensor_task+0xa0>)
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <Sensor_task+0x94>)
 8001104:	f003 f91e 	bl	8004344 <HAL_UART_Transmit>
			  sprintf(str, "bpm %d spo2 %d\r\n", heartRate, spo2); //
 8001108:	7bba      	ldrb	r2, [r7, #14]
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	4912      	ldr	r1, [pc, #72]	; (8001158 <Sensor_task+0xa4>)
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <Sensor_task+0xa8>)
 8001110:	f006 fa38 	bl	8007584 <siprintf>

			  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 500 );
 8001114:	4811      	ldr	r0, [pc, #68]	; (800115c <Sensor_task+0xa8>)
 8001116:	f7ff f81b 	bl	8000150 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001122:	490e      	ldr	r1, [pc, #56]	; (800115c <Sensor_task+0xa8>)
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <Sensor_task+0x94>)
 8001126:	f003 f90d 	bl	8004344 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "done\r\n", 6, 500 );
 800112a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112e:	2206      	movs	r2, #6
 8001130:	490b      	ldr	r1, [pc, #44]	; (8001160 <Sensor_task+0xac>)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <Sensor_task+0x94>)
 8001134:	f003 f906 	bl	8004344 <HAL_UART_Transmit>
	      }
    osDelay(2000);
 8001138:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800113c:	f003 fb92 	bl	8004864 <osDelay>
	  HAL_UART_Transmit(&huart1, (uint8_t *) "oke\r\n", 5, 100);
 8001140:	e7be      	b.n	80010c0 <Sensor_task+0xc>
 8001142:	bf00      	nop
 8001144:	08007d58 	.word	0x08007d58
 8001148:	20000348 	.word	0x20000348
 800114c:	40010c00 	.word	0x40010c00
 8001150:	40011000 	.word	0x40011000
 8001154:	08007d60 	.word	0x08007d60
 8001158:	08007d6c 	.word	0x08007d6c
 800115c:	20000094 	.word	0x20000094
 8001160:	08007d80 	.word	0x08007d80

08001164 <Timer_Callback>:
  /* USER CODE END Sensor_task */
}

/* Timer_Callback function */
void Timer_Callback(void *argument)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_Callback */

  /* USER CODE END Timer_Callback */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
	...

08001178 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0xc0>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <MX_GPIO_Init+0xc0>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <MX_GPIO_Init+0xc0>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a23      	ldr	r2, [pc, #140]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_GPIO_Init+0xc0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f2:	4812      	ldr	r0, [pc, #72]	; (800123c <MX_GPIO_Init+0xc4>)
 80011f4:	f001 f941 	bl	800247a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2302      	movs	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4619      	mov	r1, r3
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <MX_GPIO_Init+0xc4>)
 8001212:	f000 ff97 	bl	8002144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAX_Pin;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MAX_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0xc8>)
 800122c:	f000 ff8a 	bl	8002144 <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000
 800123c:	40011000 	.word	0x40011000
 8001240:	40010c00 	.word	0x40010c00

08001244 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C1_Init+0x50>)
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_I2C1_Init+0x54>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C1_Init+0x50>)
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_I2C1_Init+0x58>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_I2C1_Init+0x50>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C1_Init+0x50>)
 8001282:	f001 f92b 	bl	80024dc <HAL_I2C_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800128c:	f000 f8b0 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000f0 	.word	0x200000f0
 8001298:	40005400 	.word	0x40005400
 800129c:	00061a80 	.word	0x00061a80

080012a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <HAL_I2C_MspInit+0x70>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d123      	bne.n	8001308 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <HAL_I2C_MspInit+0x78>)
 80012ec:	f000 ff2a 	bl	8002144 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012fa:	61d3      	str	r3, [r2, #28]
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_I2C_MspInit+0x74>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	40010c00 	.word	0x40010c00

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001320:	f000 fdfe 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001324:	f000 f80d 	bl	8001342 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001328:	f7ff ff26 	bl	8001178 <MX_GPIO_Init>
  MX_I2C1_Init();
 800132c:	f7ff ff8a 	bl	8001244 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001330:	f000 fd5a 	bl	8001de8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001334:	f003 f986 	bl	8004644 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001338:	f7ff fe7c 	bl	8001034 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800133c:	f003 f9b4 	bl	80046a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	e7fe      	b.n	8001340 <main+0x24>

08001342 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b090      	sub	sp, #64	; 0x40
 8001346:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	2228      	movs	r2, #40	; 0x28
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f006 f801 	bl	8007358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001380:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001386:	f107 0318 	add.w	r3, r7, #24
 800138a:	4618      	mov	r0, r3
 800138c:	f002 f900 	bl	8003590 <HAL_RCC_OscConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001396:	f000 f82b 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139a:	230f      	movs	r3, #15
 800139c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139e:	2302      	movs	r3, #2
 80013a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fb6d 	bl	8003a94 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013c0:	f000 f816 	bl	80013f0 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3740      	adds	r7, #64	; 0x40
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013de:	f000 fdb5 	bl	8001f4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40012c00 	.word	0x40012c00

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 8001406:	2340      	movs	r3, #64	; 0x40
 8001408:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 800140a:	230a      	movs	r3, #10
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2301      	movs	r3, #1
 8001418:	2209      	movs	r2, #9
 800141a:	21ae      	movs	r1, #174	; 0xae
 800141c:	4847      	ldr	r0, [pc, #284]	; (800153c <max30102_init+0x140>)
 800141e:	f001 f9a1 	bl	8002764 <HAL_I2C_Mem_Write>
    do
    {
        HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001422:	230a      	movs	r3, #10
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2301      	movs	r3, #1
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	2209      	movs	r2, #9
 8001432:	21af      	movs	r1, #175	; 0xaf
 8001434:	4841      	ldr	r0, [pc, #260]	; (800153c <max30102_init+0x140>)
 8001436:	f001 fa8f 	bl	8002958 <HAL_I2C_Mem_Read>
    } while (data & 0x40);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ee      	bne.n	8001422 <max30102_init+0x26>
    /*新数据中断*/
    data = 0x40;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001448:	230a      	movs	r3, #10
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2301      	movs	r3, #1
 8001456:	2202      	movs	r2, #2
 8001458:	21ae      	movs	r1, #174	; 0xae
 800145a:	4838      	ldr	r0, [pc, #224]	; (800153c <max30102_init+0x140>)
 800145c:	f001 f982 	bl	8002764 <HAL_I2C_Mem_Write>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 8001460:	2363      	movs	r3, #99	; 0x63
 8001462:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001464:	230a      	movs	r3, #10
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	2301      	movs	r3, #1
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2301      	movs	r3, #1
 8001472:	220a      	movs	r2, #10
 8001474:	21ae      	movs	r1, #174	; 0xae
 8001476:	4831      	ldr	r0, [pc, #196]	; (800153c <max30102_init+0x140>)
 8001478:	f001 f974 	bl	8002764 <HAL_I2C_Mem_Write>
    /*灯的亮度*/
    data = 0x47;
 800147c:	2347      	movs	r3, #71	; 0x47
 800147e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001480:	230a      	movs	r3, #10
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	220c      	movs	r2, #12
 8001490:	21ae      	movs	r1, #174	; 0xae
 8001492:	482a      	ldr	r0, [pc, #168]	; (800153c <max30102_init+0x140>)
 8001494:	f001 f966 	bl	8002764 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001498:	230a      	movs	r3, #10
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	2301      	movs	r3, #1
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	220d      	movs	r2, #13
 80014a8:	21ae      	movs	r1, #174	; 0xae
 80014aa:	4824      	ldr	r0, [pc, #144]	; (800153c <max30102_init+0x140>)
 80014ac:	f001 f95a 	bl	8002764 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PLUSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014b0:	230a      	movs	r3, #10
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	2301      	movs	r3, #1
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	2210      	movs	r2, #16
 80014c0:	21ae      	movs	r1, #174	; 0xae
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <max30102_init+0x140>)
 80014c4:	f001 f94e 	bl	8002764 <HAL_I2C_Mem_Write>
    /*FIFO clear*/
    data = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014cc:	230a      	movs	r3, #10
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2301      	movs	r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	2204      	movs	r2, #4
 80014dc:	21ae      	movs	r1, #174	; 0xae
 80014de:	4817      	ldr	r0, [pc, #92]	; (800153c <max30102_init+0x140>)
 80014e0:	f001 f940 	bl	8002764 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014e4:	230a      	movs	r3, #10
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2205      	movs	r2, #5
 80014f4:	21ae      	movs	r1, #174	; 0xae
 80014f6:	4811      	ldr	r0, [pc, #68]	; (800153c <max30102_init+0x140>)
 80014f8:	f001 f934 	bl	8002764 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014fc:	230a      	movs	r3, #10
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2301      	movs	r3, #1
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	2206      	movs	r2, #6
 800150c:	21ae      	movs	r1, #174	; 0xae
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <max30102_init+0x140>)
 8001510:	f001 f928 	bl	8002764 <HAL_I2C_Mem_Write>
    /*interrupt status clear*/
    max30102_getStatus();
 8001514:	f000 f8d8 	bl	80016c8 <max30102_getStatus>
    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 8001518:	2303      	movs	r3, #3
 800151a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 800151c:	230a      	movs	r3, #10
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2301      	movs	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	1dfb      	adds	r3, r7, #7
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	2209      	movs	r2, #9
 800152c:	21ae      	movs	r1, #174	; 0xae
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <max30102_init+0x140>)
 8001530:	f001 f918 	bl	8002764 <HAL_I2C_Mem_Write>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000f0 	.word	0x200000f0

08001540 <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af04      	add	r7, sp, #16
    uint8_t wr = 0, rd = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
 800154a:	2300      	movs	r3, #0
 800154c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 800154e:	230a      	movs	r3, #10
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2301      	movs	r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2301      	movs	r3, #1
 800155c:	2204      	movs	r2, #4
 800155e:	21af      	movs	r1, #175	; 0xaf
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <max30102_getUnreadSampleCount+0x68>)
 8001562:	f001 f9f9 	bl	8002958 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 8001566:	230a      	movs	r3, #10
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	2301      	movs	r3, #1
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	2206      	movs	r2, #6
 8001576:	21af      	movs	r1, #175	; 0xaf
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <max30102_getUnreadSampleCount+0x68>)
 800157a:	f001 f9ed 	bl	8002958 <HAL_I2C_Mem_Read>
    if ((wr - rd) < 0)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	461a      	mov	r2, r3
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	da06      	bge.n	8001598 <max30102_getUnreadSampleCount+0x58>
        return wr - rd + 32;
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3320      	adds	r3, #32
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e003      	b.n	80015a0 <max30102_getUnreadSampleCount+0x60>
    else
        return wr - rd;
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200000f0 	.word	0x200000f0

080015ac <max30102_getFIFO>:

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
    uint8_t dataTemp[5 * 6];
    if (sampleCount > 5)
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d901      	bls.n	80015c2 <max30102_getFIFO+0x16>
        sampleCount = 5;
 80015be:	2305      	movs	r3, #5
 80015c0:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_DATA_REGISTER,
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	0052      	lsls	r2, r2, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2219      	movs	r2, #25
 80015d2:	9202      	str	r2, [sp, #8]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	2207      	movs	r2, #7
 80015e0:	21af      	movs	r1, #175	; 0xaf
 80015e2:	4838      	ldr	r0, [pc, #224]	; (80016c4 <max30102_getFIFO+0x118>)
 80015e4:	f001 f9b8 	bl	8002958 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, dataTemp,
                     6 * sampleCount, 25);
    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015ee:	e05f      	b.n	80016b0 <max30102_getFIFO+0x104>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 80015f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	3328      	adds	r3, #40	; 0x28
 80015fe:	443b      	add	r3, r7
 8001600:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001604:	0419      	lsls	r1, r3, #16
 8001606:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	3301      	adds	r3, #1
 8001614:	3328      	adds	r3, #40	; 0x28
 8001616:	443b      	add	r3, r7
 8001618:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	4319      	orrs	r1, r3
 8001620:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	3302      	adds	r3, #2
 800162e:	3328      	adds	r3, #40	; 0x28
 8001630:	443b      	add	r3, r7
 8001632:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001636:	ea41 0203 	orr.w	r2, r1, r3
 800163a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	440b      	add	r3, r1
 8001644:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001648:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 800164a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	3303      	adds	r3, #3
 8001658:	3328      	adds	r3, #40	; 0x28
 800165a:	443b      	add	r3, r7
 800165c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001660:	0419      	lsls	r1, r3, #16
 8001662:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	3304      	adds	r3, #4
 8001670:	3328      	adds	r3, #40	; 0x28
 8001672:	443b      	add	r3, r7
 8001674:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001678:	021b      	lsls	r3, r3, #8
 800167a:	4319      	orrs	r1, r3
 800167c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3305      	adds	r3, #5
 800168a:	3328      	adds	r3, #40	; 0x28
 800168c:	443b      	add	r3, r7
 800168e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001692:	ea41 0203 	orr.w	r2, r1, r3
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	440b      	add	r3, r1
 80016a0:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80016a4:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 80016a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016aa:	3301      	adds	r3, #1
 80016ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d39a      	bcc.n	80015f0 <max30102_getFIFO+0x44>
    }
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200000f0 	.word	0x200000f0

080016c8 <max30102_getStatus>:

uint8_t max30102_getStatus()
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]
 80016d2:	2300      	movs	r3, #0
 80016d4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80016d6:	230a      	movs	r3, #10
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2301      	movs	r3, #1
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	1dbb      	adds	r3, r7, #6
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2200      	movs	r2, #0
 80016e6:	21af      	movs	r1, #175	; 0xaf
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <max30102_getStatus+0x54>)
 80016ea:	f001 f935 	bl	8002958 <HAL_I2C_Mem_Read>
    data = dataTemp;
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80016f2:	230a      	movs	r3, #10
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2301      	movs	r3, #1
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	1dbb      	adds	r3, r7, #6
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	2201      	movs	r2, #1
 8001702:	21af      	movs	r1, #175	; 0xaf
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <max30102_getStatus+0x54>)
 8001706:	f001 f927 	bl	8002958 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 800170a:	79ba      	ldrb	r2, [r7, #6]
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	4313      	orrs	r3, r2
 8001710:	b2db      	uxtb	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000f0 	.word	0x200000f0

08001720 <filter>:
uint16_t iRedAC = 0;
uint32_t iRedDC = 0;

#define FILTER_LEVEL 8 /*滤波等级*/
void filter(SAMPLE *s)
{
 8001720:	b480      	push	{r7}
 8001722:	b087      	sub	sp, #28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
 8001734:	e011      	b.n	800175a <filter+0x3a>
    {
        red += sampleBuff[i].red;
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <filter+0x68>)
 800173a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4413      	add	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <filter+0x68>)
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4413      	add	r3, r2
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	3301      	adds	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b06      	cmp	r3, #6
 800175e:	d9ea      	bls.n	8001736 <filter+0x16>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4413      	add	r3, r2
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4413      	add	r3, r2
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	605a      	str	r2, [r3, #4]
}
 800177c:	bf00      	nop
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000144 	.word	0x20000144

0800178c <buffInsert>:

void buffInsert(SAMPLE s)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	463b      	mov	r3, r7
 8001794:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 8001798:	2331      	movs	r3, #49	; 0x31
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e016      	b.n	80017cc <buffInsert+0x40>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4910      	ldr	r1, [pc, #64]	; (80017e8 <buffInsert+0x5c>)
 80017a6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80017aa:	490f      	ldr	r1, [pc, #60]	; (80017e8 <buffInsert+0x5c>)
 80017ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	7bf9      	ldrb	r1, [r7, #15]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <buffInsert+0x5c>)
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <buffInsert+0x5c>)
 80017c0:	00cb      	lsls	r3, r1, #3
 80017c2:	4403      	add	r3, r0
 80017c4:	605a      	str	r2, [r3, #4]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e5      	bne.n	800179e <buffInsert+0x12>
    }
    sampleBuff[0].red = s.red;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <buffInsert+0x5c>)
 80017d6:	6013      	str	r3, [r2, #0]
    sampleBuff[0].iRed = s.iRed;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <buffInsert+0x5c>)
 80017dc:	6053      	str	r3, [r2, #4]
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	20000144 	.word	0x20000144

080017ec <calAcDc>:

void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b08b      	sub	sp, #44	; 0x2c
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 80017fa:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <calAcDc+0xe4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rMin = sampleBuff[0].red;
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <calAcDc+0xe4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].iRed;
 8001806:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <calAcDc+0xe4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].iRed;
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <calAcDc+0xe4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
 8001816:	e036      	b.n	8001886 <calAcDc+0x9a>
    {
        if (sampleBuff[i].red > rMax)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <calAcDc+0xe4>)
 800181c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	429a      	cmp	r2, r3
 8001824:	d204      	bcs.n	8001830 <calAcDc+0x44>
            rMax = sampleBuff[i].red;
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <calAcDc+0xe4>)
 800182a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
        if (sampleBuff[i].red < rMin)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <calAcDc+0xe4>)
 8001834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	429a      	cmp	r2, r3
 800183c:	d904      	bls.n	8001848 <calAcDc+0x5c>
            rMin = sampleBuff[i].red;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <calAcDc+0xe4>)
 8001842:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001846:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].iRed > iMax)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <calAcDc+0xe4>)
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	69fa      	ldr	r2, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	d205      	bcs.n	8001864 <calAcDc+0x78>
            iMax = sampleBuff[i].iRed;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <calAcDc+0xe4>)
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].iRed < iMin)
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <calAcDc+0xe4>)
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	429a      	cmp	r2, r3
 8001872:	d905      	bls.n	8001880 <calAcDc+0x94>
            iMin = sampleBuff[i].iRed;
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <calAcDc+0xe4>)
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	3301      	adds	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	2b31      	cmp	r3, #49	; 0x31
 800188a:	d9c5      	bls.n	8001818 <calAcDc+0x2c>
    }
    *rac = rMax - rMin;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	b29a      	uxth	r2, r3
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	b29b      	uxth	r3, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	4413      	add	r3, r2
 80018a2:	085a      	lsrs	r2, r3, #1
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4413      	add	r3, r2
 80018be:	085a      	lsrs	r2, r3, #1
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	601a      	str	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	372c      	adds	r7, #44	; 0x2c
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000144 	.word	0x20000144
 80018d4:	00000000 	.word	0x00000000

080018d8 <max30102_cal>:

int16_t eachSampleDiff = 0; //和上一个样本相差了多少
void max30102_cal()
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 80018de:	f7ff fe2f 	bl	8001540 <max30102_getUnreadSampleCount>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    SAMPLE sampleBuffTemp[5];
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 80018e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018ec:	463b      	mov	r3, r7
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe5b 	bl	80015ac <max30102_getFIFO>
    static uint8_t eachBeatSampleCount = 0;    //这次心跳历经了多少个样本
    static uint8_t lastTenBeatSampleCount[10]; //过去十次心跳每一次的样本数
    static uint32_t last_iRed = 0;             //上一次红外的值，过滤后的
    uint8_t i, ii;
    for (i = 0; i < unreadSampleCount; i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018fc:	e122      	b.n	8001b44 <max30102_cal+0x26c>
    {
        if (sampleBuffTemp[i].iRed < 40000) //无手指不计算，跳过
 80018fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	3338      	adds	r3, #56	; 0x38
 8001906:	443b      	add	r3, r7
 8001908:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800190c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001910:	4293      	cmp	r3, r2
 8001912:	d809      	bhi.n	8001928 <max30102_cal+0x50>
        {
            heartRate = 0;
 8001914:	4b9a      	ldr	r3, [pc, #616]	; (8001b80 <max30102_cal+0x2a8>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
            spo2 = 0;
 800191a:	4b9a      	ldr	r3, [pc, #616]	; (8001b84 <max30102_cal+0x2ac>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 8001920:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <max30102_cal+0x2b0>)
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
            continue;
 8001926:	e108      	b.n	8001b3a <max30102_cal+0x262>
        }
        buffInsert(sampleBuffTemp[i]);
 8001928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	3338      	adds	r3, #56	; 0x38
 8001930:	443b      	add	r3, r7
 8001932:	3b38      	subs	r3, #56	; 0x38
 8001934:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001938:	f7ff ff28 	bl	800178c <buffInsert>
        calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 800193c:	4b93      	ldr	r3, [pc, #588]	; (8001b8c <max30102_cal+0x2b4>)
 800193e:	4a94      	ldr	r2, [pc, #592]	; (8001b90 <max30102_cal+0x2b8>)
 8001940:	4994      	ldr	r1, [pc, #592]	; (8001b94 <max30102_cal+0x2bc>)
 8001942:	4895      	ldr	r0, [pc, #596]	; (8001b98 <max30102_cal+0x2c0>)
 8001944:	f7ff ff52 	bl	80017ec <calAcDc>
        filter(&sampleBuffTemp[i]);
 8001948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800194c:	463a      	mov	r2, r7
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fee4 	bl	8001720 <filter>
        //计算spo2
        float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 8001958:	4b8f      	ldr	r3, [pc, #572]	; (8001b98 <max30102_cal+0x2c0>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f92b 	bl	8000bb8 <__aeabi_ui2f>
 8001962:	4604      	mov	r4, r0
 8001964:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <max30102_cal+0x2bc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f925 	bl	8000bb8 <__aeabi_ui2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fa2c 	bl	8000dd0 <__aeabi_fdiv>
 8001978:	4603      	mov	r3, r0
 800197a:	461d      	mov	r5, r3
 800197c:	4b84      	ldr	r3, [pc, #528]	; (8001b90 <max30102_cal+0x2b8>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f919 	bl	8000bb8 <__aeabi_ui2f>
 8001986:	4604      	mov	r4, r0
 8001988:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <max30102_cal+0x2b4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f913 	bl	8000bb8 <__aeabi_ui2f>
 8001992:	4603      	mov	r3, r0
 8001994:	4619      	mov	r1, r3
 8001996:	4620      	mov	r0, r4
 8001998:	f7ff fa1a 	bl	8000dd0 <__aeabi_fdiv>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4628      	mov	r0, r5
 80019a2:	f7ff fa15 	bl	8000dd0 <__aeabi_fdiv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (R >= 0.36 && R < 0.66)
 80019aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	a36b      	add	r3, pc, #428	; (adr r3, 8001b60 <max30102_cal+0x288>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7ff f815 	bl	80009e4 <__aeabi_dcmpge>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <max30102_cal+0x122>
 80019c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019c2:	f7fe fd31 	bl	8000428 <__aeabi_f2d>
 80019c6:	a368      	add	r3, pc, #416	; (adr r3, 8001b68 <max30102_cal+0x290>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fff6 	bl	80009bc <__aeabi_dcmplt>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d011      	beq.n	80019fa <max30102_cal+0x122>
            spo2 = (uint8_t)(107 - 20 * R);
 80019d6:	4971      	ldr	r1, [pc, #452]	; (8001b9c <max30102_cal+0x2c4>)
 80019d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019da:	f7ff f945 	bl	8000c68 <__aeabi_fmul>
 80019de:	4603      	mov	r3, r0
 80019e0:	4619      	mov	r1, r3
 80019e2:	486f      	ldr	r0, [pc, #444]	; (8001ba0 <max30102_cal+0x2c8>)
 80019e4:	f7ff f836 	bl	8000a54 <__aeabi_fsub>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb02 	bl	8000ff4 <__aeabi_f2uiz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b63      	ldr	r3, [pc, #396]	; (8001b84 <max30102_cal+0x2ac>)
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e02b      	b.n	8001a52 <max30102_cal+0x17a>
        else if (R >= 0.66 && R < 1)
 80019fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019fc:	f7fe fd14 	bl	8000428 <__aeabi_f2d>
 8001a00:	a359      	add	r3, pc, #356	; (adr r3, 8001b68 <max30102_cal+0x290>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe ffed 	bl	80009e4 <__aeabi_dcmpge>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <max30102_cal+0x17a>
 8001a10:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a16:	f7ff fac5 	bl	8000fa4 <__aeabi_fcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d018      	beq.n	8001a52 <max30102_cal+0x17a>
            spo2 = (uint8_t)(129.64 - 54 * R);
 8001a20:	4960      	ldr	r1, [pc, #384]	; (8001ba4 <max30102_cal+0x2cc>)
 8001a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a24:	f7ff f920 	bl	8000c68 <__aeabi_fmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fcfc 	bl	8000428 <__aeabi_f2d>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	a14e      	add	r1, pc, #312	; (adr r1, 8001b70 <max30102_cal+0x298>)
 8001a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a3a:	f7fe fb95 	bl	8000168 <__aeabi_dsub>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7fe ffe1 	bl	8000a0c <__aeabi_d2uiz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <max30102_cal+0x2ac>)
 8001a50:	701a      	strb	r2, [r3, #0]
        //计算心率,30-250ppm  count:200-12
        eachSampleDiff = last_iRed - sampleBuffTemp[i].iRed;
 8001a52:	4b55      	ldr	r3, [pc, #340]	; (8001ba8 <max30102_cal+0x2d0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	3338      	adds	r3, #56	; 0x38
 8001a60:	443b      	add	r3, r7
 8001a62:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <max30102_cal+0x2b0>)
 8001a70:	801a      	strh	r2, [r3, #0]
        if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <max30102_cal+0x2b0>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	2b32      	cmp	r3, #50	; 0x32
 8001a7a:	dd4f      	ble.n	8001b1c <max30102_cal+0x244>
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <max30102_cal+0x2d4>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d94b      	bls.n	8001b1c <max30102_cal+0x244>
        {
            for (ii = 9; ii > 0; ii--)
 8001a84:	2309      	movs	r3, #9
 8001a86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a8a:	e00d      	b.n	8001aa8 <max30102_cal+0x1d0>
                lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 8001a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a96:	4946      	ldr	r1, [pc, #280]	; (8001bb0 <max30102_cal+0x2d8>)
 8001a98:	5c89      	ldrb	r1, [r1, r2]
 8001a9a:	4a45      	ldr	r2, [pc, #276]	; (8001bb0 <max30102_cal+0x2d8>)
 8001a9c:	54d1      	strb	r1, [r2, r3]
            for (ii = 9; ii > 0; ii--)
 8001a9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001aa8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ed      	bne.n	8001a8c <max30102_cal+0x1b4>
            lastTenBeatSampleCount[0] = eachBeatSampleCount;
 8001ab0:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <max30102_cal+0x2d4>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <max30102_cal+0x2d8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
            uint32_t totalTime = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ac2:	e00c      	b.n	8001ade <max30102_cal+0x206>
                totalTime += lastTenBeatSampleCount[i];
 8001ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ac8:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <max30102_cal+0x2d8>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	461a      	mov	r2, r3
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	4413      	add	r3, r2
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8001ad4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ade:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d9ee      	bls.n	8001ac4 <max30102_cal+0x1ec>
            heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 8001ae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ae8:	f7ff f866 	bl	8000bb8 <__aeabi_ui2f>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fc9a 	bl	8000428 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	a11f      	add	r1, pc, #124	; (adr r1, 8001b78 <max30102_cal+0x2a0>)
 8001afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001afe:	f7fe fe15 	bl	800072c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7fe ff7f 	bl	8000a0c <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <max30102_cal+0x2a8>)
 8001b14:	701a      	strb	r2, [r3, #0]
            eachBeatSampleCount = 0;
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <max30102_cal+0x2d4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
        }
        last_iRed = sampleBuffTemp[i].iRed;
 8001b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	3338      	adds	r3, #56	; 0x38
 8001b24:	443b      	add	r3, r7
 8001b26:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <max30102_cal+0x2d0>)
 8001b2c:	6013      	str	r3, [r2, #0]
        eachBeatSampleCount++;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <max30102_cal+0x2d4>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <max30102_cal+0x2d4>)
 8001b38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 8001b3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f4ff aed6 	bcc.w	80018fe <max30102_cal+0x26>
    }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5c:	f3af 8000 	nop.w
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fd70a3d 	.word	0x3fd70a3d
 8001b68:	51eb851f 	.word	0x51eb851f
 8001b6c:	3fe51eb8 	.word	0x3fe51eb8
 8001b70:	e147ae14 	.word	0xe147ae14
 8001b74:	4060347a 	.word	0x4060347a
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40dd4c00 	.word	0x40dd4c00
 8001b80:	200002d4 	.word	0x200002d4
 8001b84:	200002d5 	.word	0x200002d5
 8001b88:	200002e4 	.word	0x200002e4
 8001b8c:	200002e0 	.word	0x200002e0
 8001b90:	200002dc 	.word	0x200002dc
 8001b94:	200002d8 	.word	0x200002d8
 8001b98:	200002d6 	.word	0x200002d6
 8001b9c:	41a00000 	.word	0x41a00000
 8001ba0:	42d60000 	.word	0x42d60000
 8001ba4:	42580000 	.word	0x42580000
 8001ba8:	200002e8 	.word	0x200002e8
 8001bac:	200002ec 	.word	0x200002ec
 8001bb0:	200002f0 	.word	0x200002f0

08001bb4 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4b02      	ldr	r3, [pc, #8]	; (8001bc4 <max30102_getHeartRate+0x10>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	200002d4 	.word	0x200002d4

08001bc8 <max30102_getSpO2>:
uint8_t max30102_getSpO2() { return spo2; }
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <max30102_getSpO2+0x10>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	200002d5 	.word	0x200002d5

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_MspInit+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_MspInit+0x68>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_MspInit+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_MspInit+0x68>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <HAL_MspInit+0x68>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_MspInit+0x68>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f000 fa68 	bl	80020ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_MspInit+0x6c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_MspInit+0x6c>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000

08001c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_InitTick+0xd0>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4a2d      	ldr	r2, [pc, #180]	; (8001d1c <HAL_InitTick+0xd0>)
 8001c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6c:	6193      	str	r3, [r2, #24]
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_InitTick+0xd0>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c7a:	f107 020c 	add.w	r2, r7, #12
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 f875 	bl	8003d74 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c8a:	f002 f85f 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8001c8e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_InitTick+0xd4>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_InitTick+0xd8>)
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_InitTick+0xdc>)
 8001ca2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_InitTick+0xd8>)
 8001ca6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001caa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cc4:	4817      	ldr	r0, [pc, #92]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cc6:	f002 f8a3 	bl	8003e10 <HAL_TIM_Base_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001cd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cd8:	4812      	ldr	r0, [pc, #72]	; (8001d24 <HAL_InitTick+0xd8>)
 8001cda:	f002 f8f1 	bl	8003ec0 <HAL_TIM_Base_Start_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cec:	2019      	movs	r0, #25
 8001cee:	f000 fa1a 	bl	8002126 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d808      	bhi.n	8001d0a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	2019      	movs	r0, #25
 8001cfe:	f000 f9f6 	bl	80020ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_InitTick+0xe0>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	e002      	b.n	8001d10 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3730      	adds	r7, #48	; 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	200002fc 	.word	0x200002fc
 8001d28:	40012c00 	.word	0x40012c00
 8001d2c:	20000004 	.word	0x20000004

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <NMI_Handler+0x4>

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler+0x4>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <TIM1_UP_IRQHandler+0x10>)
 8001d62:	f002 f8ff 	bl	8003f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200002fc 	.word	0x200002fc

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f005 faa0 	bl	80072e4 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20005000 	.word	0x20005000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	20000344 	.word	0x20000344
 8001dd8:	20001db0 	.word	0x20001db0

08001ddc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <MX_USART1_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_USART1_UART_Init+0x4c>)
 8001e20:	f002 fa40 	bl	80042a4 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f7ff fae1 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000348 	.word	0x20000348
 8001e38:	40013800 	.word	0x40013800

08001e3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <HAL_UART_MspInit+0x8c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d131      	bne.n	8001ec0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6193      	str	r3, [r2, #24]
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0x90>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9a:	f107 0310 	add.w	r3, r7, #16
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001ea2:	f000 f94f 	bl	8002144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_UART_MspInit+0x94>)
 8001ebc:	f000 f942 	bl	8002144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013800 	.word	0x40013800
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed4:	f7ff ff82 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed8:	480b      	ldr	r0, [pc, #44]	; (8001f08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eda:	490c      	ldr	r1, [pc, #48]	; (8001f0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001edc:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ef0:	4c09      	ldr	r4, [pc, #36]	; (8001f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efe:	f005 f9f7 	bl	80072f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f02:	f7ff fa0b 	bl	800131c <main>
  bx lr
 8001f06:	4770      	bx	lr
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f10:	08007ec0 	.word	0x08007ec0
  ldr r2, =_sbss
 8001f14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f18:	20001dac 	.word	0x20001dac

08001f1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC1_2_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_Init+0x28>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_Init+0x28>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f8d1 	bl	80020d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	200f      	movs	r0, #15
 8001f38:	f7ff fe88 	bl	8001c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fe4e 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000

08001f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x1c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_IncTick+0x20>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <HAL_IncTick+0x20>)
 8001f5e:	6013      	str	r3, [r2, #0]
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000390 	.word	0x20000390

08001f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b02      	ldr	r3, [pc, #8]	; (8001f80 <HAL_GetTick+0x10>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	20000390 	.word	0x20000390

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <__NVIC_EnableIRQ+0x34>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff4f 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff64 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ffb2 	bl	8002074 <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff81 	bl	8002020 <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff57 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002144:	b480      	push	{r7}
 8002146:	b08b      	sub	sp, #44	; 0x2c
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002156:	e169      	b.n	800242c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002158:	2201      	movs	r2, #1
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69fa      	ldr	r2, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	429a      	cmp	r2, r3
 8002172:	f040 8158 	bne.w	8002426 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a9a      	ldr	r2, [pc, #616]	; (80023e4 <HAL_GPIO_Init+0x2a0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d05e      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 8002180:	4a98      	ldr	r2, [pc, #608]	; (80023e4 <HAL_GPIO_Init+0x2a0>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d875      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 8002186:	4a98      	ldr	r2, [pc, #608]	; (80023e8 <HAL_GPIO_Init+0x2a4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d058      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 800218c:	4a96      	ldr	r2, [pc, #600]	; (80023e8 <HAL_GPIO_Init+0x2a4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d86f      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 8002192:	4a96      	ldr	r2, [pc, #600]	; (80023ec <HAL_GPIO_Init+0x2a8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d052      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 8002198:	4a94      	ldr	r2, [pc, #592]	; (80023ec <HAL_GPIO_Init+0x2a8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d869      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 800219e:	4a94      	ldr	r2, [pc, #592]	; (80023f0 <HAL_GPIO_Init+0x2ac>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d04c      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 80021a4:	4a92      	ldr	r2, [pc, #584]	; (80023f0 <HAL_GPIO_Init+0x2ac>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d863      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021aa:	4a92      	ldr	r2, [pc, #584]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d046      	beq.n	800223e <HAL_GPIO_Init+0xfa>
 80021b0:	4a90      	ldr	r2, [pc, #576]	; (80023f4 <HAL_GPIO_Init+0x2b0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d85d      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d82a      	bhi.n	8002210 <HAL_GPIO_Init+0xcc>
 80021ba:	2b12      	cmp	r3, #18
 80021bc:	d859      	bhi.n	8002272 <HAL_GPIO_Init+0x12e>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <HAL_GPIO_Init+0x80>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	0800223f 	.word	0x0800223f
 80021c8:	08002219 	.word	0x08002219
 80021cc:	0800222b 	.word	0x0800222b
 80021d0:	0800226d 	.word	0x0800226d
 80021d4:	08002273 	.word	0x08002273
 80021d8:	08002273 	.word	0x08002273
 80021dc:	08002273 	.word	0x08002273
 80021e0:	08002273 	.word	0x08002273
 80021e4:	08002273 	.word	0x08002273
 80021e8:	08002273 	.word	0x08002273
 80021ec:	08002273 	.word	0x08002273
 80021f0:	08002273 	.word	0x08002273
 80021f4:	08002273 	.word	0x08002273
 80021f8:	08002273 	.word	0x08002273
 80021fc:	08002273 	.word	0x08002273
 8002200:	08002273 	.word	0x08002273
 8002204:	08002273 	.word	0x08002273
 8002208:	08002221 	.word	0x08002221
 800220c:	08002235 	.word	0x08002235
 8002210:	4a79      	ldr	r2, [pc, #484]	; (80023f8 <HAL_GPIO_Init+0x2b4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002216:	e02c      	b.n	8002272 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e029      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	3304      	adds	r3, #4
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e024      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	3308      	adds	r3, #8
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e01f      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	330c      	adds	r3, #12
 800223a:	623b      	str	r3, [r7, #32]
          break;
 800223c:	e01a      	b.n	8002274 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002246:	2304      	movs	r3, #4
 8002248:	623b      	str	r3, [r7, #32]
          break;
 800224a:	e013      	b.n	8002274 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002254:	2308      	movs	r3, #8
 8002256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	611a      	str	r2, [r3, #16]
          break;
 800225e:	e009      	b.n	8002274 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002260:	2308      	movs	r3, #8
 8002262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	615a      	str	r2, [r3, #20]
          break;
 800226a:	e003      	b.n	8002274 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x130>
          break;
 8002272:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d801      	bhi.n	800227e <HAL_GPIO_Init+0x13a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	e001      	b.n	8002282 <HAL_GPIO_Init+0x13e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d802      	bhi.n	8002290 <HAL_GPIO_Init+0x14c>
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x152>
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3b08      	subs	r3, #8
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	210f      	movs	r1, #15
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	fa01 f303 	lsl.w	r3, r1, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	401a      	ands	r2, r3
 80022a8:	6a39      	ldr	r1, [r7, #32]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80b1 	beq.w	8002426 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c4:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <HAL_GPIO_Init+0x2b8>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <HAL_GPIO_Init+0x2b8>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b4a      	ldr	r3, [pc, #296]	; (80023fc <HAL_GPIO_Init+0x2b8>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022dc:	4a48      	ldr	r2, [pc, #288]	; (8002400 <HAL_GPIO_Init+0x2bc>)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a40      	ldr	r2, [pc, #256]	; (8002404 <HAL_GPIO_Init+0x2c0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <HAL_GPIO_Init+0x1ec>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3f      	ldr	r2, [pc, #252]	; (8002408 <HAL_GPIO_Init+0x2c4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00d      	beq.n	800232c <HAL_GPIO_Init+0x1e8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3e      	ldr	r2, [pc, #248]	; (800240c <HAL_GPIO_Init+0x2c8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <HAL_GPIO_Init+0x1e4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3d      	ldr	r2, [pc, #244]	; (8002410 <HAL_GPIO_Init+0x2cc>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_GPIO_Init+0x1e0>
 8002320:	2303      	movs	r3, #3
 8002322:	e006      	b.n	8002332 <HAL_GPIO_Init+0x1ee>
 8002324:	2304      	movs	r3, #4
 8002326:	e004      	b.n	8002332 <HAL_GPIO_Init+0x1ee>
 8002328:	2302      	movs	r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x1ee>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_GPIO_Init+0x1ee>
 8002330:	2300      	movs	r3, #0
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	f002 0203 	and.w	r2, r2, #3
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	4093      	lsls	r3, r2
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002342:	492f      	ldr	r1, [pc, #188]	; (8002400 <HAL_GPIO_Init+0x2bc>)
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	492c      	ldr	r1, [pc, #176]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	43db      	mvns	r3, r3
 8002372:	4928      	ldr	r1, [pc, #160]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 8002374:	4013      	ands	r3, r2
 8002376:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d006      	beq.n	8002392 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	4922      	ldr	r1, [pc, #136]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
 8002390:	e006      	b.n	80023a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	43db      	mvns	r3, r3
 800239a:	491e      	ldr	r1, [pc, #120]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 800239c:	4013      	ands	r3, r2
 800239e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d006      	beq.n	80023ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4918      	ldr	r1, [pc, #96]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4914      	ldr	r1, [pc, #80]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d021      	beq.n	8002418 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_GPIO_Init+0x2d0>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e021      	b.n	8002426 <HAL_GPIO_Init+0x2e2>
 80023e2:	bf00      	nop
 80023e4:	10320000 	.word	0x10320000
 80023e8:	10310000 	.word	0x10310000
 80023ec:	10220000 	.word	0x10220000
 80023f0:	10210000 	.word	0x10210000
 80023f4:	10120000 	.word	0x10120000
 80023f8:	10110000 	.word	0x10110000
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	40010800 	.word	0x40010800
 8002408:	40010c00 	.word	0x40010c00
 800240c:	40011000 	.word	0x40011000
 8002410:	40011400 	.word	0x40011400
 8002414:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_GPIO_Init+0x304>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	43db      	mvns	r3, r3
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <HAL_GPIO_Init+0x304>)
 8002422:	4013      	ands	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	3301      	adds	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	f47f ae8e 	bne.w	8002158 <HAL_GPIO_Init+0x14>
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	372c      	adds	r7, #44	; 0x2c
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
 8002468:	e001      	b.n	800246e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	807b      	strh	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002490:	887a      	ldrh	r2, [r7, #2]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002496:	e003      	b.n	80024a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	041a      	lsls	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	611a      	str	r2, [r3, #16]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	460b      	mov	r3, r1
 80024b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024bc:	887a      	ldrh	r2, [r7, #2]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	041a      	lsls	r2, r3, #16
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	887b      	ldrh	r3, [r7, #2]
 80024ca:	400b      	ands	r3, r1
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e12b      	b.n	8002746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fecc 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002540:	f001 fbf0 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8002544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	4a81      	ldr	r2, [pc, #516]	; (8002750 <HAL_I2C_Init+0x274>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d807      	bhi.n	8002560 <HAL_I2C_Init+0x84>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a80      	ldr	r2, [pc, #512]	; (8002754 <HAL_I2C_Init+0x278>)
 8002554:	4293      	cmp	r3, r2
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e006      	b.n	800256e <HAL_I2C_Init+0x92>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a7d      	ldr	r2, [pc, #500]	; (8002758 <HAL_I2C_Init+0x27c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	bf94      	ite	ls
 8002568:	2301      	movls	r3, #1
 800256a:	2300      	movhi	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0e7      	b.n	8002746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a78      	ldr	r2, [pc, #480]	; (800275c <HAL_I2C_Init+0x280>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	430a      	orrs	r2, r1
 8002594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a6a      	ldr	r2, [pc, #424]	; (8002750 <HAL_I2C_Init+0x274>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d802      	bhi.n	80025b0 <HAL_I2C_Init+0xd4>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3301      	adds	r3, #1
 80025ae:	e009      	b.n	80025c4 <HAL_I2C_Init+0xe8>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_I2C_Init+0x284>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	099b      	lsrs	r3, r3, #6
 80025c2:	3301      	adds	r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	495c      	ldr	r1, [pc, #368]	; (8002750 <HAL_I2C_Init+0x274>)
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d819      	bhi.n	8002618 <HAL_I2C_Init+0x13c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e59      	subs	r1, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025f8:	400b      	ands	r3, r1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_I2C_Init+0x138>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e59      	subs	r1, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fbb1 f3f3 	udiv	r3, r1, r3
 800260c:	3301      	adds	r3, #1
 800260e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002612:	e051      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002614:	2304      	movs	r3, #4
 8002616:	e04f      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <HAL_I2C_Init+0x168>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e012      	b.n	800266a <HAL_I2C_Init+0x18e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1e58      	subs	r0, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	0099      	lsls	r1, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	fbb0 f3f3 	udiv	r3, r0, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf0c      	ite	eq
 8002664:	2301      	moveq	r3, #1
 8002666:	2300      	movne	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Init+0x196>
 800266e:	2301      	movs	r3, #1
 8002670:	e022      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10e      	bne.n	8002698 <HAL_I2C_Init+0x1bc>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e58      	subs	r0, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	440b      	add	r3, r1
 8002688:	fbb0 f3f3 	udiv	r3, r0, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002696:	e00f      	b.n	80026b8 <HAL_I2C_Init+0x1dc>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1e58      	subs	r0, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	0099      	lsls	r1, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	6809      	ldr	r1, [r1, #0]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6911      	ldr	r1, [r2, #16]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68d2      	ldr	r2, [r2, #12]
 80026f2:	4311      	orrs	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	000186a0 	.word	0x000186a0
 8002754:	001e847f 	.word	0x001e847f
 8002758:	003d08ff 	.word	0x003d08ff
 800275c:	431bde83 	.word	0x431bde83
 8002760:	10624dd3 	.word	0x10624dd3

08002764 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	4608      	mov	r0, r1
 800276e:	4611      	mov	r1, r2
 8002770:	461a      	mov	r2, r3
 8002772:	4603      	mov	r3, r0
 8002774:	817b      	strh	r3, [r7, #10]
 8002776:	460b      	mov	r3, r1
 8002778:	813b      	strh	r3, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800277e:	f7ff fbf7 	bl	8001f70 <HAL_GetTick>
 8002782:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	f040 80d9 	bne.w	8002944 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2319      	movs	r3, #25
 8002798:	2201      	movs	r2, #1
 800279a:	496d      	ldr	r1, [pc, #436]	; (8002950 <HAL_I2C_Mem_Write+0x1ec>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fcc1 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0cc      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_I2C_Mem_Write+0x56>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0c5      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d007      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2221      	movs	r2, #33	; 0x21
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a3a      	ldr	r2, [r7, #32]
 800280a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_I2C_Mem_Write+0x1f0>)
 8002820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002822:	88f8      	ldrh	r0, [r7, #6]
 8002824:	893a      	ldrh	r2, [r7, #8]
 8002826:	8979      	ldrh	r1, [r7, #10]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4603      	mov	r3, r0
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 faf8 	bl	8002e28 <I2C_RequestMemoryWrite>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d052      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e081      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fd86 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	2b04      	cmp	r3, #4
 8002858:	d107      	bne.n	800286a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002868:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06b      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	781a      	ldrb	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d11b      	bne.n	80028e4 <HAL_I2C_Mem_Write+0x180>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1aa      	bne.n	8002842 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fd79 	bl	80033e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	2b04      	cmp	r3, #4
 8002902:	d107      	bne.n	8002914 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e016      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002944:	2302      	movs	r3, #2
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	00100002 	.word	0x00100002
 8002954:	ffff0000 	.word	0xffff0000

08002958 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	817b      	strh	r3, [r7, #10]
 800296a:	460b      	mov	r3, r1
 800296c:	813b      	strh	r3, [r7, #8]
 800296e:	4613      	mov	r3, r2
 8002970:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002976:	f7ff fafb 	bl	8001f70 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	f040 8244 	bne.w	8002e12 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2319      	movs	r3, #25
 8002990:	2201      	movs	r2, #1
 8002992:	4982      	ldr	r1, [pc, #520]	; (8002b9c <HAL_I2C_Mem_Read+0x244>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fbc5 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
 80029a2:	e237      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x5a>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e230      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d007      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2222      	movs	r2, #34	; 0x22
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a62      	ldr	r2, [pc, #392]	; (8002ba0 <HAL_I2C_Mem_Read+0x248>)
 8002a18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1a:	88f8      	ldrh	r0, [r7, #6]
 8002a1c:	893a      	ldrh	r2, [r7, #8]
 8002a1e:	8979      	ldrh	r1, [r7, #10]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	4603      	mov	r3, r0
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fa92 	bl	8002f54 <I2C_RequestMemoryRead>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e1ec      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e1c0      	b.n	8002dec <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d11e      	bne.n	8002ab0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a82:	b672      	cpsid	i
}
 8002a84:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aaa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aac:	b662      	cpsie	i
}
 8002aae:	e035      	b.n	8002b1c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11e      	bne.n	8002af6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002af2:	b662      	cpsie	i
}
 8002af4:	e012      	b.n	8002b1c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b1c:	e166      	b.n	8002dec <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	f200 811f 	bhi.w	8002d66 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d123      	bne.n	8002b78 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fc9f 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e167      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b76:	e139      	b.n	8002dec <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d152      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b86:	2200      	movs	r2, #0
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <HAL_I2C_Mem_Read+0x24c>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 faca 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e13c      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
 8002b9a:	bf00      	nop
 8002b9c:	00100002 	.word	0x00100002
 8002ba0:	ffff0000 	.word	0xffff0000
 8002ba4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bee:	b662      	cpsie	i
}
 8002bf0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c24:	e0e2      	b.n	8002dec <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	497b      	ldr	r1, [pc, #492]	; (8002e1c <HAL_I2C_Mem_Read+0x4c4>)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fa77 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0e9      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c50:	b672      	cpsid	i
}
 8002c52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_I2C_Mem_Read+0x4c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	08db      	lsrs	r3, r3, #3
 8002c8c:	4a65      	ldr	r2, [pc, #404]	; (8002e24 <HAL_I2C_Mem_Read+0x4cc>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a1a      	lsrs	r2, r3, #8
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00da      	lsls	r2, r3, #3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d118      	bne.n	8002cde <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cce:	b662      	cpsie	i
}
 8002cd0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e09a      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d1d9      	bne.n	8002ca0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d2e:	b662      	cpsie	i
}
 8002d30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d64:	e042      	b.n	8002dec <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb84 	bl	8003478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e04c      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d118      	bne.n	8002dec <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f47f ae94 	bne.w	8002b1e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	; 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	00010004 	.word	0x00010004
 8002e20:	20000000 	.word	0x20000000
 8002e24:	14f8b589 	.word	0x14f8b589

08002e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f960 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e78:	d103      	bne.n	8002e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e05f      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	6a3a      	ldr	r2, [r7, #32]
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <I2C_RequestMemoryWrite+0x128>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f9bb 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04c      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	6a39      	ldr	r1, [r7, #32]
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fa46 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00d      	beq.n	8002eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d107      	bne.n	8002eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02b      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d105      	bne.n	8002f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e021      	b.n	8002f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa20 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e005      	b.n	8002f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00010002 	.word	0x00010002

08002f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8c2 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d103      	bne.n	8002fbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e0aa      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	4952      	ldr	r1, [pc, #328]	; (8003120 <I2C_RequestMemoryRead+0x1cc>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f91d 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e097      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f9a8 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e076      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	e021      	b.n	8003080 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f982 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e050      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	893b      	ldrh	r3, [r7, #8]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	6a39      	ldr	r1, [r7, #32]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f967 	bl	8003358 <I2C_WaitOnTXEFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	2b04      	cmp	r3, #4
 8003096:	d107      	bne.n	80030a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e035      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f82b 	bl	8003124 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e2:	d103      	bne.n	80030ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e013      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	6a3a      	ldr	r2, [r7, #32]
 8003104:	4906      	ldr	r1, [pc, #24]	; (8003120 <I2C_RequestMemoryRead+0x1cc>)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f886 	bl	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	00010002 	.word	0x00010002

08003124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003134:	e048      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d044      	beq.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7fe ff17 	bl	8001f70 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d139      	bne.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d10d      	bne.n	800317a <I2C_WaitOnFlagUntilTimeout+0x56>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	43da      	mvns	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4013      	ands	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	e00c      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x70>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	43da      	mvns	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d116      	bne.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e023      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d10d      	bne.n	80031ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	43da      	mvns	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	e00c      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	43da      	mvns	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4013      	ands	r3, r2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	429a      	cmp	r2, r3
 800320c:	d093      	beq.n	8003136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003226:	e071      	b.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003236:	d123      	bne.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f043 0204 	orr.w	r2, r3, #4
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e067      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d041      	beq.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fe72 	bl	8001f70 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d136      	bne.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10c      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	e00b      	b.n	80032da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf14      	ite	ne
 80032d4:	2301      	movne	r3, #1
 80032d6:	2300      	moveq	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d016      	beq.n	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e021      	b.n	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10c      	bne.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e00b      	b.n	8003348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f af6d 	bne.w	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003364:	e034      	b.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f8e3 	bl	8003532 <I2C_IsAcknowledgeFailed>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e034      	b.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d028      	beq.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fdf7 	bl	8001f70 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11d      	bne.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b80      	cmp	r3, #128	; 0x80
 80033a0:	d016      	beq.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e007      	b.n	80033e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d1c3      	bne.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f4:	e034      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f89b 	bl	8003532 <I2C_IsAcknowledgeFailed>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e034      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d028      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fdaf 	bl	8001f70 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11d      	bne.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d016      	beq.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e007      	b.n	8003470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d1c3      	bne.n	80033f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003484:	e049      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b10      	cmp	r3, #16
 8003492:	d119      	bne.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0210 	mvn.w	r2, #16
 800349c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e030      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c8:	f7fe fd52 	bl	8001f70 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d302      	bcc.n	80034de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d11d      	bne.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d016      	beq.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e007      	b.n	800352a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d1ae      	bne.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003548:	d11b      	bne.n	8003582 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003552:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0204 	orr.w	r2, r3, #4
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
	...

08003590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e272      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8087 	beq.w	80036be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b0:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d00c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035bc:	4b8f      	ldr	r3, [pc, #572]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d112      	bne.n	80035ee <HAL_RCC_OscConfig+0x5e>
 80035c8:	4b8c      	ldr	r3, [pc, #560]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d10b      	bne.n	80035ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d6:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d06c      	beq.n	80036bc <HAL_RCC_OscConfig+0x12c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d168      	bne.n	80036bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e24c      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x76>
 80035f8:	4b80      	ldr	r3, [pc, #512]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a7f      	ldr	r2, [pc, #508]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e02e      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x98>
 800360e:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7a      	ldr	r2, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b78      	ldr	r3, [pc, #480]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a77      	ldr	r2, [pc, #476]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e01d      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0xbc>
 8003632:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a71      	ldr	r2, [pc, #452]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a6e      	ldr	r2, [pc, #440]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0xd4>
 800364c:	4b6b      	ldr	r3, [pc, #428]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b68      	ldr	r3, [pc, #416]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fc80 	bl	8001f70 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fc7c 	bl	8001f70 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e200      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b5d      	ldr	r3, [pc, #372]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0xe4>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fc6c 	bl	8001f70 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe fc68 	bl	8001f70 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1ec      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x10c>
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d063      	beq.n	8003792 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ca:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d11c      	bne.n	800371c <HAL_RCC_OscConfig+0x18c>
 80036e2:	4b46      	ldr	r3, [pc, #280]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	4b43      	ldr	r3, [pc, #268]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x176>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1c0      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4939      	ldr	r1, [pc, #228]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	e03a      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d020      	beq.n	8003766 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b36      	ldr	r3, [pc, #216]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe fc21 	bl	8001f70 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe fc1d 	bl	8001f70 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e1a1      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	4927      	ldr	r1, [pc, #156]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
 8003764:	e015      	b.n	8003792 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b26      	ldr	r3, [pc, #152]	; (8003800 <HAL_RCC_OscConfig+0x270>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe fc00 	bl	8001f70 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003774:	f7fe fbfc 	bl	8001f70 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e180      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003786:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d03a      	beq.n	8003814 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d019      	beq.n	80037da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ac:	f7fe fbe0 	bl	8001f70 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fe fbdc 	bl	8001f70 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e160      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c6:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_RCC_OscConfig+0x26c>)
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037d2:	2001      	movs	r0, #1
 80037d4:	f000 fafe 	bl	8003dd4 <RCC_Delay>
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCC_OscConfig+0x274>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7fe fbc6 	bl	8001f70 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e6:	e00f      	b.n	8003808 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe fbc2 	bl	8001f70 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d908      	bls.n	8003808 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e146      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
 80037fa:	bf00      	nop
 80037fc:	40021000 	.word	0x40021000
 8003800:	42420000 	.word	0x42420000
 8003804:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	4b92      	ldr	r3, [pc, #584]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e9      	bne.n	80037e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a6 	beq.w	800396e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b8b      	ldr	r3, [pc, #556]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4b88      	ldr	r3, [pc, #544]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	4a87      	ldr	r2, [pc, #540]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	61d3      	str	r3, [r2, #28]
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b82      	ldr	r3, [pc, #520]	; (8003a58 <HAL_RCC_OscConfig+0x4c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b7f      	ldr	r3, [pc, #508]	; (8003a58 <HAL_RCC_OscConfig+0x4c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7e      	ldr	r2, [pc, #504]	; (8003a58 <HAL_RCC_OscConfig+0x4c8>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7fe fb83 	bl	8001f70 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fe fb7f 	bl	8001f70 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	; 0x64
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e103      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b75      	ldr	r3, [pc, #468]	; (8003a58 <HAL_RCC_OscConfig+0x4c8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x312>
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4a6e      	ldr	r2, [pc, #440]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6213      	str	r3, [r2, #32]
 80038a0:	e02d      	b.n	80038fe <HAL_RCC_OscConfig+0x36e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x334>
 80038aa:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	4a69      	ldr	r2, [pc, #420]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	6213      	str	r3, [r2, #32]
 80038b6:	4b67      	ldr	r3, [pc, #412]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	4a66      	ldr	r2, [pc, #408]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	f023 0304 	bic.w	r3, r3, #4
 80038c0:	6213      	str	r3, [r2, #32]
 80038c2:	e01c      	b.n	80038fe <HAL_RCC_OscConfig+0x36e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCC_OscConfig+0x356>
 80038cc:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a60      	ldr	r2, [pc, #384]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6213      	str	r3, [r2, #32]
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6213      	str	r3, [r2, #32]
 80038e4:	e00b      	b.n	80038fe <HAL_RCC_OscConfig+0x36e>
 80038e6:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4a5a      	ldr	r2, [pc, #360]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6213      	str	r3, [r2, #32]
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	4a57      	ldr	r2, [pc, #348]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003906:	f7fe fb33 	bl	8001f70 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe fb2f 	bl	8001f70 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0b1      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCC_OscConfig+0x37e>
 8003930:	e014      	b.n	800395c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fe fb1d 	bl	8001f70 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7fe fb19 	bl	8001f70 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	f241 3288 	movw	r2, #5000	; 0x1388
 8003948:	4293      	cmp	r3, r2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e09b      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	4b40      	ldr	r3, [pc, #256]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003962:	4b3c      	ldr	r3, [pc, #240]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800396c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8087 	beq.w	8003a86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b08      	cmp	r3, #8
 8003982:	d061      	beq.n	8003a48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d146      	bne.n	8003a1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398c:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_RCC_OscConfig+0x4cc>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003992:	f7fe faed 	bl	8001f70 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399a:	f7fe fae9 	bl	8001f70 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e06d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ac:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d108      	bne.n	80039d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039c2:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4921      	ldr	r1, [pc, #132]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d4:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a19      	ldr	r1, [r3, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	430b      	orrs	r3, r1
 80039e6:	491b      	ldr	r1, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4cc>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f2:	f7fe fabd 	bl	8001f70 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fe fab9 	bl	8001f70 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e03d      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x46a>
 8003a18:	e035      	b.n	8003a86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x4cc>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fe faa6 	bl	8001f70 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fe faa2 	bl	8001f70 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e026      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x498>
 8003a46:	e01e      	b.n	8003a86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e019      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x500>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d001      	beq.n	8003a86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0d0      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d910      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b67      	ldr	r3, [pc, #412]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	4965      	ldr	r1, [pc, #404]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b8      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d020      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af0:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a58      	ldr	r2, [pc, #352]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b50      	ldr	r3, [pc, #320]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	494d      	ldr	r1, [pc, #308]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d040      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d115      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e07f      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e073      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e06b      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b72:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4936      	ldr	r1, [pc, #216]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b84:	f7fe f9f4 	bl	8001f70 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7fe f9f0 	bl	8001f70 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e053      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 020c 	and.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d1eb      	bne.n	8003b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d210      	bcs.n	8003be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	4922      	ldr	r1, [pc, #136]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e032      	b.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d008      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4916      	ldr	r1, [pc, #88]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	490e      	ldr	r1, [pc, #56]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c22:	f000 f821 	bl	8003c68 <HAL_RCC_GetSysClockFreq>
 8003c26:	4602      	mov	r2, r0
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	490a      	ldr	r1, [pc, #40]	; (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	5ccb      	ldrb	r3, [r1, r3]
 8003c36:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3a:	4a09      	ldr	r2, [pc, #36]	; (8003c60 <HAL_RCC_ClockConfig+0x1cc>)
 8003c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_ClockConfig+0x1d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe f802 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40022000 	.word	0x40022000
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08007df8 	.word	0x08007df8
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004

08003c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d002      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x30>
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d003      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x36>
 8003c96:	e027      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9a:	613b      	str	r3, [r7, #16]
      break;
 8003c9c:	e027      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	0c9b      	lsrs	r3, r3, #18
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ca8:	5cd3      	ldrb	r3, [r2, r3]
 8003caa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x94>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	0c5b      	lsrs	r3, r3, #17
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	4a11      	ldr	r2, [pc, #68]	; (8003d08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cc2:	5cd3      	ldrb	r3, [r2, r3]
 8003cc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cca:	fb03 f202 	mul.w	r2, r3, r2
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003cdc:	fb02 f303 	mul.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	613b      	str	r3, [r7, #16]
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cea:	613b      	str	r3, [r7, #16]
      break;
 8003cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cee:	693b      	ldr	r3, [r7, #16]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	007a1200 	.word	0x007a1200
 8003d04:	08007e10 	.word	0x08007e10
 8003d08:	08007e20 	.word	0x08007e20
 8003d0c:	003d0900 	.word	0x003d0900

08003d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d14:	4b02      	ldr	r3, [pc, #8]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	20000000 	.word	0x20000000

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d28:	f7ff fff2 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4903      	ldr	r1, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08007e08 	.word	0x08007e08

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d50:	f7ff ffde 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	0adb      	lsrs	r3, r3, #11
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	08007e08 	.word	0x08007e08

08003d74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	220f      	movs	r2, #15
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_GetClockConfig+0x58>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <HAL_RCC_GetClockConfig+0x58>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_GetClockConfig+0x58>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_RCC_GetClockConfig+0x58>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0207 	and.w	r2, r3, #7
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40022000 	.word	0x40022000

08003dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <RCC_Delay+0x34>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <RCC_Delay+0x38>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df0:	bf00      	nop
  }
  while (Delay --);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <RCC_Delay+0x1c>
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	20000000 	.word	0x20000000
 8003e0c:	10624dd3 	.word	0x10624dd3

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e041      	b.n	8003ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f839 	bl	8003eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 f9b4 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e03a      	b.n	8003f4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_TIM_Base_Start_IT+0x98>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x58>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x58>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_TIM_Base_Start_IT+0x9c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_Base_Start_IT+0x58>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d111      	bne.n	8003f3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d010      	beq.n	8003f4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	e007      	b.n	8003f4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800

08003f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0202 	mvn.w	r2, #2
 8003f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8ed 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8e0 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8ef 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0204 	mvn.w	r2, #4
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8c3 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8b6 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8c5 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0208 	mvn.w	r2, #8
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f899 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f88c 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f89b 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2208      	movs	r2, #8
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f86f 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f862 	bl	8004174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f871 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd f972 	bl	80013cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8bf 	bl	8004292 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f835 	bl	80041aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d10e      	bne.n	800416c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b20      	cmp	r3, #32
 800415a:	d107      	bne.n	800416c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0220 	mvn.w	r2, #32
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88a 	bl	8004280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a25      	ldr	r2, [pc, #148]	; (800427c <TIM_Base_SetConfig+0xc0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_Base_SetConfig+0xc0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr

08004292 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e042      	b.n	800433c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fdb6 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f91d 	bl	8004528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800431c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	d16d      	bne.n	8004440 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_UART_Transmit+0x2c>
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e066      	b.n	8004442 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd fdf5 	bl	8001f70 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x6c>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043b8:	e02a      	b.n	8004410 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2200      	movs	r2, #0
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 f840 	bl	800444a <UART_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e036      	b.n	8004442 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e007      	b.n	8004402 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1cf      	bne.n	80043ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2200      	movs	r2, #0
 8004422:	2140      	movs	r1, #64	; 0x40
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f810 	bl	800444a <UART_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e006      	b.n	8004442 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b090      	sub	sp, #64	; 0x40
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445a:	e050      	b.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d04c      	beq.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004466:	2b00      	cmp	r3, #0
 8004468:	d007      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x30>
 800446a:	f7fd fd81 	bl	8001f70 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004476:	429a      	cmp	r2, r3
 8004478:	d241      	bcs.n	80044fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800449a:	637a      	str	r2, [r7, #52]	; 0x34
 800449c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	613b      	str	r3, [r7, #16]
   return(result);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ce:	623a      	str	r2, [r7, #32]
 80044d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	69f9      	ldr	r1, [r7, #28]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	61bb      	str	r3, [r7, #24]
   return(result);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e00f      	b.n	800451e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4013      	ands	r3, r2
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	bf0c      	ite	eq
 800450e:	2301      	moveq	r3, #1
 8004510:	2300      	movne	r3, #0
 8004512:	b2db      	uxtb	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	429a      	cmp	r2, r3
 800451a:	d09f      	beq.n	800445c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3740      	adds	r7, #64	; 0x40
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004562:	f023 030c 	bic.w	r3, r3, #12
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	430b      	orrs	r3, r1
 800456e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <UART_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d103      	bne.n	8004598 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004590:	f7ff fbdc 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	e002      	b.n	800459e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004598:	f7ff fbc4 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009a      	lsls	r2, r3, #2
 80045a8:	441a      	add	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	4a22      	ldr	r2, [pc, #136]	; (8004640 <UART_SetConfig+0x118>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	0119      	lsls	r1, r3, #4
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009a      	lsls	r2, r3, #2
 80045c8:	441a      	add	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <UART_SetConfig+0x118>)
 80045d6:	fba3 0302 	umull	r0, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2064      	movs	r0, #100	; 0x64
 80045de:	fb00 f303 	mul.w	r3, r0, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a15      	ldr	r2, [pc, #84]	; (8004640 <UART_SetConfig+0x118>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f4:	4419      	add	r1, r3
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009a      	lsls	r2, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	fbb2 f2f3 	udiv	r2, r2, r3
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <UART_SetConfig+0x118>)
 800460e:	fba3 0302 	umull	r0, r3, r3, r2
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	fb00 f303 	mul.w	r3, r0, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	3332      	adds	r3, #50	; 0x32
 8004620:	4a07      	ldr	r2, [pc, #28]	; (8004640 <UART_SetConfig+0x118>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	f003 020f 	and.w	r2, r3, #15
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	440a      	add	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40013800 	.word	0x40013800
 8004640:	51eb851f 	.word	0x51eb851f

08004644 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800464a:	f3ef 8305 	mrs	r3, IPSR
 800464e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004650:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	607b      	str	r3, [r7, #4]
  return(result);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <osKernelInitialize+0x32>
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <osKernelInitialize+0x60>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d109      	bne.n	800467e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800466a:	f3ef 8311 	mrs	r3, BASEPRI
 800466e:	603b      	str	r3, [r7, #0]
  return(result);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004676:	f06f 0305 	mvn.w	r3, #5
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e00c      	b.n	8004698 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <osKernelInitialize+0x60>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <osKernelInitialize+0x60>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e002      	b.n	8004698 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004698:	68fb      	ldr	r3, [r7, #12]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	20000394 	.word	0x20000394

080046a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ae:	f3ef 8305 	mrs	r3, IPSR
 80046b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ba:	f3ef 8310 	mrs	r3, PRIMASK
 80046be:	607b      	str	r3, [r7, #4]
  return(result);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <osKernelStart+0x32>
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <osKernelStart+0x64>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d109      	bne.n	80046e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046ce:	f3ef 8311 	mrs	r3, BASEPRI
 80046d2:	603b      	str	r3, [r7, #0]
  return(result);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046da:	f06f 0305 	mvn.w	r3, #5
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e00e      	b.n	8004700 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <osKernelStart+0x64>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <osKernelStart+0x64>)
 80046ec:	2202      	movs	r2, #2
 80046ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80046f0:	f001 fcf4 	bl	80060dc <vTaskStartScheduler>
      stat = osOK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e002      	b.n	8004700 <osKernelStart+0x58>
    } else {
      stat = osError;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004700:	68fb      	ldr	r3, [r7, #12]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000394 	.word	0x20000394

08004710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b092      	sub	sp, #72	; 0x48
 8004714:	af04      	add	r7, sp, #16
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004720:	f3ef 8305 	mrs	r3, IPSR
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004728:	2b00      	cmp	r3, #0
 800472a:	f040 8094 	bne.w	8004856 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472e:	f3ef 8310 	mrs	r3, PRIMASK
 8004732:	623b      	str	r3, [r7, #32]
  return(result);
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 808d 	bne.w	8004856 <osThreadNew+0x146>
 800473c:	4b48      	ldr	r3, [pc, #288]	; (8004860 <osThreadNew+0x150>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d106      	bne.n	8004752 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004744:	f3ef 8311 	mrs	r3, BASEPRI
 8004748:	61fb      	str	r3, [r7, #28]
  return(result);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f040 8082 	bne.w	8004856 <osThreadNew+0x146>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d07e      	beq.n	8004856 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800475c:	2318      	movs	r3, #24
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004760:	2300      	movs	r3, #0
 8004762:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004764:	f107 031b 	add.w	r3, r7, #27
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d045      	beq.n	8004802 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0x74>
        name = attr->name;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <osThreadNew+0x9a>
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	2b38      	cmp	r3, #56	; 0x38
 800479c:	d805      	bhi.n	80047aa <osThreadNew+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <osThreadNew+0x9e>
        return (NULL);
 80047aa:	2300      	movs	r3, #0
 80047ac:	e054      	b.n	8004858 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <osThreadNew+0xd4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2bbb      	cmp	r3, #187	; 0xbb
 80047cc:	d90a      	bls.n	80047e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osThreadNew+0xd4>
        mem = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e2:	e010      	b.n	8004806 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10c      	bne.n	8004806 <osThreadNew+0xf6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <osThreadNew+0xf6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <osThreadNew+0xf6>
          mem = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004800:	e001      	b.n	8004806 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004814:	9202      	str	r2, [sp, #8]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004820:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f001 fa76 	bl	8005d14 <xTaskCreateStatic>
 8004828:	4603      	mov	r3, r0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e013      	b.n	8004856 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	b29a      	uxth	r2, r3
 8004838:	f107 0314 	add.w	r3, r7, #20
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 fac0 	bl	8005dcc <xTaskCreate>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <osThreadNew+0x146>
          hTask = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3738      	adds	r7, #56	; 0x38
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000394 	.word	0x20000394

08004864 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	613b      	str	r3, [r7, #16]
  return(result);
 8004872:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10f      	bne.n	8004898 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004878:	f3ef 8310 	mrs	r3, PRIMASK
 800487c:	60fb      	str	r3, [r7, #12]
  return(result);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <osDelay+0x34>
 8004884:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <osDelay+0x58>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d109      	bne.n	80048a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800488c:	f3ef 8311 	mrs	r3, BASEPRI
 8004890:	60bb      	str	r3, [r7, #8]
  return(result);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <osDelay+0x3c>
    stat = osErrorISR;
 8004898:	f06f 0305 	mvn.w	r3, #5
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e007      	b.n	80048b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 fbe2 	bl	8006074 <vTaskDelay>
    }
  }

  return (stat);
 80048b0:	697b      	ldr	r3, [r7, #20]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000394 	.word	0x20000394

080048c0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f002 fceb 	bl	80072a4 <pvTimerGetTimerID>
 80048ce:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <TimerCallback+0x22>
    callb->func (callb->arg);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	6852      	ldr	r2, [r2, #4]
 80048de:	4610      	mov	r0, r2
 80048e0:	4798      	blx	r3
  }
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08e      	sub	sp, #56	; 0x38
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	460b      	mov	r3, r1
 80048fa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80048fc:	2300      	movs	r3, #0
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004900:	f3ef 8305 	mrs	r3, IPSR
 8004904:	61bb      	str	r3, [r7, #24]
  return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004908:	2b00      	cmp	r3, #0
 800490a:	d16a      	bne.n	80049e2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490c:	f3ef 8310 	mrs	r3, PRIMASK
 8004910:	617b      	str	r3, [r7, #20]
  return(result);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d164      	bne.n	80049e2 <osTimerNew+0xf6>
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <osTimerNew+0x100>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d105      	bne.n	800492c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004920:	f3ef 8311 	mrs	r3, BASEPRI
 8004924:	613b      	str	r3, [r7, #16]
  return(result);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d15a      	bne.n	80049e2 <osTimerNew+0xf6>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d057      	beq.n	80049e2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004932:	2008      	movs	r0, #8
 8004934:	f000 f890 	bl	8004a58 <pvPortMalloc>
 8004938:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d050      	beq.n	80049e2 <osTimerNew+0xf6>
      callb->func = func;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800494c:	7afb      	ldrb	r3, [r7, #11]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <osTimerNew+0x6c>
        reload = pdFALSE;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	e001      	b.n	800495c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800495c:	f04f 33ff 	mov.w	r3, #4294967295
 8004960:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004962:	2300      	movs	r3, #0
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <osTimerNew+0x8e>
          name = attr->name;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <osTimerNew+0xa4>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b2f      	cmp	r3, #47	; 0x2f
 8004988:	d902      	bls.n	8004990 <osTimerNew+0xa4>
          mem = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	623b      	str	r3, [r7, #32]
 800498e:	e00c      	b.n	80049aa <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d108      	bne.n	80049aa <osTimerNew+0xbe>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <osTimerNew+0xbe>
            mem = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	e001      	b.n	80049aa <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10c      	bne.n	80049ca <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <osTimerNew+0x104>)
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	2101      	movs	r1, #1
 80049c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049c2:	f002 f936 	bl	8006c32 <xTimerCreateStatic>
 80049c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80049c8:	e00b      	b.n	80049e2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <osTimerNew+0x104>)
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	2101      	movs	r1, #1
 80049da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049dc:	f002 f908 	bl	8006bf0 <xTimerCreate>
 80049e0:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3730      	adds	r7, #48	; 0x30
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000394 	.word	0x20000394
 80049f0:	080048c1 	.word	0x080048c1

080049f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <vApplicationGetIdleTaskMemory+0x28>)
 8004a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	20000398 	.word	0x20000398
 8004a20:	20000454 	.word	0x20000454

08004a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <vApplicationGetTimerTaskMemory+0x30>)
 8004a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000654 	.word	0x20000654
 8004a54:	20000710 	.word	0x20000710

08004a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a64:	f001 fbaa 	bl	80061bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a68:	4b58      	ldr	r3, [pc, #352]	; (8004bcc <pvPortMalloc+0x174>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a70:	f000 f910 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a74:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <pvPortMalloc+0x178>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 808e 	bne.w	8004b9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d069      	beq.n	8004b9e <pvPortMalloc+0x146>
 8004aca:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <pvPortMalloc+0x17c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d864      	bhi.n	8004b9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ad4:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <pvPortMalloc+0x180>)
 8004ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad8:	4b3f      	ldr	r3, [pc, #252]	; (8004bd8 <pvPortMalloc+0x180>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ade:	e004      	b.n	8004aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <pvPortMalloc+0xa4>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <pvPortMalloc+0x174>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d04b      	beq.n	8004b9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2308      	movs	r3, #8
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d91f      	bls.n	8004b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0xf8>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	613b      	str	r3, [r7, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f8f8 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <pvPortMalloc+0x17c>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a18      	ldr	r2, [pc, #96]	; (8004bd4 <pvPortMalloc+0x17c>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <pvPortMalloc+0x17c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <pvPortMalloc+0x184>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <pvPortMalloc+0x17c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <pvPortMalloc+0x184>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <pvPortMalloc+0x178>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b9e:	f001 fb1b 	bl	80061d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <pvPortMalloc+0x16a>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <pvPortMalloc+0x168>
	return pvReturn;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20001718 	.word	0x20001718
 8004bd0:	20001724 	.word	0x20001724
 8004bd4:	2000171c 	.word	0x2000171c
 8004bd8:	20001710 	.word	0x20001710
 8004bdc:	20001720 	.word	0x20001720

08004be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d048      	beq.n	8004c84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	425b      	negs	r3, r3
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <vPortFree+0xac>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <vPortFree+0x44>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <vPortFree+0x62>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60bb      	str	r3, [r7, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <vPortFree+0xac>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d019      	beq.n	8004c84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <vPortFree+0xac>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c68:	f001 faa8 	bl	80061bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <vPortFree+0xb0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <vPortFree+0xb0>)
 8004c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 f86c 	bl	8004d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c80:	f001 faaa 	bl	80061d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c84:	bf00      	nop
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	20001724 	.word	0x20001724
 8004c90:	2000171c 	.word	0x2000171c

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000b10 	.word	0x20000b10
 8004d44:	20001710 	.word	0x20001710
 8004d48:	20001718 	.word	0x20001718
 8004d4c:	20001720 	.word	0x20001720
 8004d50:	2000171c 	.word	0x2000171c
 8004d54:	20001724 	.word	0x20001724

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <prvInsertBlockIntoFreeList+0xa8>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8f7      	bhi.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr
 8004e00:	20001710 	.word	0x20001710
 8004e04:	20001718 	.word	0x20001718

08004e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f103 0208 	add.w	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f103 0208 	add.w	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0208 	add.w	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr

08004e46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b085      	sub	sp, #20
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	601a      	str	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d103      	bne.n	8004ec4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e00c      	b.n	8004ede <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	e002      	b.n	8004ed2 <vListInsert+0x2e>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d2f6      	bcs.n	8004ecc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	601a      	str	r2, [r3, #0]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6892      	ldr	r2, [r2, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6852      	ldr	r2, [r2, #4]
 8004f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d103      	bne.n	8004f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1e5a      	subs	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
	...

08004f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3b04      	subs	r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0201 	bic.w	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	3b04      	subs	r3, #4
 8004f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f98:	4a08      	ldr	r2, [pc, #32]	; (8004fbc <pxPortInitialiseStack+0x54>)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3b14      	subs	r3, #20
 8004fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b20      	subs	r3, #32
 8004fae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	08004fc1 	.word	0x08004fc1

08004fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <prvTaskExitError+0x54>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d00a      	beq.n	8004fea <prvTaskExitError+0x2a>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <prvTaskExitError+0x28>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	60bb      	str	r3, [r7, #8]
}
 8004ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ffe:	bf00      	nop
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0fc      	beq.n	8005000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005006:	bf00      	nop
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	2000000c 	.word	0x2000000c
	...

08005020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <pxCurrentTCBConst2>)
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	6808      	ldr	r0, [r1, #0]
 8005026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800502a:	f380 8809 	msr	PSP, r0
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8811 	msr	BASEPRI, r0
 800503a:	f04e 0e0d 	orr.w	lr, lr, #13
 800503e:	4770      	bx	lr

08005040 <pxCurrentTCBConst2>:
 8005040:	20001770 	.word	0x20001770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005048:	4806      	ldr	r0, [pc, #24]	; (8005064 <prvPortStartFirstTask+0x1c>)
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	6800      	ldr	r0, [r0, #0]
 800504e:	f380 8808 	msr	MSP, r0
 8005052:	b662      	cpsie	i
 8005054:	b661      	cpsie	f
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	df00      	svc	0
 8005060:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005062:	bf00      	nop
 8005064:	e000ed08 	.word	0xe000ed08

08005068 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800506e:	4b32      	ldr	r3, [pc, #200]	; (8005138 <xPortStartScheduler+0xd0>)
 8005070:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	22ff      	movs	r2, #255	; 0xff
 800507e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b2a      	ldr	r3, [pc, #168]	; (800513c <xPortStartScheduler+0xd4>)
 8005094:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <xPortStartScheduler+0xd8>)
 8005098:	2207      	movs	r2, #7
 800509a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800509c:	e009      	b.n	80050b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <xPortStartScheduler+0xd8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <xPortStartScheduler+0xd8>)
 80050a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b2:	78fb      	ldrb	r3, [r7, #3]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d0ef      	beq.n	800509e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050be:	4b20      	ldr	r3, [pc, #128]	; (8005140 <xPortStartScheduler+0xd8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f1c3 0307 	rsb	r3, r3, #7
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d00a      	beq.n	80050e0 <xPortStartScheduler+0x78>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60bb      	str	r3, [r7, #8]
}
 80050dc:	bf00      	nop
 80050de:	e7fe      	b.n	80050de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <xPortStartScheduler+0xd8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	4a16      	ldr	r2, [pc, #88]	; (8005140 <xPortStartScheduler+0xd8>)
 80050e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <xPortStartScheduler+0xd8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <xPortStartScheduler+0xd8>)
 80050f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <xPortStartScheduler+0xdc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <xPortStartScheduler+0xdc>)
 8005104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <xPortStartScheduler+0xdc>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a0d      	ldr	r2, [pc, #52]	; (8005144 <xPortStartScheduler+0xdc>)
 8005110:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005114:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005116:	f000 f8b9 	bl	800528c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <xPortStartScheduler+0xe0>)
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005120:	f7ff ff92 	bl	8005048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005124:	f001 f9c2 	bl	80064ac <vTaskSwitchContext>
	prvTaskExitError();
 8005128:	f7ff ff4a 	bl	8004fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	e000e400 	.word	0xe000e400
 800513c:	20001728 	.word	0x20001728
 8005140:	2000172c 	.word	0x2000172c
 8005144:	e000ed20 	.word	0xe000ed20
 8005148:	2000000c 	.word	0x2000000c

0800514c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
}
 8005164:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <vPortEnterCritical+0x58>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	4a0d      	ldr	r2, [pc, #52]	; (80051a4 <vPortEnterCritical+0x58>)
 800516e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <vPortEnterCritical+0x58>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10f      	bne.n	8005198 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <vPortEnterCritical+0x5c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <vPortEnterCritical+0x4c>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	603b      	str	r3, [r7, #0]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vPortEnterCritical+0x4a>
	}
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <vPortExitCritical+0x4c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <vPortExitCritical+0x24>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	607b      	str	r3, [r7, #4]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <vPortExitCritical+0x4c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <vPortExitCritical+0x4c>)
 80051d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051da:	4b07      	ldr	r3, [pc, #28]	; (80051f8 <vPortExitCritical+0x4c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d105      	bne.n	80051ee <vPortExitCritical+0x42>
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	2000000c 	.word	0x2000000c
 80051fc:	00000000 	.word	0x00000000

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005210:	6010      	str	r0, [r2, #0]
 8005212:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005216:	f04f 0050 	mov.w	r0, #80	; 0x50
 800521a:	f380 8811 	msr	BASEPRI, r0
 800521e:	f001 f945 	bl	80064ac <vTaskSwitchContext>
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005236:	f380 8809 	msr	PSP, r0
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	4770      	bx	lr

08005240 <pxCurrentTCBConst>:
 8005240:	20001770 	.word	0x20001770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop

08005248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	607b      	str	r3, [r7, #4]
}
 8005260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005262:	f001 f865 	bl	8006330 <xTaskIncrementTick>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <SysTick_Handler+0x40>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	2300      	movs	r3, #0
 8005276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f383 8811 	msr	BASEPRI, r3
}
 800527e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	e000ed04 	.word	0xe000ed04

0800528c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vPortSetupTimerInterrupt+0x30>)
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <vPortSetupTimerInterrupt+0x34>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <vPortSetupTimerInterrupt+0x38>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <vPortSetupTimerInterrupt+0x3c>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	4a08      	ldr	r2, [pc, #32]	; (80052cc <vPortSetupTimerInterrupt+0x40>)
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ae:	4b03      	ldr	r3, [pc, #12]	; (80052bc <vPortSetupTimerInterrupt+0x30>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	e000e010 	.word	0xe000e010
 80052c0:	e000e018 	.word	0xe000e018
 80052c4:	20000000 	.word	0x20000000
 80052c8:	10624dd3 	.word	0x10624dd3
 80052cc:	e000e014 	.word	0xe000e014

080052d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052d6:	f3ef 8305 	mrs	r3, IPSR
 80052da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d914      	bls.n	800530c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052e2:	4a16      	ldr	r2, [pc, #88]	; (800533c <vPortValidateInterruptPriority+0x6c>)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <vPortValidateInterruptPriority+0x70>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	7afa      	ldrb	r2, [r7, #11]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d20a      	bcs.n	800530c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	607b      	str	r3, [r7, #4]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <vPortValidateInterruptPriority+0x74>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005314:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <vPortValidateInterruptPriority+0x78>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d90a      	bls.n	8005332 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	603b      	str	r3, [r7, #0]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <vPortValidateInterruptPriority+0x60>
	}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	e000e3f0 	.word	0xe000e3f0
 8005340:	20001728 	.word	0x20001728
 8005344:	e000ed0c 	.word	0xe000ed0c
 8005348:	2000172c 	.word	0x2000172c

0800534c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueGenericReset+0x2a>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	60bb      	str	r3, [r7, #8]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005376:	f7ff fee9 	bl	800514c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a6:	3b01      	subs	r3, #1
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	22ff      	movs	r2, #255	; 0xff
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	22ff      	movs	r2, #255	; 0xff
 80053c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d114      	bne.n	80053f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01a      	beq.n	800540a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3310      	adds	r3, #16
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 f91b 	bl	8006614 <xTaskRemoveFromEventList>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d012      	beq.n	800540a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <xQueueGenericReset+0xcc>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	e009      	b.n	800540a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3310      	adds	r3, #16
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fd04 	bl	8004e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3324      	adds	r3, #36	; 0x24
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff fcff 	bl	8004e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800540a:	f7ff fecf 	bl	80051ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800540e:	2301      	movs	r3, #1
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08e      	sub	sp, #56	; 0x38
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <xQueueGenericCreateStatic+0x52>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <xQueueGenericCreateStatic+0x56>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <xQueueGenericCreateStatic+0x58>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	623b      	str	r3, [r7, #32]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueGenericCreateStatic+0x7e>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueGenericCreateStatic+0x82>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueGenericCreateStatic+0x84>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61fb      	str	r3, [r7, #28]
}
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054ba:	2350      	movs	r3, #80	; 0x50
 80054bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b50      	cmp	r3, #80	; 0x50
 80054c2:	d00a      	beq.n	80054da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	61bb      	str	r3, [r7, #24]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00d      	beq.n	8005500 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f805 	bl	800550a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005502:	4618      	mov	r0, r3
 8005504:	3730      	adds	r7, #48	; 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d103      	bne.n	8005526 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e002      	b.n	800552c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005538:	2101      	movs	r1, #1
 800553a:	69b8      	ldr	r0, [r7, #24]
 800553c:	f7ff ff06 	bl	800534c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08e      	sub	sp, #56	; 0x38
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800555e:	2300      	movs	r3, #0
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xQueueGenericSend+0x32>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <xQueueGenericSend+0x40>
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <xQueueGenericSend+0x44>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <xQueueGenericSend+0x46>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <xQueueGenericSend+0x60>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ac:	bf00      	nop
 80055ae:	e7fe      	b.n	80055ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d103      	bne.n	80055be <xQueueGenericSend+0x6e>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <xQueueGenericSend+0x72>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <xQueueGenericSend+0x74>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <xQueueGenericSend+0x8e>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	623b      	str	r3, [r7, #32]
}
 80055da:	bf00      	nop
 80055dc:	e7fe      	b.n	80055dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055de:	f001 f9df 	bl	80069a0 <xTaskGetSchedulerState>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <xQueueGenericSend+0x9e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <xQueueGenericSend+0xa2>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericSend+0xa4>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <xQueueGenericSend+0xbe>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61fb      	str	r3, [r7, #28]
}
 800560a:	bf00      	nop
 800560c:	e7fe      	b.n	800560c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800560e:	f7ff fd9d 	bl	800514c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <xQueueGenericSend+0xd4>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d129      	bne.n	8005678 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562a:	f000 fa07 	bl	8005a3c <prvCopyDataToQueue>
 800562e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	3324      	adds	r3, #36	; 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f000 ffe9 	bl	8006614 <xTaskRemoveFromEventList>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d013      	beq.n	8005670 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005648:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <xQueueGenericSend+0x1f8>)
 800564a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	e00a      	b.n	8005670 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005660:	4b39      	ldr	r3, [pc, #228]	; (8005748 <xQueueGenericSend+0x1f8>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005670:	f7ff fd9c 	bl	80051ac <vPortExitCritical>
				return pdPASS;
 8005674:	2301      	movs	r3, #1
 8005676:	e063      	b.n	8005740 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d103      	bne.n	8005686 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800567e:	f7ff fd95 	bl	80051ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005682:	2300      	movs	r3, #0
 8005684:	e05c      	b.n	8005740 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4618      	mov	r0, r3
 8005692:	f001 f823 	bl	80066dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005696:	2301      	movs	r3, #1
 8005698:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569a:	f7ff fd87 	bl	80051ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800569e:	f000 fd8d 	bl	80061bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a2:	f7ff fd53 	bl	800514c <vPortEnterCritical>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056ac:	b25b      	sxtb	r3, r3
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d103      	bne.n	80056bc <xQueueGenericSend+0x16c>
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c2:	b25b      	sxtb	r3, r3
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d103      	bne.n	80056d2 <xQueueGenericSend+0x182>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d2:	f7ff fd6b 	bl	80051ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056d6:	1d3a      	adds	r2, r7, #4
 80056d8:	f107 0314 	add.w	r3, r7, #20
 80056dc:	4611      	mov	r1, r2
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 f812 	bl	8006708 <xTaskCheckForTimeOut>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d124      	bne.n	8005734 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ec:	f000 fa9e 	bl	8005c2c <prvIsQueueFull>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d018      	beq.n	8005728 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	3310      	adds	r3, #16
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ff38 	bl	8006574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005706:	f000 fa29 	bl	8005b5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570a:	f000 fd65 	bl	80061d8 <xTaskResumeAll>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f47f af7c 	bne.w	800560e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005716:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <xQueueGenericSend+0x1f8>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	e772      	b.n	800560e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572a:	f000 fa17 	bl	8005b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800572e:	f000 fd53 	bl	80061d8 <xTaskResumeAll>
 8005732:	e76c      	b.n	800560e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005736:	f000 fa11 	bl	8005b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573a:	f000 fd4d 	bl	80061d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800573e:	2300      	movs	r3, #0
		}
	}
}
 8005740:	4618      	mov	r0, r3
 8005742:	3738      	adds	r7, #56	; 0x38
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	; 0x38
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d103      	bne.n	8005788 <xQueueGenericSendFromISR+0x3c>
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <xQueueGenericSendFromISR+0x40>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <xQueueGenericSendFromISR+0x42>
 800578c:	2300      	movs	r3, #0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	623b      	str	r3, [r7, #32]
}
 80057a4:	bf00      	nop
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSendFromISR+0x6a>
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <xQueueGenericSendFromISR+0x6e>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <xQueueGenericSendFromISR+0x70>
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10a      	bne.n	80057d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	f383 8811 	msr	BASEPRI, r3
 80057c8:	f3bf 8f6f 	isb	sy
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	61fb      	str	r3, [r7, #28]
}
 80057d2:	bf00      	nop
 80057d4:	e7fe      	b.n	80057d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057d6:	f7ff fd7b 	bl	80052d0 <vPortValidateInterruptPriority>
	__asm volatile
 80057da:	f3ef 8211 	mrs	r2, BASEPRI
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61ba      	str	r2, [r7, #24]
 80057f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <xQueueGenericSendFromISR+0xbc>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d12c      	bne.n	8005862 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	68b9      	ldr	r1, [r7, #8]
 8005816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005818:	f000 f910 	bl	8005a3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800581c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d112      	bne.n	800584c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	3324      	adds	r3, #36	; 0x24
 8005832:	4618      	mov	r0, r3
 8005834:	f000 feee 	bl	8006614 <xTaskRemoveFromEventList>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00e      	beq.n	800585c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e007      	b.n	800585c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800584c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005850:	3301      	adds	r3, #1
 8005852:	b2db      	uxtb	r3, r3
 8005854:	b25a      	sxtb	r2, r3
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800585c:	2301      	movs	r3, #1
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005860:	e001      	b.n	8005866 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005862:	2300      	movs	r3, #0
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
 8005866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005868:	613b      	str	r3, [r7, #16]
	__asm volatile
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f383 8811 	msr	BASEPRI, r3
}
 8005870:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005874:	4618      	mov	r0, r3
 8005876:	3738      	adds	r7, #56	; 0x38
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08c      	sub	sp, #48	; 0x30
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10a      	bne.n	80058ac <xQueueReceive+0x30>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	623b      	str	r3, [r7, #32]
}
 80058a8:	bf00      	nop
 80058aa:	e7fe      	b.n	80058aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <xQueueReceive+0x3e>
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueReceive+0x42>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueReceive+0x44>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueReceive+0x5e>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058da:	f001 f861 	bl	80069a0 <xTaskGetSchedulerState>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <xQueueReceive+0x6e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueReceive+0x72>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueReceive+0x74>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueReceive+0x8e>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61bb      	str	r3, [r7, #24]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800590a:	f7ff fc1f 	bl	800514c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01f      	beq.n	800595a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800591e:	f000 f8f7 	bl	8005b10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	1e5a      	subs	r2, r3, #1
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005934:	3310      	adds	r3, #16
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fe6c 	bl	8006614 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005942:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <xQueueReceive+0x1bc>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005952:	f7ff fc2b 	bl	80051ac <vPortExitCritical>
				return pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	e069      	b.n	8005a2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005960:	f7ff fc24 	bl	80051ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005964:	2300      	movs	r3, #0
 8005966:	e062      	b.n	8005a2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800596e:	f107 0310 	add.w	r3, r7, #16
 8005972:	4618      	mov	r0, r3
 8005974:	f000 feb2 	bl	80066dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800597c:	f7ff fc16 	bl	80051ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005980:	f000 fc1c 	bl	80061bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005984:	f7ff fbe2 	bl	800514c <vPortEnterCritical>
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005994:	d103      	bne.n	800599e <xQueueReceive+0x122>
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a4:	b25b      	sxtb	r3, r3
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d103      	bne.n	80059b4 <xQueueReceive+0x138>
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059b4:	f7ff fbfa 	bl	80051ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059b8:	1d3a      	adds	r2, r7, #4
 80059ba:	f107 0310 	add.w	r3, r7, #16
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fea1 	bl	8006708 <xTaskCheckForTimeOut>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d123      	bne.n	8005a14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ce:	f000 f917 	bl	8005c00 <prvIsQueueEmpty>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d017      	beq.n	8005a08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	3324      	adds	r3, #36	; 0x24
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	4611      	mov	r1, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fdc7 	bl	8006574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e8:	f000 f8b8 	bl	8005b5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059ec:	f000 fbf4 	bl	80061d8 <xTaskResumeAll>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d189      	bne.n	800590a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <xQueueReceive+0x1bc>)
 80059f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	e780      	b.n	800590a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a0a:	f000 f8a7 	bl	8005b5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a0e:	f000 fbe3 	bl	80061d8 <xTaskResumeAll>
 8005a12:	e77a      	b.n	800590a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a16:	f000 f8a1 	bl	8005b5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a1a:	f000 fbdd 	bl	80061d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a20:	f000 f8ee 	bl	8005c00 <prvIsQueueEmpty>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f43f af6f 	beq.w	800590a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3730      	adds	r7, #48	; 0x30
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10d      	bne.n	8005a76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d14d      	bne.n	8005afe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 ffb8 	bl	80069dc <xTaskPriorityDisinherit>
 8005a6c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	e043      	b.n	8005afe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d119      	bne.n	8005ab0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6898      	ldr	r0, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	461a      	mov	r2, r3
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	f001 fc58 	bl	800733c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	441a      	add	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d32b      	bcc.n	8005afe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	609a      	str	r2, [r3, #8]
 8005aae:	e026      	b.n	8005afe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68d8      	ldr	r0, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	f001 fc3e 	bl	800733c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	425b      	negs	r3, r3
 8005aca:	441a      	add	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d207      	bcs.n	8005aec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d105      	bne.n	8005afe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b06:	697b      	ldr	r3, [r7, #20]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	441a      	add	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d303      	bcc.n	8005b44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68d9      	ldr	r1, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f001 fbf4 	bl	800733c <memcpy>
	}
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b64:	f7ff faf2 	bl	800514c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b70:	e011      	b.n	8005b96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d012      	beq.n	8005ba0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3324      	adds	r3, #36	; 0x24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fd48 	bl	8006614 <xTaskRemoveFromEventList>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b8a:	f000 fe1f 	bl	80067cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	dce9      	bgt.n	8005b72 <prvUnlockQueue+0x16>
 8005b9e:	e000      	b.n	8005ba2 <prvUnlockQueue+0x46>
					break;
 8005ba0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	22ff      	movs	r2, #255	; 0xff
 8005ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005baa:	f7ff faff 	bl	80051ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bae:	f7ff facd 	bl	800514c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bba:	e011      	b.n	8005be0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d012      	beq.n	8005bea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fd23 	bl	8006614 <xTaskRemoveFromEventList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bd4:	f000 fdfa 	bl	80067cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dce9      	bgt.n	8005bbc <prvUnlockQueue+0x60>
 8005be8:	e000      	b.n	8005bec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005bf4:	f7ff fada 	bl	80051ac <vPortExitCritical>
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c08:	f7ff faa0 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e001      	b.n	8005c1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c1e:	f7ff fac5 	bl	80051ac <vPortExitCritical>

	return xReturn;
 8005c22:	68fb      	ldr	r3, [r7, #12]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c34:	f7ff fa8a 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d102      	bne.n	8005c4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e001      	b.n	8005c4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c4e:	f7ff faad 	bl	80051ac <vPortExitCritical>

	return xReturn;
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e014      	b.n	8005c96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <vQueueAddToRegistry+0x4c>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c78:	490b      	ldr	r1, [pc, #44]	; (8005ca8 <vQueueAddToRegistry+0x4c>)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <vQueueAddToRegistry+0x4c>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c8e:	e006      	b.n	8005c9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	d9e7      	bls.n	8005c6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	20001730 	.word	0x20001730

08005cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cbc:	f7ff fa46 	bl	800514c <vPortEnterCritical>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cc6:	b25b      	sxtb	r3, r3
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d103      	bne.n	8005cd6 <vQueueWaitForMessageRestricted+0x2a>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cdc:	b25b      	sxtb	r3, r3
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <vQueueWaitForMessageRestricted+0x40>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cec:	f7ff fa5e 	bl	80051ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fc5b 	bl	80065bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d06:	6978      	ldr	r0, [r7, #20]
 8005d08:	f7ff ff28 	bl	8005b5c <prvUnlockQueue>
	}
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af04      	add	r7, sp, #16
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	623b      	str	r3, [r7, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	61fb      	str	r3, [r7, #28]
}
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d5a:	23bc      	movs	r3, #188	; 0xbc
 8005d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2bbc      	cmp	r3, #188	; 0xbc
 8005d62:	d00a      	beq.n	8005d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <xTaskCreateStatic+0xaa>
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01b      	beq.n	8005dbe <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	f107 0314 	add.w	r3, r7, #20
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68b9      	ldr	r1, [r7, #8]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f851 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005db8:	f000 f8ec 	bl	8005f94 <prvAddNewTaskToReadyList>
 8005dbc:	e001      	b.n	8005dc2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dc2:	697b      	ldr	r3, [r7, #20]
	}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3728      	adds	r7, #40	; 0x28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08c      	sub	sp, #48	; 0x30
 8005dd0:	af04      	add	r7, sp, #16
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	603b      	str	r3, [r7, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ddc:	88fb      	ldrh	r3, [r7, #6]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fe39 	bl	8004a58 <pvPortMalloc>
 8005de6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005dee:	20bc      	movs	r0, #188	; 0xbc
 8005df0:	f7fe fe32 	bl	8004a58 <pvPortMalloc>
 8005df4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
 8005e02:	e005      	b.n	8005e10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f7fe feeb 	bl	8004be0 <vPortFree>
 8005e0a:	e001      	b.n	8005e10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d017      	beq.n	8005e46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9303      	str	r3, [sp, #12]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	9302      	str	r3, [sp, #8]
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f80f 	bl	8005e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3a:	69f8      	ldr	r0, [r7, #28]
 8005e3c:	f000 f8aa 	bl	8005f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e002      	b.n	8005e4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	461a      	mov	r2, r3
 8005e70:	21a5      	movs	r1, #165	; 0xa5
 8005e72:	f001 fa71 	bl	8007358 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e80:	3b01      	subs	r3, #1
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	617b      	str	r3, [r7, #20]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	e012      	b.n	8005edc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	7819      	ldrb	r1, [r3, #0]
 8005ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3334      	adds	r3, #52	; 0x34
 8005ec6:	460a      	mov	r2, r1
 8005ec8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d006      	beq.n	8005ee4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	d9e9      	bls.n	8005eb6 <prvInitialiseNewTask+0x5e>
 8005ee2:	e000      	b.n	8005ee6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005ee4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	2b37      	cmp	r3, #55	; 0x37
 8005ef2:	d901      	bls.n	8005ef8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ef4:	2337      	movs	r3, #55	; 0x37
 8005ef6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005efc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	2200      	movs	r2, #0
 8005f08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe ff99 	bl	8004e46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	3318      	adds	r3, #24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe ff94 	bl	8004e46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	3354      	adds	r3, #84	; 0x54
 8005f48:	2260      	movs	r2, #96	; 0x60
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fa03 	bl	8007358 <memset>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <prvInitialiseNewTask+0x130>)
 8005f56:	659a      	str	r2, [r3, #88]	; 0x58
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	4a0c      	ldr	r2, [pc, #48]	; (8005f8c <prvInitialiseNewTask+0x134>)
 8005f5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <prvInitialiseNewTask+0x138>)
 8005f62:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	68f9      	ldr	r1, [r7, #12]
 8005f68:	69b8      	ldr	r0, [r7, #24]
 8005f6a:	f7fe fffd 	bl	8004f68 <pxPortInitialiseStack>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f80:	bf00      	nop
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	08007e44 	.word	0x08007e44
 8005f8c:	08007e64 	.word	0x08007e64
 8005f90:	08007e24 	.word	0x08007e24

08005f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f9c:	f7ff f8d6 	bl	800514c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <prvAddNewTaskToReadyList+0xc4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	4a2c      	ldr	r2, [pc, #176]	; (8006058 <prvAddNewTaskToReadyList+0xc4>)
 8005fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005faa:	4b2c      	ldr	r3, [pc, #176]	; (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fb8:	4b27      	ldr	r3, [pc, #156]	; (8006058 <prvAddNewTaskToReadyList+0xc4>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d110      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fc0:	f000 fc28 	bl	8006814 <prvInitialiseTaskLists>
 8005fc4:	e00d      	b.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <prvAddNewTaskToReadyList+0xcc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fce:	4b23      	ldr	r3, [pc, #140]	; (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d802      	bhi.n	8005fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	; (800605c <prvAddNewTaskToReadyList+0xc8>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fe2:	4b20      	ldr	r3, [pc, #128]	; (8006064 <prvAddNewTaskToReadyList+0xd0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <prvAddNewTaskToReadyList+0xd0>)
 8005fea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fec:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <prvAddNewTaskToReadyList+0xd0>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <prvAddNewTaskToReadyList+0xd4>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d903      	bls.n	8006008 <prvAddNewTaskToReadyList+0x74>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	4a18      	ldr	r2, [pc, #96]	; (8006068 <prvAddNewTaskToReadyList+0xd4>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4a15      	ldr	r2, [pc, #84]	; (800606c <prvAddNewTaskToReadyList+0xd8>)
 8006016:	441a      	add	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	4619      	mov	r1, r3
 800601e:	4610      	mov	r0, r2
 8006020:	f7fe ff1d 	bl	8004e5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006024:	f7ff f8c2 	bl	80051ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006028:	4b0d      	ldr	r3, [pc, #52]	; (8006060 <prvAddNewTaskToReadyList+0xcc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <prvAddNewTaskToReadyList+0xc8>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	429a      	cmp	r2, r3
 800603c:	d207      	bcs.n	800604e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <prvAddNewTaskToReadyList+0xdc>)
 8006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20001c44 	.word	0x20001c44
 800605c:	20001770 	.word	0x20001770
 8006060:	20001c50 	.word	0x20001c50
 8006064:	20001c60 	.word	0x20001c60
 8006068:	20001c4c 	.word	0x20001c4c
 800606c:	20001774 	.word	0x20001774
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006086:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <vTaskDelay+0x60>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <vTaskDelay+0x30>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60bb      	str	r3, [r7, #8]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80060a4:	f000 f88a 	bl	80061bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fd04 	bl	8006ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060b0:	f000 f892 	bl	80061d8 <xTaskResumeAll>
 80060b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060bc:	4b06      	ldr	r3, [pc, #24]	; (80060d8 <vTaskDelay+0x64>)
 80060be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20001c6c 	.word	0x20001c6c
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ea:	463a      	mov	r2, r7
 80060ec:	1d39      	adds	r1, r7, #4
 80060ee:	f107 0308 	add.w	r3, r7, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc7e 	bl	80049f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	9202      	str	r2, [sp, #8]
 8006100:	9301      	str	r3, [sp, #4]
 8006102:	2300      	movs	r3, #0
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	460a      	mov	r2, r1
 800610a:	4924      	ldr	r1, [pc, #144]	; (800619c <vTaskStartScheduler+0xc0>)
 800610c:	4824      	ldr	r0, [pc, #144]	; (80061a0 <vTaskStartScheduler+0xc4>)
 800610e:	f7ff fe01 	bl	8005d14 <xTaskCreateStatic>
 8006112:	4603      	mov	r3, r0
 8006114:	4a23      	ldr	r2, [pc, #140]	; (80061a4 <vTaskStartScheduler+0xc8>)
 8006116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <vTaskStartScheduler+0xc8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e001      	b.n	800612a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d102      	bne.n	8006136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006130:	f000 fd16 	bl	8006b60 <xTimerCreateTimerTask>
 8006134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d11b      	bne.n	8006174 <vTaskStartScheduler+0x98>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <vTaskStartScheduler+0xcc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3354      	adds	r3, #84	; 0x54
 8006156:	4a15      	ldr	r2, [pc, #84]	; (80061ac <vTaskStartScheduler+0xd0>)
 8006158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <vTaskStartScheduler+0xd4>)
 800615c:	f04f 32ff 	mov.w	r2, #4294967295
 8006160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006162:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <vTaskStartScheduler+0xd8>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <vTaskStartScheduler+0xdc>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800616e:	f7fe ff7b 	bl	8005068 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006172:	e00e      	b.n	8006192 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d10a      	bne.n	8006192 <vTaskStartScheduler+0xb6>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <vTaskStartScheduler+0xb4>
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	08007d88 	.word	0x08007d88
 80061a0:	080067e5 	.word	0x080067e5
 80061a4:	20001c68 	.word	0x20001c68
 80061a8:	20001770 	.word	0x20001770
 80061ac:	20000010 	.word	0x20000010
 80061b0:	20001c64 	.word	0x20001c64
 80061b4:	20001c50 	.word	0x20001c50
 80061b8:	20001c48 	.word	0x20001c48

080061bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <vTaskSuspendAll+0x18>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	4a03      	ldr	r2, [pc, #12]	; (80061d4 <vTaskSuspendAll+0x18>)
 80061c8:	6013      	str	r3, [r2, #0]
}
 80061ca:	bf00      	nop
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20001c6c 	.word	0x20001c6c

080061d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061e6:	4b42      	ldr	r3, [pc, #264]	; (80062f0 <xTaskResumeAll+0x118>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <xTaskResumeAll+0x2c>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	603b      	str	r3, [r7, #0]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006204:	f7fe ffa2 	bl	800514c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006208:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <xTaskResumeAll+0x118>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	4a38      	ldr	r2, [pc, #224]	; (80062f0 <xTaskResumeAll+0x118>)
 8006210:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006212:	4b37      	ldr	r3, [pc, #220]	; (80062f0 <xTaskResumeAll+0x118>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d162      	bne.n	80062e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800621a:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <xTaskResumeAll+0x11c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d05e      	beq.n	80062e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006222:	e02f      	b.n	8006284 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006224:	4b34      	ldr	r3, [pc, #208]	; (80062f8 <xTaskResumeAll+0x120>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3318      	adds	r3, #24
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fe6f 	bl	8004f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fe6a 	bl	8004f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <xTaskResumeAll+0x124>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d903      	bls.n	8006254 <xTaskResumeAll+0x7c>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	4a2a      	ldr	r2, [pc, #168]	; (80062fc <xTaskResumeAll+0x124>)
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <xTaskResumeAll+0x128>)
 8006262:	441a      	add	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3304      	adds	r3, #4
 8006268:	4619      	mov	r1, r3
 800626a:	4610      	mov	r0, r2
 800626c:	f7fe fdf7 	bl	8004e5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	4b23      	ldr	r3, [pc, #140]	; (8006304 <xTaskResumeAll+0x12c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	429a      	cmp	r2, r3
 800627c:	d302      	bcc.n	8006284 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800627e:	4b22      	ldr	r3, [pc, #136]	; (8006308 <xTaskResumeAll+0x130>)
 8006280:	2201      	movs	r2, #1
 8006282:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <xTaskResumeAll+0x120>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1cb      	bne.n	8006224 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006292:	f000 fb61 	bl	8006958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006296:	4b1d      	ldr	r3, [pc, #116]	; (800630c <xTaskResumeAll+0x134>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062a2:	f000 f845 	bl	8006330 <xTaskIncrementTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <xTaskResumeAll+0x130>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1f1      	bne.n	80062a2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062be:	4b13      	ldr	r3, [pc, #76]	; (800630c <xTaskResumeAll+0x134>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062c4:	4b10      	ldr	r3, [pc, #64]	; (8006308 <xTaskResumeAll+0x130>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062cc:	2301      	movs	r3, #1
 80062ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <xTaskResumeAll+0x138>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062e0:	f7fe ff64 	bl	80051ac <vPortExitCritical>

	return xAlreadyYielded;
 80062e4:	68bb      	ldr	r3, [r7, #8]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20001c6c 	.word	0x20001c6c
 80062f4:	20001c44 	.word	0x20001c44
 80062f8:	20001c04 	.word	0x20001c04
 80062fc:	20001c4c 	.word	0x20001c4c
 8006300:	20001774 	.word	0x20001774
 8006304:	20001770 	.word	0x20001770
 8006308:	20001c58 	.word	0x20001c58
 800630c:	20001c54 	.word	0x20001c54
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800631a:	4b04      	ldr	r3, [pc, #16]	; (800632c <xTaskGetTickCount+0x18>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006320:	687b      	ldr	r3, [r7, #4]
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	20001c48 	.word	0x20001c48

08006330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633a:	4b51      	ldr	r3, [pc, #324]	; (8006480 <xTaskIncrementTick+0x150>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 808e 	bne.w	8006460 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006344:	4b4f      	ldr	r3, [pc, #316]	; (8006484 <xTaskIncrementTick+0x154>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800634c:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <xTaskIncrementTick+0x154>)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d120      	bne.n	800639a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006358:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <xTaskIncrementTick+0x158>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <xTaskIncrementTick+0x48>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	603b      	str	r3, [r7, #0]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xTaskIncrementTick+0x46>
 8006378:	4b43      	ldr	r3, [pc, #268]	; (8006488 <xTaskIncrementTick+0x158>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	4b43      	ldr	r3, [pc, #268]	; (800648c <xTaskIncrementTick+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a41      	ldr	r2, [pc, #260]	; (8006488 <xTaskIncrementTick+0x158>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	4a41      	ldr	r2, [pc, #260]	; (800648c <xTaskIncrementTick+0x15c>)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4b40      	ldr	r3, [pc, #256]	; (8006490 <xTaskIncrementTick+0x160>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	4a3f      	ldr	r2, [pc, #252]	; (8006490 <xTaskIncrementTick+0x160>)
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	f000 fadf 	bl	8006958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800639a:	4b3e      	ldr	r3, [pc, #248]	; (8006494 <xTaskIncrementTick+0x164>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d34e      	bcc.n	8006442 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063a4:	4b38      	ldr	r3, [pc, #224]	; (8006488 <xTaskIncrementTick+0x158>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <xTaskIncrementTick+0x82>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <xTaskIncrementTick+0x84>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063b8:	4b36      	ldr	r3, [pc, #216]	; (8006494 <xTaskIncrementTick+0x164>)
 80063ba:	f04f 32ff 	mov.w	r2, #4294967295
 80063be:	601a      	str	r2, [r3, #0]
					break;
 80063c0:	e03f      	b.n	8006442 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063c2:	4b31      	ldr	r3, [pc, #196]	; (8006488 <xTaskIncrementTick+0x158>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d203      	bcs.n	80063e2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063da:	4a2e      	ldr	r2, [pc, #184]	; (8006494 <xTaskIncrementTick+0x164>)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6013      	str	r3, [r2, #0]
						break;
 80063e0:	e02f      	b.n	8006442 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	3304      	adds	r3, #4
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fd94 	bl	8004f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	3318      	adds	r3, #24
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fe fd8b 	bl	8004f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <xTaskIncrementTick+0x168>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d903      	bls.n	8006412 <xTaskIncrementTick+0xe2>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a22      	ldr	r2, [pc, #136]	; (8006498 <xTaskIncrementTick+0x168>)
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4a1f      	ldr	r2, [pc, #124]	; (800649c <xTaskIncrementTick+0x16c>)
 8006420:	441a      	add	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	3304      	adds	r3, #4
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f7fe fd18 	bl	8004e5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <xTaskIncrementTick+0x170>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	429a      	cmp	r2, r3
 800643a:	d3b3      	bcc.n	80063a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800643c:	2301      	movs	r3, #1
 800643e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006440:	e7b0      	b.n	80063a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <xTaskIncrementTick+0x170>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4914      	ldr	r1, [pc, #80]	; (800649c <xTaskIncrementTick+0x16c>)
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d907      	bls.n	800646a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e004      	b.n	800646a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <xTaskIncrementTick+0x174>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <xTaskIncrementTick+0x174>)
 8006468:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <xTaskIncrementTick+0x178>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006472:	2301      	movs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006476:	697b      	ldr	r3, [r7, #20]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	20001c6c 	.word	0x20001c6c
 8006484:	20001c48 	.word	0x20001c48
 8006488:	20001bfc 	.word	0x20001bfc
 800648c:	20001c00 	.word	0x20001c00
 8006490:	20001c5c 	.word	0x20001c5c
 8006494:	20001c64 	.word	0x20001c64
 8006498:	20001c4c 	.word	0x20001c4c
 800649c:	20001774 	.word	0x20001774
 80064a0:	20001770 	.word	0x20001770
 80064a4:	20001c54 	.word	0x20001c54
 80064a8:	20001c58 	.word	0x20001c58

080064ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064b2:	4b2a      	ldr	r3, [pc, #168]	; (800655c <vTaskSwitchContext+0xb0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064ba:	4b29      	ldr	r3, [pc, #164]	; (8006560 <vTaskSwitchContext+0xb4>)
 80064bc:	2201      	movs	r2, #1
 80064be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064c0:	e046      	b.n	8006550 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064c2:	4b27      	ldr	r3, [pc, #156]	; (8006560 <vTaskSwitchContext+0xb4>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064c8:	4b26      	ldr	r3, [pc, #152]	; (8006564 <vTaskSwitchContext+0xb8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	e010      	b.n	80064f2 <vTaskSwitchContext+0x46>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <vTaskSwitchContext+0x40>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	607b      	str	r3, [r7, #4]
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <vTaskSwitchContext+0x3e>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	491d      	ldr	r1, [pc, #116]	; (8006568 <vTaskSwitchContext+0xbc>)
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0e4      	beq.n	80064d0 <vTaskSwitchContext+0x24>
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a15      	ldr	r2, [pc, #84]	; (8006568 <vTaskSwitchContext+0xbc>)
 8006512:	4413      	add	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	605a      	str	r2, [r3, #4]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	3308      	adds	r3, #8
 8006528:	429a      	cmp	r2, r3
 800652a:	d104      	bne.n	8006536 <vTaskSwitchContext+0x8a>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	605a      	str	r2, [r3, #4]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4a0b      	ldr	r2, [pc, #44]	; (800656c <vTaskSwitchContext+0xc0>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4a08      	ldr	r2, [pc, #32]	; (8006564 <vTaskSwitchContext+0xb8>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <vTaskSwitchContext+0xc0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3354      	adds	r3, #84	; 0x54
 800654c:	4a08      	ldr	r2, [pc, #32]	; (8006570 <vTaskSwitchContext+0xc4>)
 800654e:	6013      	str	r3, [r2, #0]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20001c6c 	.word	0x20001c6c
 8006560:	20001c58 	.word	0x20001c58
 8006564:	20001c4c 	.word	0x20001c4c
 8006568:	20001774 	.word	0x20001774
 800656c:	20001770 	.word	0x20001770
 8006570:	20000010 	.word	0x20000010

08006574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	60fb      	str	r3, [r7, #12]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800659a:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <vTaskPlaceOnEventList+0x44>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3318      	adds	r3, #24
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fe fc7e 	bl	8004ea4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065a8:	2101      	movs	r1, #1
 80065aa:	6838      	ldr	r0, [r7, #0]
 80065ac:	f000 fa84 	bl	8006ab8 <prvAddCurrentTaskToDelayedList>
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20001770 	.word	0x20001770

080065bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	617b      	str	r3, [r7, #20]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e4:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <vTaskPlaceOnEventListRestricted+0x54>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3318      	adds	r3, #24
 80065ea:	4619      	mov	r1, r3
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7fe fc36 	bl	8004e5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065f8:	f04f 33ff 	mov.w	r3, #4294967295
 80065fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	68b8      	ldr	r0, [r7, #8]
 8006602:	f000 fa59 	bl	8006ab8 <prvAddCurrentTaskToDelayedList>
	}
 8006606:	bf00      	nop
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20001770 	.word	0x20001770

08006614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60fb      	str	r3, [r7, #12]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	3318      	adds	r3, #24
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe fc65 	bl	8004f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800664a:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <xTaskRemoveFromEventList+0xb0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11d      	bne.n	800668e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3304      	adds	r3, #4
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fc5c 	bl	8004f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <xTaskRemoveFromEventList+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d903      	bls.n	8006670 <xTaskRemoveFromEventList+0x5c>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a16      	ldr	r2, [pc, #88]	; (80066c8 <xTaskRemoveFromEventList+0xb4>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <xTaskRemoveFromEventList+0xb8>)
 800667e:	441a      	add	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3304      	adds	r3, #4
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7fe fbe9 	bl	8004e5e <vListInsertEnd>
 800668c:	e005      	b.n	800669a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3318      	adds	r3, #24
 8006692:	4619      	mov	r1, r3
 8006694:	480e      	ldr	r0, [pc, #56]	; (80066d0 <xTaskRemoveFromEventList+0xbc>)
 8006696:	f7fe fbe2 	bl	8004e5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	4b0d      	ldr	r3, [pc, #52]	; (80066d4 <xTaskRemoveFromEventList+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d905      	bls.n	80066b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <xTaskRemoveFromEventList+0xc4>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	e001      	b.n	80066b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066b8:	697b      	ldr	r3, [r7, #20]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20001c6c 	.word	0x20001c6c
 80066c8:	20001c4c 	.word	0x20001c4c
 80066cc:	20001774 	.word	0x20001774
 80066d0:	20001c04 	.word	0x20001c04
 80066d4:	20001770 	.word	0x20001770
 80066d8:	20001c58 	.word	0x20001c58

080066dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <vTaskInternalSetTimeOutState+0x24>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <vTaskInternalSetTimeOutState+0x28>)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	605a      	str	r2, [r3, #4]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20001c5c 	.word	0x20001c5c
 8006704:	20001c48 	.word	0x20001c48

08006708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	613b      	str	r3, [r7, #16]
}
 800672a:	bf00      	nop
 800672c:	e7fe      	b.n	800672c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60fb      	str	r3, [r7, #12]
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800674a:	f7fe fcff 	bl	800514c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <xTaskCheckForTimeOut+0xbc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d102      	bne.n	800676e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e023      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <xTaskCheckForTimeOut+0xc0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d007      	beq.n	800678a <xTaskCheckForTimeOut+0x82>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006784:	2301      	movs	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	e015      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	429a      	cmp	r2, r3
 8006792:	d20b      	bcs.n	80067ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ff9b 	bl	80066dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	e004      	b.n	80067b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067b6:	f7fe fcf9 	bl	80051ac <vPortExitCritical>

	return xReturn;
 80067ba:	69fb      	ldr	r3, [r7, #28]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20001c48 	.word	0x20001c48
 80067c8:	20001c5c 	.word	0x20001c5c

080067cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067d0:	4b03      	ldr	r3, [pc, #12]	; (80067e0 <vTaskMissedYield+0x14>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
}
 80067d6:	bf00      	nop
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20001c58 	.word	0x20001c58

080067e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067ec:	f000 f852 	bl	8006894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvIdleTask+0x28>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d9f9      	bls.n	80067ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <prvIdleTask+0x2c>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006808:	e7f0      	b.n	80067ec <prvIdleTask+0x8>
 800680a:	bf00      	nop
 800680c:	20001774 	.word	0x20001774
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800681a:	2300      	movs	r3, #0
 800681c:	607b      	str	r3, [r7, #4]
 800681e:	e00c      	b.n	800683a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <prvInitialiseTaskLists+0x60>)
 800682c:	4413      	add	r3, r2
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe faea 	bl	8004e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3301      	adds	r3, #1
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b37      	cmp	r3, #55	; 0x37
 800683e:	d9ef      	bls.n	8006820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006840:	480d      	ldr	r0, [pc, #52]	; (8006878 <prvInitialiseTaskLists+0x64>)
 8006842:	f7fe fae1 	bl	8004e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006846:	480d      	ldr	r0, [pc, #52]	; (800687c <prvInitialiseTaskLists+0x68>)
 8006848:	f7fe fade 	bl	8004e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800684c:	480c      	ldr	r0, [pc, #48]	; (8006880 <prvInitialiseTaskLists+0x6c>)
 800684e:	f7fe fadb 	bl	8004e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006852:	480c      	ldr	r0, [pc, #48]	; (8006884 <prvInitialiseTaskLists+0x70>)
 8006854:	f7fe fad8 	bl	8004e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006858:	480b      	ldr	r0, [pc, #44]	; (8006888 <prvInitialiseTaskLists+0x74>)
 800685a:	f7fe fad5 	bl	8004e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <prvInitialiseTaskLists+0x78>)
 8006860:	4a05      	ldr	r2, [pc, #20]	; (8006878 <prvInitialiseTaskLists+0x64>)
 8006862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <prvInitialiseTaskLists+0x7c>)
 8006866:	4a05      	ldr	r2, [pc, #20]	; (800687c <prvInitialiseTaskLists+0x68>)
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20001774 	.word	0x20001774
 8006878:	20001bd4 	.word	0x20001bd4
 800687c:	20001be8 	.word	0x20001be8
 8006880:	20001c04 	.word	0x20001c04
 8006884:	20001c18 	.word	0x20001c18
 8006888:	20001c30 	.word	0x20001c30
 800688c:	20001bfc 	.word	0x20001bfc
 8006890:	20001c00 	.word	0x20001c00

08006894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800689a:	e019      	b.n	80068d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800689c:	f7fe fc56 	bl	800514c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80068a0:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <prvCheckTasksWaitingTermination+0x50>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fe fb31 	bl	8004f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068b2:	4b0d      	ldr	r3, [pc, #52]	; (80068e8 <prvCheckTasksWaitingTermination+0x54>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <prvCheckTasksWaitingTermination+0x54>)
 80068ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068bc:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068c6:	f7fe fc71 	bl	80051ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f810 	bl	80068f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <prvCheckTasksWaitingTermination+0x58>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e1      	bne.n	800689c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20001c18 	.word	0x20001c18
 80068e8:	20001c44 	.word	0x20001c44
 80068ec:	20001c2c 	.word	0x20001c2c

080068f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3354      	adds	r3, #84	; 0x54
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fdd5 	bl	80074ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006908:	2b00      	cmp	r3, #0
 800690a:	d108      	bne.n	800691e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe f965 	bl	8004be0 <vPortFree>
				vPortFree( pxTCB );
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe f962 	bl	8004be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800691c:	e018      	b.n	8006950 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006924:	2b01      	cmp	r3, #1
 8006926:	d103      	bne.n	8006930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fe f959 	bl	8004be0 <vPortFree>
	}
 800692e:	e00f      	b.n	8006950 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006936:	2b02      	cmp	r3, #2
 8006938:	d00a      	beq.n	8006950 <prvDeleteTCB+0x60>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	60fb      	str	r3, [r7, #12]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <prvDeleteTCB+0x5e>
	}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <prvResetNextTaskUnblockTime+0x40>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <prvResetNextTaskUnblockTime+0x14>
 8006968:	2301      	movs	r3, #1
 800696a:	e000      	b.n	800696e <prvResetNextTaskUnblockTime+0x16>
 800696c:	2300      	movs	r3, #0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006972:	4b0a      	ldr	r3, [pc, #40]	; (800699c <prvResetNextTaskUnblockTime+0x44>)
 8006974:	f04f 32ff 	mov.w	r2, #4294967295
 8006978:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800697a:	e008      	b.n	800698e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <prvResetNextTaskUnblockTime+0x40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4a04      	ldr	r2, [pc, #16]	; (800699c <prvResetNextTaskUnblockTime+0x44>)
 800698c:	6013      	str	r3, [r2, #0]
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr
 8006998:	20001bfc 	.word	0x20001bfc
 800699c:	20001c64 	.word	0x20001c64

080069a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <xTaskGetSchedulerState+0x34>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ae:	2301      	movs	r3, #1
 80069b0:	607b      	str	r3, [r7, #4]
 80069b2:	e008      	b.n	80069c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b4:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <xTaskGetSchedulerState+0x38>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d102      	bne.n	80069c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069bc:	2302      	movs	r3, #2
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	e001      	b.n	80069c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069c2:	2300      	movs	r3, #0
 80069c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069c6:	687b      	ldr	r3, [r7, #4]
	}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20001c50 	.word	0x20001c50
 80069d8:	20001c6c 	.word	0x20001c6c

080069dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d056      	beq.n	8006aa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <xTaskPriorityDisinherit+0xd0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d00a      	beq.n	8006a12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	60fb      	str	r3, [r7, #12]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	60bb      	str	r3, [r7, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d02c      	beq.n	8006aa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d128      	bne.n	8006aa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fa5e 	bl	8004f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a70:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <xTaskPriorityDisinherit+0xd4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d903      	bls.n	8006a80 <xTaskPriorityDisinherit+0xa4>
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	4a0c      	ldr	r2, [pc, #48]	; (8006ab0 <xTaskPriorityDisinherit+0xd4>)
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <xTaskPriorityDisinherit+0xd8>)
 8006a8e:	441a      	add	r2, r3
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f7fe f9e1 	bl	8004e5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006aa0:	697b      	ldr	r3, [r7, #20]
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20001770 	.word	0x20001770
 8006ab0:	20001c4c 	.word	0x20001c4c
 8006ab4:	20001774 	.word	0x20001774

08006ab8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ac2:	4b21      	ldr	r3, [pc, #132]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ac8:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3304      	adds	r3, #4
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fa20 	bl	8004f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ada:	d10a      	bne.n	8006af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4819      	ldr	r0, [pc, #100]	; (8006b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8006aec:	f7fe f9b7 	bl	8004e5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006af0:	e026      	b.n	8006b40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006afa:	4b14      	ldr	r3, [pc, #80]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d209      	bcs.n	8006b1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b0f      	ldr	r3, [pc, #60]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f7fe f9c4 	bl	8004ea4 <vListInsert>
}
 8006b1c:	e010      	b.n	8006b40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7fe f9ba 	bl	8004ea4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d202      	bcs.n	8006b40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b3a:	4a08      	ldr	r2, [pc, #32]	; (8006b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6013      	str	r3, [r2, #0]
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	20001c48 	.word	0x20001c48
 8006b4c:	20001770 	.word	0x20001770
 8006b50:	20001c30 	.word	0x20001c30
 8006b54:	20001c00 	.word	0x20001c00
 8006b58:	20001bfc 	.word	0x20001bfc
 8006b5c:	20001c64 	.word	0x20001c64

08006b60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	; 0x28
 8006b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b6a:	f000 fb5b 	bl	8007224 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <xTimerCreateTimerTask+0x80>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d021      	beq.n	8006bba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b7e:	1d3a      	adds	r2, r7, #4
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fd ff4b 	bl	8004a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	9202      	str	r2, [sp, #8]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2302      	movs	r3, #2
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	460a      	mov	r2, r1
 8006ba0:	4910      	ldr	r1, [pc, #64]	; (8006be4 <xTimerCreateTimerTask+0x84>)
 8006ba2:	4811      	ldr	r0, [pc, #68]	; (8006be8 <xTimerCreateTimerTask+0x88>)
 8006ba4:	f7ff f8b6 	bl	8005d14 <xTaskCreateStatic>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <xTimerCreateTimerTask+0x8c>)
 8006bac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bae:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <xTimerCreateTimerTask+0x8c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	613b      	str	r3, [r7, #16]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bd6:	697b      	ldr	r3, [r7, #20]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001ca0 	.word	0x20001ca0
 8006be4:	08007d90 	.word	0x08007d90
 8006be8:	08006e2d 	.word	0x08006e2d
 8006bec:	20001ca4 	.word	0x20001ca4

08006bf0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006bfe:	2030      	movs	r0, #48	; 0x30
 8006c00:	f7fd ff2a 	bl	8004a58 <pvPortMalloc>
 8006c04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00d      	beq.n	8006c28 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f846 	bl	8006cac <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006c28:	697b      	ldr	r3, [r7, #20]
	}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08a      	sub	sp, #40	; 0x28
 8006c36:	af02      	add	r7, sp, #8
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006c40:	2330      	movs	r3, #48	; 0x30
 8006c42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2b30      	cmp	r3, #48	; 0x30
 8006c48:	d00a      	beq.n	8006c60 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61bb      	str	r3, [r7, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <xTimerCreateStatic+0x4a>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	617b      	str	r3, [r7, #20]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f809 	bl	8006cac <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
	}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10a      	bne.n	8006cd6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	617b      	str	r3, [r7, #20]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006cdc:	f000 faa2 	bl	8007224 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	6a3a      	ldr	r2, [r7, #32]
 8006cfc:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe f89f 	bl	8004e46 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006d08:	bf00      	nop
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	623b      	str	r3, [r7, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d3e:	4b1a      	ldr	r3, [pc, #104]	; (8006da8 <xTimerGenericCommand+0x98>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d02a      	beq.n	8006d9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b05      	cmp	r3, #5
 8006d56:	dc18      	bgt.n	8006d8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d58:	f7ff fe22 	bl	80069a0 <xTaskGetSchedulerState>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d109      	bne.n	8006d76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d62:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <xTimerGenericCommand+0x98>)
 8006d64:	6818      	ldr	r0, [r3, #0]
 8006d66:	f107 0110 	add.w	r1, r7, #16
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d6e:	f7fe fbef 	bl	8005550 <xQueueGenericSend>
 8006d72:	6278      	str	r0, [r7, #36]	; 0x24
 8006d74:	e012      	b.n	8006d9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <xTimerGenericCommand+0x98>)
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	f107 0110 	add.w	r1, r7, #16
 8006d7e:	2300      	movs	r3, #0
 8006d80:	2200      	movs	r2, #0
 8006d82:	f7fe fbe5 	bl	8005550 <xQueueGenericSend>
 8006d86:	6278      	str	r0, [r7, #36]	; 0x24
 8006d88:	e008      	b.n	8006d9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d8a:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <xTimerGenericCommand+0x98>)
 8006d8c:	6818      	ldr	r0, [r3, #0]
 8006d8e:	f107 0110 	add.w	r1, r7, #16
 8006d92:	2300      	movs	r3, #0
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	f7fe fcd9 	bl	800574c <xQueueGenericSendFromISR>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	20001ca0 	.word	0x20001ca0

08006dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db6:	4b1c      	ldr	r3, [pc, #112]	; (8006e28 <prvProcessExpiredTimer+0x7c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fe f8a5 	bl	8004f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d122      	bne.n	8006e18 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	18d1      	adds	r1, r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	6978      	ldr	r0, [r7, #20]
 8006de0:	f000 f8c8 	bl	8006f74 <prvInsertTimerInActiveList>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dea:	2300      	movs	r3, #0
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	2300      	movs	r3, #0
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	2100      	movs	r1, #0
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	f7ff ff8b 	bl	8006d10 <xTimerGenericCommand>
 8006dfa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	6978      	ldr	r0, [r7, #20]
 8006e1e:	4798      	blx	r3
}
 8006e20:	bf00      	nop
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20001c98 	.word	0x20001c98

08006e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e34:	f107 0308 	add.w	r3, r7, #8
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 f857 	bl	8006eec <prvGetNextExpireTime>
 8006e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4619      	mov	r1, r3
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f803 	bl	8006e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e4a:	f000 f8d5 	bl	8006ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e4e:	e7f1      	b.n	8006e34 <prvTimerTask+0x8>

08006e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e5a:	f7ff f9af 	bl	80061bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f866 	bl	8006f34 <prvSampleTimeNow>
 8006e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d130      	bne.n	8006ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <prvProcessTimerOrBlockTask+0x3c>
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d806      	bhi.n	8006e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e7e:	f7ff f9ab 	bl	80061d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff ff91 	bl	8006dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e8a:	e024      	b.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e92:	4b13      	ldr	r3, [pc, #76]	; (8006ee0 <prvProcessTimerOrBlockTask+0x90>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf0c      	ite	eq
 8006e9c:	2301      	moveq	r3, #1
 8006e9e:	2300      	movne	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	; (8006ee4 <prvProcessTimerOrBlockTask+0x94>)
 8006ea6:	6818      	ldr	r0, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7fe fefb 	bl	8005cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eb6:	f7ff f98f 	bl	80061d8 <xTaskResumeAll>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <prvProcessTimerOrBlockTask+0x98>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
}
 8006ed0:	e001      	b.n	8006ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ed2:	f7ff f981 	bl	80061d8 <xTaskResumeAll>
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20001c9c 	.word	0x20001c9c
 8006ee4:	20001ca0 	.word	0x20001ca0
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ef4:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <prvGetNextExpireTime+0x44>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d105      	bne.n	8006f1e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f12:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <prvGetNextExpireTime+0x44>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e001      	b.n	8006f22 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	20001c98 	.word	0x20001c98

08006f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f3c:	f7ff f9ea 	bl	8006314 <xTaskGetTickCount>
 8006f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <prvSampleTimeNow+0x3c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d205      	bcs.n	8006f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f4c:	f000 f908 	bl	8007160 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	e002      	b.n	8006f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f5e:	4a04      	ldr	r2, [pc, #16]	; (8006f70 <prvSampleTimeNow+0x3c>)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20001ca8 	.word	0x20001ca8

08006f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d812      	bhi.n	8006fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e01b      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fae:	4b10      	ldr	r3, [pc, #64]	; (8006ff0 <prvInsertTimerInActiveList+0x7c>)
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fd ff73 	bl	8004ea4 <vListInsert>
 8006fbe:	e012      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d206      	bcs.n	8006fd6 <prvInsertTimerInActiveList+0x62>
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	e007      	b.n	8006fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <prvInsertTimerInActiveList+0x80>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f7fd ff5f 	bl	8004ea4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001c9c 	.word	0x20001c9c
 8006ff4:	20001c98 	.word	0x20001c98

08006ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08e      	sub	sp, #56	; 0x38
 8006ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ffe:	e09d      	b.n	800713c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da18      	bge.n	8007038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	3304      	adds	r3, #4
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61fb      	str	r3, [r7, #28]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800702e:	6850      	ldr	r0, [r2, #4]
 8007030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007032:	6892      	ldr	r2, [r2, #8]
 8007034:	4611      	mov	r1, r2
 8007036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	db7d      	blt.n	800713a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d004      	beq.n	8007054 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	3304      	adds	r3, #4
 800704e:	4618      	mov	r0, r3
 8007050:	f7fd ff60 	bl	8004f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007054:	463b      	mov	r3, r7
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff ff6c 	bl	8006f34 <prvSampleTimeNow>
 800705c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b09      	cmp	r3, #9
 8007062:	d86b      	bhi.n	800713c <prvProcessReceivedCommands+0x144>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <prvProcessReceivedCommands+0x74>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	08007095 	.word	0x08007095
 8007070:	08007095 	.word	0x08007095
 8007074:	08007095 	.word	0x08007095
 8007078:	0800713d 	.word	0x0800713d
 800707c:	080070f1 	.word	0x080070f1
 8007080:	08007129 	.word	0x08007129
 8007084:	08007095 	.word	0x08007095
 8007088:	08007095 	.word	0x08007095
 800708c:	0800713d 	.word	0x0800713d
 8007090:	080070f1 	.word	0x080070f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	18d1      	adds	r1, r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a2:	f7ff ff67 	bl	8006f74 <prvInsertTimerInActiveList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d047      	beq.n	800713c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d13f      	bne.n	800713c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	441a      	add	r2, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2300      	movs	r3, #0
 80070ca:	2100      	movs	r1, #0
 80070cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ce:	f7ff fe1f 	bl	8006d10 <xTimerGenericCommand>
 80070d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d130      	bne.n	800713c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61bb      	str	r3, [r7, #24]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10a      	bne.n	8007114 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	18d1      	adds	r1, r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007122:	f7ff ff27 	bl	8006f74 <prvInsertTimerInActiveList>
					break;
 8007126:	e009      	b.n	800713c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007134:	f7fd fd54 	bl	8004be0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007138:	e000      	b.n	800713c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800713a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713c:	4b07      	ldr	r3, [pc, #28]	; (800715c <prvProcessReceivedCommands+0x164>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	1d39      	adds	r1, r7, #4
 8007142:	2200      	movs	r2, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe fb99 	bl	800587c <xQueueReceive>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	f47f af57 	bne.w	8007000 <prvProcessReceivedCommands+0x8>
	}
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	3730      	adds	r7, #48	; 0x30
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	20001ca0 	.word	0x20001ca0

08007160 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007166:	e045      	b.n	80071f4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007168:	4b2c      	ldr	r3, [pc, #176]	; (800721c <prvSwitchTimerLists+0xbc>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007172:	4b2a      	ldr	r3, [pc, #168]	; (800721c <prvSwitchTimerLists+0xbc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3304      	adds	r3, #4
 8007180:	4618      	mov	r0, r3
 8007182:	f7fd fec7 	bl	8004f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d12e      	bne.n	80071f4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d90e      	bls.n	80071c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071b4:	4b19      	ldr	r3, [pc, #100]	; (800721c <prvSwitchTimerLists+0xbc>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7fd fe70 	bl	8004ea4 <vListInsert>
 80071c4:	e016      	b.n	80071f4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071c6:	2300      	movs	r3, #0
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f7ff fd9d 	bl	8006d10 <xTimerGenericCommand>
 80071d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f4:	4b09      	ldr	r3, [pc, #36]	; (800721c <prvSwitchTimerLists+0xbc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1b4      	bne.n	8007168 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071fe:	4b07      	ldr	r3, [pc, #28]	; (800721c <prvSwitchTimerLists+0xbc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <prvSwitchTimerLists+0xc0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a04      	ldr	r2, [pc, #16]	; (800721c <prvSwitchTimerLists+0xbc>)
 800720a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800720c:	4a04      	ldr	r2, [pc, #16]	; (8007220 <prvSwitchTimerLists+0xc0>)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6013      	str	r3, [r2, #0]
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20001c98 	.word	0x20001c98
 8007220:	20001c9c 	.word	0x20001c9c

08007224 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800722a:	f7fd ff8f 	bl	800514c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800722e:	4b15      	ldr	r3, [pc, #84]	; (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d120      	bne.n	8007278 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007236:	4814      	ldr	r0, [pc, #80]	; (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007238:	f7fd fde6 	bl	8004e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800723c:	4813      	ldr	r0, [pc, #76]	; (800728c <prvCheckForValidListAndQueue+0x68>)
 800723e:	f7fd fde3 	bl	8004e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007242:	4b13      	ldr	r3, [pc, #76]	; (8007290 <prvCheckForValidListAndQueue+0x6c>)
 8007244:	4a10      	ldr	r2, [pc, #64]	; (8007288 <prvCheckForValidListAndQueue+0x64>)
 8007246:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007248:	4b12      	ldr	r3, [pc, #72]	; (8007294 <prvCheckForValidListAndQueue+0x70>)
 800724a:	4a10      	ldr	r2, [pc, #64]	; (800728c <prvCheckForValidListAndQueue+0x68>)
 800724c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800724e:	2300      	movs	r3, #0
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4b11      	ldr	r3, [pc, #68]	; (8007298 <prvCheckForValidListAndQueue+0x74>)
 8007254:	4a11      	ldr	r2, [pc, #68]	; (800729c <prvCheckForValidListAndQueue+0x78>)
 8007256:	2110      	movs	r1, #16
 8007258:	200a      	movs	r0, #10
 800725a:	f7fe f8df 	bl	800541c <xQueueGenericCreateStatic>
 800725e:	4603      	mov	r3, r0
 8007260:	4a08      	ldr	r2, [pc, #32]	; (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007262:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <prvCheckForValidListAndQueue+0x60>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <prvCheckForValidListAndQueue+0x60>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	490b      	ldr	r1, [pc, #44]	; (80072a0 <prvCheckForValidListAndQueue+0x7c>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fcf2 	bl	8005c5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007278:	f7fd ff98 	bl	80051ac <vPortExitCritical>
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20001ca0 	.word	0x20001ca0
 8007288:	20001c70 	.word	0x20001c70
 800728c:	20001c84 	.word	0x20001c84
 8007290:	20001c98 	.word	0x20001c98
 8007294:	20001c9c 	.word	0x20001c9c
 8007298:	20001d4c 	.word	0x20001d4c
 800729c:	20001cac 	.word	0x20001cac
 80072a0:	08007d98 	.word	0x08007d98

080072a4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <pvTimerGetTimerID+0x28>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80072cc:	f7fd ff3e 	bl	800514c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80072d6:	f7fd ff69 	bl	80051ac <vPortExitCritical>

	return pvReturn;
 80072da:	693b      	ldr	r3, [r7, #16]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <__errno>:
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <__errno+0x8>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000010 	.word	0x20000010

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	2600      	movs	r6, #0
 80072f4:	4d0c      	ldr	r5, [pc, #48]	; (8007328 <__libc_init_array+0x38>)
 80072f6:	4c0d      	ldr	r4, [pc, #52]	; (800732c <__libc_init_array+0x3c>)
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	42a6      	cmp	r6, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	f000 fd06 	bl	8007d10 <_init>
 8007304:	2600      	movs	r6, #0
 8007306:	4d0a      	ldr	r5, [pc, #40]	; (8007330 <__libc_init_array+0x40>)
 8007308:	4c0a      	ldr	r4, [pc, #40]	; (8007334 <__libc_init_array+0x44>)
 800730a:	1b64      	subs	r4, r4, r5
 800730c:	10a4      	asrs	r4, r4, #2
 800730e:	42a6      	cmp	r6, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f855 3b04 	ldr.w	r3, [r5], #4
 8007318:	4798      	blx	r3
 800731a:	3601      	adds	r6, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007322:	4798      	blx	r3
 8007324:	3601      	adds	r6, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	08007eb8 	.word	0x08007eb8
 800732c:	08007eb8 	.word	0x08007eb8
 8007330:	08007eb8 	.word	0x08007eb8
 8007334:	08007ebc 	.word	0x08007ebc

08007338 <__retarget_lock_acquire_recursive>:
 8007338:	4770      	bx	lr

0800733a <__retarget_lock_release_recursive>:
 800733a:	4770      	bx	lr

0800733c <memcpy>:
 800733c:	440a      	add	r2, r1
 800733e:	4291      	cmp	r1, r2
 8007340:	f100 33ff 	add.w	r3, r0, #4294967295
 8007344:	d100      	bne.n	8007348 <memcpy+0xc>
 8007346:	4770      	bx	lr
 8007348:	b510      	push	{r4, lr}
 800734a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734e:	4291      	cmp	r1, r2
 8007350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007354:	d1f9      	bne.n	800734a <memcpy+0xe>
 8007356:	bd10      	pop	{r4, pc}

08007358 <memset>:
 8007358:	4603      	mov	r3, r0
 800735a:	4402      	add	r2, r0
 800735c:	4293      	cmp	r3, r2
 800735e:	d100      	bne.n	8007362 <memset+0xa>
 8007360:	4770      	bx	lr
 8007362:	f803 1b01 	strb.w	r1, [r3], #1
 8007366:	e7f9      	b.n	800735c <memset+0x4>

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0e      	ldr	r6, [pc, #56]	; (80073a4 <sbrk_aligned+0x3c>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 f8f6 	bl	8007564 <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 f8f1 	bl	8007564 <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d00a      	beq.n	800739c <sbrk_aligned+0x34>
 8007386:	1cc4      	adds	r4, r0, #3
 8007388:	f024 0403 	bic.w	r4, r4, #3
 800738c:	42a0      	cmp	r0, r4
 800738e:	d007      	beq.n	80073a0 <sbrk_aligned+0x38>
 8007390:	1a21      	subs	r1, r4, r0
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f8e6 	bl	8007564 <_sbrk_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d101      	bne.n	80073a0 <sbrk_aligned+0x38>
 800739c:	f04f 34ff 	mov.w	r4, #4294967295
 80073a0:	4620      	mov	r0, r4
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	20001da4 	.word	0x20001da4

080073a8 <_malloc_r>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	1ccd      	adds	r5, r1, #3
 80073ae:	f025 0503 	bic.w	r5, r5, #3
 80073b2:	3508      	adds	r5, #8
 80073b4:	2d0c      	cmp	r5, #12
 80073b6:	bf38      	it	cc
 80073b8:	250c      	movcc	r5, #12
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	4607      	mov	r7, r0
 80073be:	db01      	blt.n	80073c4 <_malloc_r+0x1c>
 80073c0:	42a9      	cmp	r1, r5
 80073c2:	d905      	bls.n	80073d0 <_malloc_r+0x28>
 80073c4:	230c      	movs	r3, #12
 80073c6:	2600      	movs	r6, #0
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4630      	mov	r0, r6
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	4e2e      	ldr	r6, [pc, #184]	; (800748c <_malloc_r+0xe4>)
 80073d2:	f000 f8f7 	bl	80075c4 <__malloc_lock>
 80073d6:	6833      	ldr	r3, [r6, #0]
 80073d8:	461c      	mov	r4, r3
 80073da:	bb34      	cbnz	r4, 800742a <_malloc_r+0x82>
 80073dc:	4629      	mov	r1, r5
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff ffc2 	bl	8007368 <sbrk_aligned>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	4604      	mov	r4, r0
 80073e8:	d14d      	bne.n	8007486 <_malloc_r+0xde>
 80073ea:	6834      	ldr	r4, [r6, #0]
 80073ec:	4626      	mov	r6, r4
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	d140      	bne.n	8007474 <_malloc_r+0xcc>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4631      	mov	r1, r6
 80073f6:	4638      	mov	r0, r7
 80073f8:	eb04 0803 	add.w	r8, r4, r3
 80073fc:	f000 f8b2 	bl	8007564 <_sbrk_r>
 8007400:	4580      	cmp	r8, r0
 8007402:	d13a      	bne.n	800747a <_malloc_r+0xd2>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	3503      	adds	r5, #3
 8007408:	1a6d      	subs	r5, r5, r1
 800740a:	f025 0503 	bic.w	r5, r5, #3
 800740e:	3508      	adds	r5, #8
 8007410:	2d0c      	cmp	r5, #12
 8007412:	bf38      	it	cc
 8007414:	250c      	movcc	r5, #12
 8007416:	4638      	mov	r0, r7
 8007418:	4629      	mov	r1, r5
 800741a:	f7ff ffa5 	bl	8007368 <sbrk_aligned>
 800741e:	3001      	adds	r0, #1
 8007420:	d02b      	beq.n	800747a <_malloc_r+0xd2>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	442b      	add	r3, r5
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	e00e      	b.n	8007448 <_malloc_r+0xa0>
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	1b52      	subs	r2, r2, r5
 800742e:	d41e      	bmi.n	800746e <_malloc_r+0xc6>
 8007430:	2a0b      	cmp	r2, #11
 8007432:	d916      	bls.n	8007462 <_malloc_r+0xba>
 8007434:	1961      	adds	r1, r4, r5
 8007436:	42a3      	cmp	r3, r4
 8007438:	6025      	str	r5, [r4, #0]
 800743a:	bf18      	it	ne
 800743c:	6059      	strne	r1, [r3, #4]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	bf08      	it	eq
 8007442:	6031      	streq	r1, [r6, #0]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4638      	mov	r0, r7
 800744a:	f104 060b 	add.w	r6, r4, #11
 800744e:	f000 f8bf 	bl	80075d0 <__malloc_unlock>
 8007452:	f026 0607 	bic.w	r6, r6, #7
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	1af2      	subs	r2, r6, r3
 800745a:	d0b6      	beq.n	80073ca <_malloc_r+0x22>
 800745c:	1b9b      	subs	r3, r3, r6
 800745e:	50a3      	str	r3, [r4, r2]
 8007460:	e7b3      	b.n	80073ca <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	6032      	streq	r2, [r6, #0]
 800746a:	605a      	strne	r2, [r3, #4]
 800746c:	e7ec      	b.n	8007448 <_malloc_r+0xa0>
 800746e:	4623      	mov	r3, r4
 8007470:	6864      	ldr	r4, [r4, #4]
 8007472:	e7b2      	b.n	80073da <_malloc_r+0x32>
 8007474:	4634      	mov	r4, r6
 8007476:	6876      	ldr	r6, [r6, #4]
 8007478:	e7b9      	b.n	80073ee <_malloc_r+0x46>
 800747a:	230c      	movs	r3, #12
 800747c:	4638      	mov	r0, r7
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	f000 f8a6 	bl	80075d0 <__malloc_unlock>
 8007484:	e7a1      	b.n	80073ca <_malloc_r+0x22>
 8007486:	6025      	str	r5, [r4, #0]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa0>
 800748a:	bf00      	nop
 800748c:	20001da0 	.word	0x20001da0

08007490 <cleanup_glue>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	460c      	mov	r4, r1
 8007494:	6809      	ldr	r1, [r1, #0]
 8007496:	4605      	mov	r5, r0
 8007498:	b109      	cbz	r1, 800749e <cleanup_glue+0xe>
 800749a:	f7ff fff9 	bl	8007490 <cleanup_glue>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a6:	f000 b899 	b.w	80075dc <_free_r>
	...

080074ac <_reclaim_reent>:
 80074ac:	4b2c      	ldr	r3, [pc, #176]	; (8007560 <_reclaim_reent+0xb4>)
 80074ae:	b570      	push	{r4, r5, r6, lr}
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4604      	mov	r4, r0
 80074b4:	4283      	cmp	r3, r0
 80074b6:	d051      	beq.n	800755c <_reclaim_reent+0xb0>
 80074b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074ba:	b143      	cbz	r3, 80074ce <_reclaim_reent+0x22>
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d14a      	bne.n	8007558 <_reclaim_reent+0xac>
 80074c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074c4:	6819      	ldr	r1, [r3, #0]
 80074c6:	b111      	cbz	r1, 80074ce <_reclaim_reent+0x22>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 f887 	bl	80075dc <_free_r>
 80074ce:	6961      	ldr	r1, [r4, #20]
 80074d0:	b111      	cbz	r1, 80074d8 <_reclaim_reent+0x2c>
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f882 	bl	80075dc <_free_r>
 80074d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074da:	b111      	cbz	r1, 80074e2 <_reclaim_reent+0x36>
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 f87d 	bl	80075dc <_free_r>
 80074e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074e4:	b111      	cbz	r1, 80074ec <_reclaim_reent+0x40>
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 f878 	bl	80075dc <_free_r>
 80074ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80074ee:	b111      	cbz	r1, 80074f6 <_reclaim_reent+0x4a>
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 f873 	bl	80075dc <_free_r>
 80074f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80074f8:	b111      	cbz	r1, 8007500 <_reclaim_reent+0x54>
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f86e 	bl	80075dc <_free_r>
 8007500:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007502:	b111      	cbz	r1, 800750a <_reclaim_reent+0x5e>
 8007504:	4620      	mov	r0, r4
 8007506:	f000 f869 	bl	80075dc <_free_r>
 800750a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800750c:	b111      	cbz	r1, 8007514 <_reclaim_reent+0x68>
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f864 	bl	80075dc <_free_r>
 8007514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007516:	b111      	cbz	r1, 800751e <_reclaim_reent+0x72>
 8007518:	4620      	mov	r0, r4
 800751a:	f000 f85f 	bl	80075dc <_free_r>
 800751e:	69a3      	ldr	r3, [r4, #24]
 8007520:	b1e3      	cbz	r3, 800755c <_reclaim_reent+0xb0>
 8007522:	4620      	mov	r0, r4
 8007524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007526:	4798      	blx	r3
 8007528:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800752a:	b1b9      	cbz	r1, 800755c <_reclaim_reent+0xb0>
 800752c:	4620      	mov	r0, r4
 800752e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007532:	f7ff bfad 	b.w	8007490 <cleanup_glue>
 8007536:	5949      	ldr	r1, [r1, r5]
 8007538:	b941      	cbnz	r1, 800754c <_reclaim_reent+0xa0>
 800753a:	3504      	adds	r5, #4
 800753c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800753e:	2d80      	cmp	r5, #128	; 0x80
 8007540:	68d9      	ldr	r1, [r3, #12]
 8007542:	d1f8      	bne.n	8007536 <_reclaim_reent+0x8a>
 8007544:	4620      	mov	r0, r4
 8007546:	f000 f849 	bl	80075dc <_free_r>
 800754a:	e7ba      	b.n	80074c2 <_reclaim_reent+0x16>
 800754c:	680e      	ldr	r6, [r1, #0]
 800754e:	4620      	mov	r0, r4
 8007550:	f000 f844 	bl	80075dc <_free_r>
 8007554:	4631      	mov	r1, r6
 8007556:	e7ef      	b.n	8007538 <_reclaim_reent+0x8c>
 8007558:	2500      	movs	r5, #0
 800755a:	e7ef      	b.n	800753c <_reclaim_reent+0x90>
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	bf00      	nop
 8007560:	20000010 	.word	0x20000010

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2300      	movs	r3, #0
 8007568:	4d05      	ldr	r5, [pc, #20]	; (8007580 <_sbrk_r+0x1c>)
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa fbfe 	bl	8001d70 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20001da8 	.word	0x20001da8

08007584 <siprintf>:
 8007584:	b40e      	push	{r1, r2, r3}
 8007586:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800758a:	b500      	push	{lr}
 800758c:	b09c      	sub	sp, #112	; 0x70
 800758e:	ab1d      	add	r3, sp, #116	; 0x74
 8007590:	9002      	str	r0, [sp, #8]
 8007592:	9006      	str	r0, [sp, #24]
 8007594:	9107      	str	r1, [sp, #28]
 8007596:	9104      	str	r1, [sp, #16]
 8007598:	4808      	ldr	r0, [pc, #32]	; (80075bc <siprintf+0x38>)
 800759a:	4909      	ldr	r1, [pc, #36]	; (80075c0 <siprintf+0x3c>)
 800759c:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a0:	9105      	str	r1, [sp, #20]
 80075a2:	6800      	ldr	r0, [r0, #0]
 80075a4:	a902      	add	r1, sp, #8
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	f000 f8bc 	bl	8007724 <_svfiprintf_r>
 80075ac:	2200      	movs	r2, #0
 80075ae:	9b02      	ldr	r3, [sp, #8]
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	b01c      	add	sp, #112	; 0x70
 80075b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075b8:	b003      	add	sp, #12
 80075ba:	4770      	bx	lr
 80075bc:	20000010 	.word	0x20000010
 80075c0:	ffff0208 	.word	0xffff0208

080075c4 <__malloc_lock>:
 80075c4:	4801      	ldr	r0, [pc, #4]	; (80075cc <__malloc_lock+0x8>)
 80075c6:	f7ff beb7 	b.w	8007338 <__retarget_lock_acquire_recursive>
 80075ca:	bf00      	nop
 80075cc:	20001d9c 	.word	0x20001d9c

080075d0 <__malloc_unlock>:
 80075d0:	4801      	ldr	r0, [pc, #4]	; (80075d8 <__malloc_unlock+0x8>)
 80075d2:	f7ff beb2 	b.w	800733a <__retarget_lock_release_recursive>
 80075d6:	bf00      	nop
 80075d8:	20001d9c 	.word	0x20001d9c

080075dc <_free_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4605      	mov	r5, r0
 80075e0:	2900      	cmp	r1, #0
 80075e2:	d040      	beq.n	8007666 <_free_r+0x8a>
 80075e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e8:	1f0c      	subs	r4, r1, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bfb8      	it	lt
 80075ee:	18e4      	addlt	r4, r4, r3
 80075f0:	f7ff ffe8 	bl	80075c4 <__malloc_lock>
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <_free_r+0x8c>)
 80075f6:	6813      	ldr	r3, [r2, #0]
 80075f8:	b933      	cbnz	r3, 8007608 <_free_r+0x2c>
 80075fa:	6063      	str	r3, [r4, #4]
 80075fc:	6014      	str	r4, [r2, #0]
 80075fe:	4628      	mov	r0, r5
 8007600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007604:	f7ff bfe4 	b.w	80075d0 <__malloc_unlock>
 8007608:	42a3      	cmp	r3, r4
 800760a:	d908      	bls.n	800761e <_free_r+0x42>
 800760c:	6820      	ldr	r0, [r4, #0]
 800760e:	1821      	adds	r1, r4, r0
 8007610:	428b      	cmp	r3, r1
 8007612:	bf01      	itttt	eq
 8007614:	6819      	ldreq	r1, [r3, #0]
 8007616:	685b      	ldreq	r3, [r3, #4]
 8007618:	1809      	addeq	r1, r1, r0
 800761a:	6021      	streq	r1, [r4, #0]
 800761c:	e7ed      	b.n	80075fa <_free_r+0x1e>
 800761e:	461a      	mov	r2, r3
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	b10b      	cbz	r3, 8007628 <_free_r+0x4c>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d9fa      	bls.n	800761e <_free_r+0x42>
 8007628:	6811      	ldr	r1, [r2, #0]
 800762a:	1850      	adds	r0, r2, r1
 800762c:	42a0      	cmp	r0, r4
 800762e:	d10b      	bne.n	8007648 <_free_r+0x6c>
 8007630:	6820      	ldr	r0, [r4, #0]
 8007632:	4401      	add	r1, r0
 8007634:	1850      	adds	r0, r2, r1
 8007636:	4283      	cmp	r3, r0
 8007638:	6011      	str	r1, [r2, #0]
 800763a:	d1e0      	bne.n	80075fe <_free_r+0x22>
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4401      	add	r1, r0
 8007642:	6011      	str	r1, [r2, #0]
 8007644:	6053      	str	r3, [r2, #4]
 8007646:	e7da      	b.n	80075fe <_free_r+0x22>
 8007648:	d902      	bls.n	8007650 <_free_r+0x74>
 800764a:	230c      	movs	r3, #12
 800764c:	602b      	str	r3, [r5, #0]
 800764e:	e7d6      	b.n	80075fe <_free_r+0x22>
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	1821      	adds	r1, r4, r0
 8007654:	428b      	cmp	r3, r1
 8007656:	bf01      	itttt	eq
 8007658:	6819      	ldreq	r1, [r3, #0]
 800765a:	685b      	ldreq	r3, [r3, #4]
 800765c:	1809      	addeq	r1, r1, r0
 800765e:	6021      	streq	r1, [r4, #0]
 8007660:	6063      	str	r3, [r4, #4]
 8007662:	6054      	str	r4, [r2, #4]
 8007664:	e7cb      	b.n	80075fe <_free_r+0x22>
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20001da0 	.word	0x20001da0

0800766c <__ssputs_r>:
 800766c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	688e      	ldr	r6, [r1, #8]
 8007672:	4682      	mov	sl, r0
 8007674:	429e      	cmp	r6, r3
 8007676:	460c      	mov	r4, r1
 8007678:	4690      	mov	r8, r2
 800767a:	461f      	mov	r7, r3
 800767c:	d838      	bhi.n	80076f0 <__ssputs_r+0x84>
 800767e:	898a      	ldrh	r2, [r1, #12]
 8007680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007684:	d032      	beq.n	80076ec <__ssputs_r+0x80>
 8007686:	6825      	ldr	r5, [r4, #0]
 8007688:	6909      	ldr	r1, [r1, #16]
 800768a:	3301      	adds	r3, #1
 800768c:	eba5 0901 	sub.w	r9, r5, r1
 8007690:	6965      	ldr	r5, [r4, #20]
 8007692:	444b      	add	r3, r9
 8007694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800769c:	106d      	asrs	r5, r5, #1
 800769e:	429d      	cmp	r5, r3
 80076a0:	bf38      	it	cc
 80076a2:	461d      	movcc	r5, r3
 80076a4:	0553      	lsls	r3, r2, #21
 80076a6:	d531      	bpl.n	800770c <__ssputs_r+0xa0>
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7ff fe7d 	bl	80073a8 <_malloc_r>
 80076ae:	4606      	mov	r6, r0
 80076b0:	b950      	cbnz	r0, 80076c8 <__ssputs_r+0x5c>
 80076b2:	230c      	movs	r3, #12
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	f8ca 3000 	str.w	r3, [sl]
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c8:	464a      	mov	r2, r9
 80076ca:	6921      	ldr	r1, [r4, #16]
 80076cc:	f7ff fe36 	bl	800733c <memcpy>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	6126      	str	r6, [r4, #16]
 80076de:	444e      	add	r6, r9
 80076e0:	6026      	str	r6, [r4, #0]
 80076e2:	463e      	mov	r6, r7
 80076e4:	6165      	str	r5, [r4, #20]
 80076e6:	eba5 0509 	sub.w	r5, r5, r9
 80076ea:	60a5      	str	r5, [r4, #8]
 80076ec:	42be      	cmp	r6, r7
 80076ee:	d900      	bls.n	80076f2 <__ssputs_r+0x86>
 80076f0:	463e      	mov	r6, r7
 80076f2:	4632      	mov	r2, r6
 80076f4:	4641      	mov	r1, r8
 80076f6:	6820      	ldr	r0, [r4, #0]
 80076f8:	f000 fab8 	bl	8007c6c <memmove>
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	2000      	movs	r0, #0
 8007700:	1b9b      	subs	r3, r3, r6
 8007702:	60a3      	str	r3, [r4, #8]
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	4433      	add	r3, r6
 8007708:	6023      	str	r3, [r4, #0]
 800770a:	e7db      	b.n	80076c4 <__ssputs_r+0x58>
 800770c:	462a      	mov	r2, r5
 800770e:	f000 fac7 	bl	8007ca0 <_realloc_r>
 8007712:	4606      	mov	r6, r0
 8007714:	2800      	cmp	r0, #0
 8007716:	d1e1      	bne.n	80076dc <__ssputs_r+0x70>
 8007718:	4650      	mov	r0, sl
 800771a:	6921      	ldr	r1, [r4, #16]
 800771c:	f7ff ff5e 	bl	80075dc <_free_r>
 8007720:	e7c7      	b.n	80076b2 <__ssputs_r+0x46>
	...

08007724 <_svfiprintf_r>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	4698      	mov	r8, r3
 800772a:	898b      	ldrh	r3, [r1, #12]
 800772c:	4607      	mov	r7, r0
 800772e:	061b      	lsls	r3, r3, #24
 8007730:	460d      	mov	r5, r1
 8007732:	4614      	mov	r4, r2
 8007734:	b09d      	sub	sp, #116	; 0x74
 8007736:	d50e      	bpl.n	8007756 <_svfiprintf_r+0x32>
 8007738:	690b      	ldr	r3, [r1, #16]
 800773a:	b963      	cbnz	r3, 8007756 <_svfiprintf_r+0x32>
 800773c:	2140      	movs	r1, #64	; 0x40
 800773e:	f7ff fe33 	bl	80073a8 <_malloc_r>
 8007742:	6028      	str	r0, [r5, #0]
 8007744:	6128      	str	r0, [r5, #16]
 8007746:	b920      	cbnz	r0, 8007752 <_svfiprintf_r+0x2e>
 8007748:	230c      	movs	r3, #12
 800774a:	603b      	str	r3, [r7, #0]
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e0d1      	b.n	80078f6 <_svfiprintf_r+0x1d2>
 8007752:	2340      	movs	r3, #64	; 0x40
 8007754:	616b      	str	r3, [r5, #20]
 8007756:	2300      	movs	r3, #0
 8007758:	9309      	str	r3, [sp, #36]	; 0x24
 800775a:	2320      	movs	r3, #32
 800775c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007760:	2330      	movs	r3, #48	; 0x30
 8007762:	f04f 0901 	mov.w	r9, #1
 8007766:	f8cd 800c 	str.w	r8, [sp, #12]
 800776a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007910 <_svfiprintf_r+0x1ec>
 800776e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007772:	4623      	mov	r3, r4
 8007774:	469a      	mov	sl, r3
 8007776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800777a:	b10a      	cbz	r2, 8007780 <_svfiprintf_r+0x5c>
 800777c:	2a25      	cmp	r2, #37	; 0x25
 800777e:	d1f9      	bne.n	8007774 <_svfiprintf_r+0x50>
 8007780:	ebba 0b04 	subs.w	fp, sl, r4
 8007784:	d00b      	beq.n	800779e <_svfiprintf_r+0x7a>
 8007786:	465b      	mov	r3, fp
 8007788:	4622      	mov	r2, r4
 800778a:	4629      	mov	r1, r5
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff ff6d 	bl	800766c <__ssputs_r>
 8007792:	3001      	adds	r0, #1
 8007794:	f000 80aa 	beq.w	80078ec <_svfiprintf_r+0x1c8>
 8007798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800779a:	445a      	add	r2, fp
 800779c:	9209      	str	r2, [sp, #36]	; 0x24
 800779e:	f89a 3000 	ldrb.w	r3, [sl]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80a2 	beq.w	80078ec <_svfiprintf_r+0x1c8>
 80077a8:	2300      	movs	r3, #0
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077b2:	f10a 0a01 	add.w	sl, sl, #1
 80077b6:	9304      	str	r3, [sp, #16]
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077be:	931a      	str	r3, [sp, #104]	; 0x68
 80077c0:	4654      	mov	r4, sl
 80077c2:	2205      	movs	r2, #5
 80077c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c8:	4851      	ldr	r0, [pc, #324]	; (8007910 <_svfiprintf_r+0x1ec>)
 80077ca:	f000 fa41 	bl	8007c50 <memchr>
 80077ce:	9a04      	ldr	r2, [sp, #16]
 80077d0:	b9d8      	cbnz	r0, 800780a <_svfiprintf_r+0xe6>
 80077d2:	06d0      	lsls	r0, r2, #27
 80077d4:	bf44      	itt	mi
 80077d6:	2320      	movmi	r3, #32
 80077d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077dc:	0711      	lsls	r1, r2, #28
 80077de:	bf44      	itt	mi
 80077e0:	232b      	movmi	r3, #43	; 0x2b
 80077e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ea:	2b2a      	cmp	r3, #42	; 0x2a
 80077ec:	d015      	beq.n	800781a <_svfiprintf_r+0xf6>
 80077ee:	4654      	mov	r4, sl
 80077f0:	2000      	movs	r0, #0
 80077f2:	f04f 0c0a 	mov.w	ip, #10
 80077f6:	9a07      	ldr	r2, [sp, #28]
 80077f8:	4621      	mov	r1, r4
 80077fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077fe:	3b30      	subs	r3, #48	; 0x30
 8007800:	2b09      	cmp	r3, #9
 8007802:	d94e      	bls.n	80078a2 <_svfiprintf_r+0x17e>
 8007804:	b1b0      	cbz	r0, 8007834 <_svfiprintf_r+0x110>
 8007806:	9207      	str	r2, [sp, #28]
 8007808:	e014      	b.n	8007834 <_svfiprintf_r+0x110>
 800780a:	eba0 0308 	sub.w	r3, r0, r8
 800780e:	fa09 f303 	lsl.w	r3, r9, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	46a2      	mov	sl, r4
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	e7d2      	b.n	80077c0 <_svfiprintf_r+0x9c>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	1d19      	adds	r1, r3, #4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	9103      	str	r1, [sp, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	bfbb      	ittet	lt
 8007826:	425b      	neglt	r3, r3
 8007828:	f042 0202 	orrlt.w	r2, r2, #2
 800782c:	9307      	strge	r3, [sp, #28]
 800782e:	9307      	strlt	r3, [sp, #28]
 8007830:	bfb8      	it	lt
 8007832:	9204      	strlt	r2, [sp, #16]
 8007834:	7823      	ldrb	r3, [r4, #0]
 8007836:	2b2e      	cmp	r3, #46	; 0x2e
 8007838:	d10c      	bne.n	8007854 <_svfiprintf_r+0x130>
 800783a:	7863      	ldrb	r3, [r4, #1]
 800783c:	2b2a      	cmp	r3, #42	; 0x2a
 800783e:	d135      	bne.n	80078ac <_svfiprintf_r+0x188>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	3402      	adds	r4, #2
 8007844:	1d1a      	adds	r2, r3, #4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	9203      	str	r2, [sp, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	bfb8      	it	lt
 800784e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007852:	9305      	str	r3, [sp, #20]
 8007854:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007914 <_svfiprintf_r+0x1f0>
 8007858:	2203      	movs	r2, #3
 800785a:	4650      	mov	r0, sl
 800785c:	7821      	ldrb	r1, [r4, #0]
 800785e:	f000 f9f7 	bl	8007c50 <memchr>
 8007862:	b140      	cbz	r0, 8007876 <_svfiprintf_r+0x152>
 8007864:	2340      	movs	r3, #64	; 0x40
 8007866:	eba0 000a 	sub.w	r0, r0, sl
 800786a:	fa03 f000 	lsl.w	r0, r3, r0
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	3401      	adds	r4, #1
 8007872:	4303      	orrs	r3, r0
 8007874:	9304      	str	r3, [sp, #16]
 8007876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800787a:	2206      	movs	r2, #6
 800787c:	4826      	ldr	r0, [pc, #152]	; (8007918 <_svfiprintf_r+0x1f4>)
 800787e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007882:	f000 f9e5 	bl	8007c50 <memchr>
 8007886:	2800      	cmp	r0, #0
 8007888:	d038      	beq.n	80078fc <_svfiprintf_r+0x1d8>
 800788a:	4b24      	ldr	r3, [pc, #144]	; (800791c <_svfiprintf_r+0x1f8>)
 800788c:	bb1b      	cbnz	r3, 80078d6 <_svfiprintf_r+0x1b2>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	3307      	adds	r3, #7
 8007892:	f023 0307 	bic.w	r3, r3, #7
 8007896:	3308      	adds	r3, #8
 8007898:	9303      	str	r3, [sp, #12]
 800789a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789c:	4433      	add	r3, r6
 800789e:	9309      	str	r3, [sp, #36]	; 0x24
 80078a0:	e767      	b.n	8007772 <_svfiprintf_r+0x4e>
 80078a2:	460c      	mov	r4, r1
 80078a4:	2001      	movs	r0, #1
 80078a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80078aa:	e7a5      	b.n	80077f8 <_svfiprintf_r+0xd4>
 80078ac:	2300      	movs	r3, #0
 80078ae:	f04f 0c0a 	mov.w	ip, #10
 80078b2:	4619      	mov	r1, r3
 80078b4:	3401      	adds	r4, #1
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	4620      	mov	r0, r4
 80078ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078be:	3a30      	subs	r2, #48	; 0x30
 80078c0:	2a09      	cmp	r2, #9
 80078c2:	d903      	bls.n	80078cc <_svfiprintf_r+0x1a8>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0c5      	beq.n	8007854 <_svfiprintf_r+0x130>
 80078c8:	9105      	str	r1, [sp, #20]
 80078ca:	e7c3      	b.n	8007854 <_svfiprintf_r+0x130>
 80078cc:	4604      	mov	r4, r0
 80078ce:	2301      	movs	r3, #1
 80078d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078d4:	e7f0      	b.n	80078b8 <_svfiprintf_r+0x194>
 80078d6:	ab03      	add	r3, sp, #12
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	462a      	mov	r2, r5
 80078dc:	4638      	mov	r0, r7
 80078de:	4b10      	ldr	r3, [pc, #64]	; (8007920 <_svfiprintf_r+0x1fc>)
 80078e0:	a904      	add	r1, sp, #16
 80078e2:	f3af 8000 	nop.w
 80078e6:	1c42      	adds	r2, r0, #1
 80078e8:	4606      	mov	r6, r0
 80078ea:	d1d6      	bne.n	800789a <_svfiprintf_r+0x176>
 80078ec:	89ab      	ldrh	r3, [r5, #12]
 80078ee:	065b      	lsls	r3, r3, #25
 80078f0:	f53f af2c 	bmi.w	800774c <_svfiprintf_r+0x28>
 80078f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f6:	b01d      	add	sp, #116	; 0x74
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	ab03      	add	r3, sp, #12
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	462a      	mov	r2, r5
 8007902:	4638      	mov	r0, r7
 8007904:	4b06      	ldr	r3, [pc, #24]	; (8007920 <_svfiprintf_r+0x1fc>)
 8007906:	a904      	add	r1, sp, #16
 8007908:	f000 f87c 	bl	8007a04 <_printf_i>
 800790c:	e7eb      	b.n	80078e6 <_svfiprintf_r+0x1c2>
 800790e:	bf00      	nop
 8007910:	08007e84 	.word	0x08007e84
 8007914:	08007e8a 	.word	0x08007e8a
 8007918:	08007e8e 	.word	0x08007e8e
 800791c:	00000000 	.word	0x00000000
 8007920:	0800766d 	.word	0x0800766d

08007924 <_printf_common>:
 8007924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007928:	4616      	mov	r6, r2
 800792a:	4699      	mov	r9, r3
 800792c:	688a      	ldr	r2, [r1, #8]
 800792e:	690b      	ldr	r3, [r1, #16]
 8007930:	4607      	mov	r7, r0
 8007932:	4293      	cmp	r3, r2
 8007934:	bfb8      	it	lt
 8007936:	4613      	movlt	r3, r2
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800793e:	460c      	mov	r4, r1
 8007940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007944:	b10a      	cbz	r2, 800794a <_printf_common+0x26>
 8007946:	3301      	adds	r3, #1
 8007948:	6033      	str	r3, [r6, #0]
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	0699      	lsls	r1, r3, #26
 800794e:	bf42      	ittt	mi
 8007950:	6833      	ldrmi	r3, [r6, #0]
 8007952:	3302      	addmi	r3, #2
 8007954:	6033      	strmi	r3, [r6, #0]
 8007956:	6825      	ldr	r5, [r4, #0]
 8007958:	f015 0506 	ands.w	r5, r5, #6
 800795c:	d106      	bne.n	800796c <_printf_common+0x48>
 800795e:	f104 0a19 	add.w	sl, r4, #25
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	6832      	ldr	r2, [r6, #0]
 8007966:	1a9b      	subs	r3, r3, r2
 8007968:	42ab      	cmp	r3, r5
 800796a:	dc28      	bgt.n	80079be <_printf_common+0x9a>
 800796c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007970:	1e13      	subs	r3, r2, #0
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	bf18      	it	ne
 8007976:	2301      	movne	r3, #1
 8007978:	0692      	lsls	r2, r2, #26
 800797a:	d42d      	bmi.n	80079d8 <_printf_common+0xb4>
 800797c:	4649      	mov	r1, r9
 800797e:	4638      	mov	r0, r7
 8007980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007984:	47c0      	blx	r8
 8007986:	3001      	adds	r0, #1
 8007988:	d020      	beq.n	80079cc <_printf_common+0xa8>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	68e5      	ldr	r5, [r4, #12]
 800798e:	f003 0306 	and.w	r3, r3, #6
 8007992:	2b04      	cmp	r3, #4
 8007994:	bf18      	it	ne
 8007996:	2500      	movne	r5, #0
 8007998:	6832      	ldr	r2, [r6, #0]
 800799a:	f04f 0600 	mov.w	r6, #0
 800799e:	68a3      	ldr	r3, [r4, #8]
 80079a0:	bf08      	it	eq
 80079a2:	1aad      	subeq	r5, r5, r2
 80079a4:	6922      	ldr	r2, [r4, #16]
 80079a6:	bf08      	it	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bfc4      	itt	gt
 80079b0:	1a9b      	subgt	r3, r3, r2
 80079b2:	18ed      	addgt	r5, r5, r3
 80079b4:	341a      	adds	r4, #26
 80079b6:	42b5      	cmp	r5, r6
 80079b8:	d11a      	bne.n	80079f0 <_printf_common+0xcc>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e008      	b.n	80079d0 <_printf_common+0xac>
 80079be:	2301      	movs	r3, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	4649      	mov	r1, r9
 80079c4:	4638      	mov	r0, r7
 80079c6:	47c0      	blx	r8
 80079c8:	3001      	adds	r0, #1
 80079ca:	d103      	bne.n	80079d4 <_printf_common+0xb0>
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295
 80079d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d4:	3501      	adds	r5, #1
 80079d6:	e7c4      	b.n	8007962 <_printf_common+0x3e>
 80079d8:	2030      	movs	r0, #48	; 0x30
 80079da:	18e1      	adds	r1, r4, r3
 80079dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e6:	4422      	add	r2, r4
 80079e8:	3302      	adds	r3, #2
 80079ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079ee:	e7c5      	b.n	800797c <_printf_common+0x58>
 80079f0:	2301      	movs	r3, #1
 80079f2:	4622      	mov	r2, r4
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d0e6      	beq.n	80079cc <_printf_common+0xa8>
 80079fe:	3601      	adds	r6, #1
 8007a00:	e7d9      	b.n	80079b6 <_printf_common+0x92>
	...

08007a04 <_printf_i>:
 8007a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a08:	7e0f      	ldrb	r7, [r1, #24]
 8007a0a:	4691      	mov	r9, r2
 8007a0c:	2f78      	cmp	r7, #120	; 0x78
 8007a0e:	4680      	mov	r8, r0
 8007a10:	460c      	mov	r4, r1
 8007a12:	469a      	mov	sl, r3
 8007a14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a1a:	d807      	bhi.n	8007a2c <_printf_i+0x28>
 8007a1c:	2f62      	cmp	r7, #98	; 0x62
 8007a1e:	d80a      	bhi.n	8007a36 <_printf_i+0x32>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	f000 80d9 	beq.w	8007bd8 <_printf_i+0x1d4>
 8007a26:	2f58      	cmp	r7, #88	; 0x58
 8007a28:	f000 80a4 	beq.w	8007b74 <_printf_i+0x170>
 8007a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a34:	e03a      	b.n	8007aac <_printf_i+0xa8>
 8007a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a3a:	2b15      	cmp	r3, #21
 8007a3c:	d8f6      	bhi.n	8007a2c <_printf_i+0x28>
 8007a3e:	a101      	add	r1, pc, #4	; (adr r1, 8007a44 <_printf_i+0x40>)
 8007a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007ab1 	.word	0x08007ab1
 8007a4c:	08007a2d 	.word	0x08007a2d
 8007a50:	08007a2d 	.word	0x08007a2d
 8007a54:	08007a2d 	.word	0x08007a2d
 8007a58:	08007a2d 	.word	0x08007a2d
 8007a5c:	08007ab1 	.word	0x08007ab1
 8007a60:	08007a2d 	.word	0x08007a2d
 8007a64:	08007a2d 	.word	0x08007a2d
 8007a68:	08007a2d 	.word	0x08007a2d
 8007a6c:	08007a2d 	.word	0x08007a2d
 8007a70:	08007bbf 	.word	0x08007bbf
 8007a74:	08007ae1 	.word	0x08007ae1
 8007a78:	08007ba1 	.word	0x08007ba1
 8007a7c:	08007a2d 	.word	0x08007a2d
 8007a80:	08007a2d 	.word	0x08007a2d
 8007a84:	08007be1 	.word	0x08007be1
 8007a88:	08007a2d 	.word	0x08007a2d
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007a2d 	.word	0x08007a2d
 8007a94:	08007a2d 	.word	0x08007a2d
 8007a98:	08007ba9 	.word	0x08007ba9
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	602a      	str	r2, [r5, #0]
 8007aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aac:	2301      	movs	r3, #1
 8007aae:	e0a4      	b.n	8007bfa <_printf_i+0x1f6>
 8007ab0:	6820      	ldr	r0, [r4, #0]
 8007ab2:	6829      	ldr	r1, [r5, #0]
 8007ab4:	0606      	lsls	r6, r0, #24
 8007ab6:	f101 0304 	add.w	r3, r1, #4
 8007aba:	d50a      	bpl.n	8007ad2 <_printf_i+0xce>
 8007abc:	680e      	ldr	r6, [r1, #0]
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	da03      	bge.n	8007acc <_printf_i+0xc8>
 8007ac4:	232d      	movs	r3, #45	; 0x2d
 8007ac6:	4276      	negs	r6, r6
 8007ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007acc:	230a      	movs	r3, #10
 8007ace:	485e      	ldr	r0, [pc, #376]	; (8007c48 <_printf_i+0x244>)
 8007ad0:	e019      	b.n	8007b06 <_printf_i+0x102>
 8007ad2:	680e      	ldr	r6, [r1, #0]
 8007ad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	bf18      	it	ne
 8007adc:	b236      	sxthne	r6, r6
 8007ade:	e7ef      	b.n	8007ac0 <_printf_i+0xbc>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	1d19      	adds	r1, r3, #4
 8007ae6:	6029      	str	r1, [r5, #0]
 8007ae8:	0601      	lsls	r1, r0, #24
 8007aea:	d501      	bpl.n	8007af0 <_printf_i+0xec>
 8007aec:	681e      	ldr	r6, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <_printf_i+0xf2>
 8007af0:	0646      	lsls	r6, r0, #25
 8007af2:	d5fb      	bpl.n	8007aec <_printf_i+0xe8>
 8007af4:	881e      	ldrh	r6, [r3, #0]
 8007af6:	2f6f      	cmp	r7, #111	; 0x6f
 8007af8:	bf0c      	ite	eq
 8007afa:	2308      	moveq	r3, #8
 8007afc:	230a      	movne	r3, #10
 8007afe:	4852      	ldr	r0, [pc, #328]	; (8007c48 <_printf_i+0x244>)
 8007b00:	2100      	movs	r1, #0
 8007b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b06:	6865      	ldr	r5, [r4, #4]
 8007b08:	2d00      	cmp	r5, #0
 8007b0a:	bfa8      	it	ge
 8007b0c:	6821      	ldrge	r1, [r4, #0]
 8007b0e:	60a5      	str	r5, [r4, #8]
 8007b10:	bfa4      	itt	ge
 8007b12:	f021 0104 	bicge.w	r1, r1, #4
 8007b16:	6021      	strge	r1, [r4, #0]
 8007b18:	b90e      	cbnz	r6, 8007b1e <_printf_i+0x11a>
 8007b1a:	2d00      	cmp	r5, #0
 8007b1c:	d04d      	beq.n	8007bba <_printf_i+0x1b6>
 8007b1e:	4615      	mov	r5, r2
 8007b20:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b24:	fb03 6711 	mls	r7, r3, r1, r6
 8007b28:	5dc7      	ldrb	r7, [r0, r7]
 8007b2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b2e:	4637      	mov	r7, r6
 8007b30:	42bb      	cmp	r3, r7
 8007b32:	460e      	mov	r6, r1
 8007b34:	d9f4      	bls.n	8007b20 <_printf_i+0x11c>
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	d10b      	bne.n	8007b52 <_printf_i+0x14e>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	07de      	lsls	r6, r3, #31
 8007b3e:	d508      	bpl.n	8007b52 <_printf_i+0x14e>
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	6861      	ldr	r1, [r4, #4]
 8007b44:	4299      	cmp	r1, r3
 8007b46:	bfde      	ittt	le
 8007b48:	2330      	movle	r3, #48	; 0x30
 8007b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b52:	1b52      	subs	r2, r2, r5
 8007b54:	6122      	str	r2, [r4, #16]
 8007b56:	464b      	mov	r3, r9
 8007b58:	4621      	mov	r1, r4
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	f8cd a000 	str.w	sl, [sp]
 8007b60:	aa03      	add	r2, sp, #12
 8007b62:	f7ff fedf 	bl	8007924 <_printf_common>
 8007b66:	3001      	adds	r0, #1
 8007b68:	d14c      	bne.n	8007c04 <_printf_i+0x200>
 8007b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6e:	b004      	add	sp, #16
 8007b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b74:	4834      	ldr	r0, [pc, #208]	; (8007c48 <_printf_i+0x244>)
 8007b76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b7a:	6829      	ldr	r1, [r5, #0]
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b82:	6029      	str	r1, [r5, #0]
 8007b84:	061d      	lsls	r5, r3, #24
 8007b86:	d514      	bpl.n	8007bb2 <_printf_i+0x1ae>
 8007b88:	07df      	lsls	r7, r3, #31
 8007b8a:	bf44      	itt	mi
 8007b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b90:	6023      	strmi	r3, [r4, #0]
 8007b92:	b91e      	cbnz	r6, 8007b9c <_printf_i+0x198>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	f023 0320 	bic.w	r3, r3, #32
 8007b9a:	6023      	str	r3, [r4, #0]
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	e7af      	b.n	8007b00 <_printf_i+0xfc>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	2378      	movs	r3, #120	; 0x78
 8007baa:	4828      	ldr	r0, [pc, #160]	; (8007c4c <_printf_i+0x248>)
 8007bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bb0:	e7e3      	b.n	8007b7a <_printf_i+0x176>
 8007bb2:	0659      	lsls	r1, r3, #25
 8007bb4:	bf48      	it	mi
 8007bb6:	b2b6      	uxthmi	r6, r6
 8007bb8:	e7e6      	b.n	8007b88 <_printf_i+0x184>
 8007bba:	4615      	mov	r5, r2
 8007bbc:	e7bb      	b.n	8007b36 <_printf_i+0x132>
 8007bbe:	682b      	ldr	r3, [r5, #0]
 8007bc0:	6826      	ldr	r6, [r4, #0]
 8007bc2:	1d18      	adds	r0, r3, #4
 8007bc4:	6961      	ldr	r1, [r4, #20]
 8007bc6:	6028      	str	r0, [r5, #0]
 8007bc8:	0635      	lsls	r5, r6, #24
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	d501      	bpl.n	8007bd2 <_printf_i+0x1ce>
 8007bce:	6019      	str	r1, [r3, #0]
 8007bd0:	e002      	b.n	8007bd8 <_printf_i+0x1d4>
 8007bd2:	0670      	lsls	r0, r6, #25
 8007bd4:	d5fb      	bpl.n	8007bce <_printf_i+0x1ca>
 8007bd6:	8019      	strh	r1, [r3, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4615      	mov	r5, r2
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	e7ba      	b.n	8007b56 <_printf_i+0x152>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	2100      	movs	r1, #0
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	602a      	str	r2, [r5, #0]
 8007be8:	681d      	ldr	r5, [r3, #0]
 8007bea:	6862      	ldr	r2, [r4, #4]
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 f82f 	bl	8007c50 <memchr>
 8007bf2:	b108      	cbz	r0, 8007bf8 <_printf_i+0x1f4>
 8007bf4:	1b40      	subs	r0, r0, r5
 8007bf6:	6060      	str	r0, [r4, #4]
 8007bf8:	6863      	ldr	r3, [r4, #4]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c02:	e7a8      	b.n	8007b56 <_printf_i+0x152>
 8007c04:	462a      	mov	r2, r5
 8007c06:	4649      	mov	r1, r9
 8007c08:	4640      	mov	r0, r8
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	47d0      	blx	sl
 8007c0e:	3001      	adds	r0, #1
 8007c10:	d0ab      	beq.n	8007b6a <_printf_i+0x166>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	079b      	lsls	r3, r3, #30
 8007c16:	d413      	bmi.n	8007c40 <_printf_i+0x23c>
 8007c18:	68e0      	ldr	r0, [r4, #12]
 8007c1a:	9b03      	ldr	r3, [sp, #12]
 8007c1c:	4298      	cmp	r0, r3
 8007c1e:	bfb8      	it	lt
 8007c20:	4618      	movlt	r0, r3
 8007c22:	e7a4      	b.n	8007b6e <_printf_i+0x16a>
 8007c24:	2301      	movs	r3, #1
 8007c26:	4632      	mov	r2, r6
 8007c28:	4649      	mov	r1, r9
 8007c2a:	4640      	mov	r0, r8
 8007c2c:	47d0      	blx	sl
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d09b      	beq.n	8007b6a <_printf_i+0x166>
 8007c32:	3501      	adds	r5, #1
 8007c34:	68e3      	ldr	r3, [r4, #12]
 8007c36:	9903      	ldr	r1, [sp, #12]
 8007c38:	1a5b      	subs	r3, r3, r1
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	dcf2      	bgt.n	8007c24 <_printf_i+0x220>
 8007c3e:	e7eb      	b.n	8007c18 <_printf_i+0x214>
 8007c40:	2500      	movs	r5, #0
 8007c42:	f104 0619 	add.w	r6, r4, #25
 8007c46:	e7f5      	b.n	8007c34 <_printf_i+0x230>
 8007c48:	08007e95 	.word	0x08007e95
 8007c4c:	08007ea6 	.word	0x08007ea6

08007c50 <memchr>:
 8007c50:	4603      	mov	r3, r0
 8007c52:	b510      	push	{r4, lr}
 8007c54:	b2c9      	uxtb	r1, r1
 8007c56:	4402      	add	r2, r0
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	d101      	bne.n	8007c62 <memchr+0x12>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e003      	b.n	8007c6a <memchr+0x1a>
 8007c62:	7804      	ldrb	r4, [r0, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	428c      	cmp	r4, r1
 8007c68:	d1f6      	bne.n	8007c58 <memchr+0x8>
 8007c6a:	bd10      	pop	{r4, pc}

08007c6c <memmove>:
 8007c6c:	4288      	cmp	r0, r1
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	eb01 0402 	add.w	r4, r1, r2
 8007c74:	d902      	bls.n	8007c7c <memmove+0x10>
 8007c76:	4284      	cmp	r4, r0
 8007c78:	4623      	mov	r3, r4
 8007c7a:	d807      	bhi.n	8007c8c <memmove+0x20>
 8007c7c:	1e43      	subs	r3, r0, #1
 8007c7e:	42a1      	cmp	r1, r4
 8007c80:	d008      	beq.n	8007c94 <memmove+0x28>
 8007c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c8a:	e7f8      	b.n	8007c7e <memmove+0x12>
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	4402      	add	r2, r0
 8007c90:	428a      	cmp	r2, r1
 8007c92:	d100      	bne.n	8007c96 <memmove+0x2a>
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c9e:	e7f7      	b.n	8007c90 <memmove+0x24>

08007ca0 <_realloc_r>:
 8007ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4614      	mov	r4, r2
 8007ca8:	460e      	mov	r6, r1
 8007caa:	b921      	cbnz	r1, 8007cb6 <_realloc_r+0x16>
 8007cac:	4611      	mov	r1, r2
 8007cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	f7ff bb79 	b.w	80073a8 <_malloc_r>
 8007cb6:	b92a      	cbnz	r2, 8007cc4 <_realloc_r+0x24>
 8007cb8:	f7ff fc90 	bl	80075dc <_free_r>
 8007cbc:	4625      	mov	r5, r4
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	f000 f81b 	bl	8007cfe <_malloc_usable_size_r>
 8007cc8:	4284      	cmp	r4, r0
 8007cca:	4607      	mov	r7, r0
 8007ccc:	d802      	bhi.n	8007cd4 <_realloc_r+0x34>
 8007cce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cd2:	d812      	bhi.n	8007cfa <_realloc_r+0x5a>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	f7ff fb66 	bl	80073a8 <_malloc_r>
 8007cdc:	4605      	mov	r5, r0
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d0ed      	beq.n	8007cbe <_realloc_r+0x1e>
 8007ce2:	42bc      	cmp	r4, r7
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	bf28      	it	cs
 8007cea:	463a      	movcs	r2, r7
 8007cec:	f7ff fb26 	bl	800733c <memcpy>
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fc72 	bl	80075dc <_free_r>
 8007cf8:	e7e1      	b.n	8007cbe <_realloc_r+0x1e>
 8007cfa:	4635      	mov	r5, r6
 8007cfc:	e7df      	b.n	8007cbe <_realloc_r+0x1e>

08007cfe <_malloc_usable_size_r>:
 8007cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d02:	1f18      	subs	r0, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfbc      	itt	lt
 8007d08:	580b      	ldrlt	r3, [r1, r0]
 8007d0a:	18c0      	addlt	r0, r0, r3
 8007d0c:	4770      	bx	lr
	...

08007d10 <_init>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

08007d1c <_fini>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr
