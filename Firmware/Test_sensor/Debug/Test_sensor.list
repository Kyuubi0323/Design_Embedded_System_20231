
Test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005fcc  08005fcc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fcc  08005fcc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b38  20000074  08006048  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bac  08006048  00021bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b510  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a32  00000000  00000000  0003b5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0003efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00040658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa89  00000000  00000000  00041b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8de  00000000  00000000  0005c5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097527  00000000  00000000  00078ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001103fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a8  00000000  00000000  00110450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e40 	.word	0x08005e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005e40 	.word	0x08005e40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_f2uiz>:
 800037c:	0042      	lsls	r2, r0, #1
 800037e:	d20e      	bcs.n	800039e <__aeabi_f2uiz+0x22>
 8000380:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000384:	d30b      	bcc.n	800039e <__aeabi_f2uiz+0x22>
 8000386:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800038a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800038e:	d409      	bmi.n	80003a4 <__aeabi_f2uiz+0x28>
 8000390:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000398:	fa23 f002 	lsr.w	r0, r3, r2
 800039c:	4770      	bx	lr
 800039e:	f04f 0000 	mov.w	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80003a8:	d101      	bne.n	80003ae <__aeabi_f2uiz+0x32>
 80003aa:	0242      	lsls	r2, r0, #9
 80003ac:	d102      	bne.n	80003b4 <__aeabi_f2uiz+0x38>
 80003ae:	f04f 30ff 	mov.w	r0, #4294967295
 80003b2:	4770      	bx	lr
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop

080003bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	6039      	str	r1, [r7, #0]
 80003c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	db0a      	blt.n	80003e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	490c      	ldr	r1, [pc, #48]	; (8000408 <__NVIC_SetPriority+0x4c>)
 80003d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003da:	0112      	lsls	r2, r2, #4
 80003dc:	b2d2      	uxtb	r2, r2
 80003de:	440b      	add	r3, r1
 80003e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003e4:	e00a      	b.n	80003fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4908      	ldr	r1, [pc, #32]	; (800040c <__NVIC_SetPriority+0x50>)
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	f003 030f 	and.w	r3, r3, #15
 80003f2:	3b04      	subs	r3, #4
 80003f4:	0112      	lsls	r2, r2, #4
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	440b      	add	r3, r1
 80003fa:	761a      	strb	r2, [r3, #24]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000e100 	.word	0xe000e100
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3b01      	subs	r3, #1
 800041c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000420:	d301      	bcc.n	8000426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000422:	2301      	movs	r3, #1
 8000424:	e00f      	b.n	8000446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <SysTick_Config+0x40>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3b01      	subs	r3, #1
 800042c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800042e:	210f      	movs	r1, #15
 8000430:	f04f 30ff 	mov.w	r0, #4294967295
 8000434:	f7ff ffc2 	bl	80003bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <SysTick_Config+0x40>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800043e:	4b04      	ldr	r3, [pc, #16]	; (8000450 <SysTick_Config+0x40>)
 8000440:	2207      	movs	r2, #7
 8000442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	e000e010 	.word	0xe000e010

08000454 <Set_Pin_Output>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2302      	movs	r3, #2
 8000478:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f000 fe0d 	bl	80010a0 <HAL_GPIO_Init>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b086      	sub	sp, #24
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	4619      	mov	r1, r3
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f000 fdf0 	bl	80010a0 <HAL_GPIO_Init>
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <DHT_Start>:


void DHT_Start (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80004cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <DHT_Start+0x40>)
 80004d2:	f7ff ffbf 	bl	8000454 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004dc:	480a      	ldr	r0, [pc, #40]	; (8000508 <DHT_Start+0x40>)
 80004de:	f000 ff7a 	bl	80013d6 <HAL_GPIO_WritePin>

//	delay_ms(1);
	delay_ms(18);
 80004e2:	2012      	movs	r0, #18
 80004e4:	f000 f8ea 	bl	80006bc <delay_ms>

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <DHT_Start+0x40>)
 80004f0:	f000 ff71 	bl	80013d6 <HAL_GPIO_WritePin>
    delay_us(20);   // wait for 30us
 80004f4:	2014      	movs	r0, #20
 80004f6:	f000 f90f 	bl	8000718 <delay_us>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80004fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fe:	4802      	ldr	r0, [pc, #8]	; (8000508 <DHT_Start+0x40>)
 8000500:	f7ff ffc5 	bl	800048e <Set_Pin_Input>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40010c00 	.word	0x40010c00

0800050c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]
	delay_us (40);
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f000 f8fe 	bl	8000718 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800051c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <DHT_Check_Response+0x5c>)
 8000522:	f000 ff41 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d10f      	bne.n	800054c <DHT_Check_Response+0x40>
	{
		delay_us(80);
 800052c:	2050      	movs	r0, #80	; 0x50
 800052e:	f000 f8f3 	bl	8000718 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <DHT_Check_Response+0x5c>)
 8000538:	f000 ff36 	bl	80013a8 <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <DHT_Check_Response+0x3c>
 8000542:	2301      	movs	r3, #1
 8000544:	71fb      	strb	r3, [r7, #7]
 8000546:	e001      	b.n	800054c <DHT_Check_Response+0x40>
		else Response = -1;
 8000548:	23ff      	movs	r3, #255	; 0xff
 800054a:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800054c:	bf00      	nop
 800054e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000552:	4805      	ldr	r0, [pc, #20]	; (8000568 <DHT_Check_Response+0x5c>)
 8000554:	f000 ff28 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d1f7      	bne.n	800054e <DHT_Check_Response+0x42>

	return Response;
 800055e:	79fb      	ldrb	r3, [r7, #7]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40010c00 	.word	0x40010c00

0800056c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000572:	2300      	movs	r3, #0
 8000574:	71bb      	strb	r3, [r7, #6]
 8000576:	e03a      	b.n	80005ee <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000578:	bf00      	nop
 800057a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057e:	4820      	ldr	r0, [pc, #128]	; (8000600 <DHT_Read+0x94>)
 8000580:	f000 ff12 	bl	80013a8 <HAL_GPIO_ReadPin>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f7      	beq.n	800057a <DHT_Read+0xe>
		delay_us (40);   // wait for 40 us
 800058a:	2028      	movs	r0, #40	; 0x28
 800058c:	f000 f8c4 	bl	8000718 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	481a      	ldr	r0, [pc, #104]	; (8000600 <DHT_Read+0x94>)
 8000596:	f000 ff07 	bl	80013a8 <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d10e      	bne.n	80005be <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	f1c3 0307 	rsb	r3, r3, #7
 80005a6:	2201      	movs	r2, #1
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	4013      	ands	r3, r2
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e00b      	b.n	80005d6 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	f1c3 0307 	rsb	r3, r3, #7
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80005d6:	bf00      	nop
 80005d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <DHT_Read+0x94>)
 80005de:	f000 fee3 	bl	80013a8 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d1f7      	bne.n	80005d8 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	d9c1      	bls.n	8000578 <DHT_Read+0xc>
	}
	return i;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010c00 	.word	0x40010c00

08000604 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 800060c:	f7ff ff5c 	bl	80004c8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000610:	f7ff ff7c 	bl	800050c <DHT_Check_Response>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <DHT_GetData+0xa0>)
 800061a:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800061c:	f7ff ffa6 	bl	800056c <DHT_Read>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <DHT_GetData+0xa4>)
 8000626:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000628:	f7ff ffa0 	bl	800056c <DHT_Read>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <DHT_GetData+0xa8>)
 8000632:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000634:	f7ff ff9a 	bl	800056c <DHT_Read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <DHT_GetData+0xac>)
 800063e:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000640:	f7ff ff94 	bl	800056c <DHT_Read>
 8000644:	4603      	mov	r3, r0
 8000646:	461a      	mov	r2, r3
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <DHT_GetData+0xb0>)
 800064a:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 800064c:	f7ff ff8e 	bl	800056c <DHT_Read>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <DHT_GetData+0xb4>)
 8000656:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <DHT_GetData+0xb4>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <DHT_GetData+0xa4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <DHT_GetData+0xa8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4413      	add	r3, r2
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <DHT_GetData+0xac>)
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <DHT_GetData+0xb0>)
 8000672:	7812      	ldrb	r2, [r2, #0]
 8000674:	4413      	add	r3, r2
 8000676:	4299      	cmp	r1, r3
 8000678:	d10f      	bne.n	800069a <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <DHT_GetData+0xac>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fe24 	bl	80002cc <__aeabi_ui2f>
 8000684:	4602      	mov	r2, r0
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <DHT_GetData+0xa4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fe1c 	bl	80002cc <__aeabi_ui2f>
 8000694:	4602      	mov	r2, r0
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000096 	.word	0x20000096
 80006a8:	20000090 	.word	0x20000090
 80006ac:	20000091 	.word	0x20000091
 80006b0:	20000092 	.word	0x20000092
 80006b4:	20000093 	.word	0x20000093
 80006b8:	20000094 	.word	0x20000094

080006bc <delay_ms>:
void delay_ms(uint32_t ms)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	SysTick_Config(SystemCoreClock/1000);
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <delay_ms+0x50>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a11      	ldr	r2, [pc, #68]	; (8000710 <delay_ms+0x54>)
 80006ca:	fba2 2303 	umull	r2, r3, r2, r3
 80006ce:	099b      	lsrs	r3, r3, #6
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe9d 	bl	8000410 <SysTick_Config>
	for(int i = 0; i < ms; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e009      	b.n	80006f0 <delay_ms+0x34>
	{
		while(!((SysTick->CTRL) & (1<<16)));
 80006dc:	bf00      	nop
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <delay_ms+0x58>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <delay_ms+0x22>
	for(int i = 0; i < ms; i++)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d8f1      	bhi.n	80006dc <delay_ms+0x20>
	}
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <delay_ms+0x58>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <delay_ms+0x58>)
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	10624dd3 	.word	0x10624dd3
 8000714:	e000e010 	.word	0xe000e010

08000718 <delay_us>:

void delay_us(uint32_t us)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	SysTick_Config(SystemCoreClock/1000000);
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <delay_us+0x50>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a11      	ldr	r2, [pc, #68]	; (800076c <delay_us+0x54>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	0c9b      	lsrs	r3, r3, #18
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fe6f 	bl	8000410 <SysTick_Config>
	for(int i = 0; i < us; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e009      	b.n	800074c <delay_us+0x34>
	{
		while(!((SysTick->CTRL) & (1<<16)));
 8000738:	bf00      	nop
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <delay_us+0x58>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d0f9      	beq.n	800073a <delay_us+0x22>
	for(int i = 0; i < us; i++)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f1      	bhi.n	8000738 <delay_us+0x20>
	}
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <delay_us+0x58>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <delay_us+0x58>)
 800075a:	f023 0301 	bic.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	431bde83 	.word	0x431bde83
 8000770:	e000e010 	.word	0xe000e010

08000774 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Basic_timer */
  Basic_timerHandle = osTimerNew(Timer_Callback, osTimerPeriodic, NULL, &Basic_timer_attributes);
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_FREERTOS_Init+0x3c>)
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_FREERTOS_Init+0x40>)
 8000780:	f002 f94c 	bl	8002a1c <osTimerNew>
 8000784:	4603      	mov	r3, r0
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <MX_FREERTOS_Init+0x44>)
 8000788:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <MX_FREERTOS_Init+0x48>)
 800078c:	2100      	movs	r1, #0
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_FREERTOS_Init+0x4c>)
 8000790:	f002 f856 	bl	8002840 <osThreadNew>
 8000794:	4603      	mov	r3, r0
 8000796:	4a0b      	ldr	r2, [pc, #44]	; (80007c4 <MX_FREERTOS_Init+0x50>)
 8000798:	6013      	str	r3, [r2, #0]

  /* creation of Sensor */
  SensorHandle = osThreadNew(Sensor_task, NULL, &Sensor_attributes);
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <MX_FREERTOS_Init+0x54>)
 800079c:	2100      	movs	r1, #0
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <MX_FREERTOS_Init+0x58>)
 80007a0:	f002 f84e 	bl	8002840 <osThreadNew>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <MX_FREERTOS_Init+0x5c>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08005efc 	.word	0x08005efc
 80007b4:	08000875 	.word	0x08000875
 80007b8:	200000a4 	.word	0x200000a4
 80007bc:	08005eb4 	.word	0x08005eb4
 80007c0:	080007d5 	.word	0x080007d5
 80007c4:	2000009c 	.word	0x2000009c
 80007c8:	08005ed8 	.word	0x08005ed8
 80007cc:	08000805 	.word	0x08000805
 80007d0:	200000a0 	.word	0x200000a0

080007d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TxBuffer = "Default_here\r\n";
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <StartDefaultTask+0x24>)
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <StartDefaultTask+0x28>)
 80007e0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <StartDefaultTask+0x2c>)
 80007e8:	f000 fe0d 	bl	8001406 <HAL_GPIO_TogglePin>
    		osDelay(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f0:	f002 f8d0 	bl	8002994 <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007f4:	e7f5      	b.n	80007e2 <StartDefaultTask+0xe>
 80007f6:	bf00      	nop
 80007f8:	20000098 	.word	0x20000098
 80007fc:	08005e78 	.word	0x08005e78
 8000800:	40011000 	.word	0x40011000

08000804 <Sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_task */
void Sensor_task(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_task */
	DHT_DataTypedef DHT;
	uint32_t temp = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t humid = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
	char str[50];;
  /* Infinite loop */
  for(;;)
  {
	  DHT_GetData(&DHT);
 8000814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fef3 	bl	8000604 <DHT_GetData>
	  temp = (uint32_t) DHT.Temperature;
 800081e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fdab 	bl	800037c <__aeabi_f2uiz>
 8000826:	4603      	mov	r3, r0
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
	  sprintf(str, "temp: %ld\r\n", temp);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000830:	490d      	ldr	r1, [pc, #52]	; (8000868 <Sensor_task+0x64>)
 8000832:	4618      	mov	r0, r3
 8000834:	f004 ff3e 	bl	80056b4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fc87 	bl	8000150 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	f107 010c 	add.w	r1, r7, #12
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <Sensor_task+0x68>)
 800084e:	f001 fe11 	bl	8002474 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*) "vailz", 6, 10);
 8000852:	230a      	movs	r3, #10
 8000854:	2206      	movs	r2, #6
 8000856:	4906      	ldr	r1, [pc, #24]	; (8000870 <Sensor_task+0x6c>)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <Sensor_task+0x68>)
 800085a:	f001 fe0b 	bl	8002474 <HAL_UART_Transmit>

    osDelay(2000);
 800085e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000862:	f002 f897 	bl	8002994 <osDelay>
	  DHT_GetData(&DHT);
 8000866:	e7d5      	b.n	8000814 <Sensor_task+0x10>
 8000868:	08005e88 	.word	0x08005e88
 800086c:	20000148 	.word	0x20000148
 8000870:	08005e94 	.word	0x08005e94

08000874 <Timer_Callback>:
  /* USER CODE END Sensor_task */
}

/* Timer_Callback function */
void Timer_Callback(void *argument)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_Callback */

  /* USER CODE END Timer_Callback */
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b35      	ldr	r3, [pc, #212]	; (8000974 <MX_GPIO_Init+0xec>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a34      	ldr	r2, [pc, #208]	; (8000974 <MX_GPIO_Init+0xec>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b32      	ldr	r3, [pc, #200]	; (8000974 <MX_GPIO_Init+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_GPIO_Init+0xec>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <MX_GPIO_Init+0xec>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_GPIO_Init+0xec>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_GPIO_Init+0xec>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <MX_GPIO_Init+0xec>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0xec>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_GPIO_Init+0xec>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a22      	ldr	r2, [pc, #136]	; (8000974 <MX_GPIO_Init+0xec>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_GPIO_Init+0xec>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000902:	481d      	ldr	r0, [pc, #116]	; (8000978 <MX_GPIO_Init+0xf0>)
 8000904:	f000 fd67 	bl	80013d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0xf4>)
 8000910:	f000 fd61 	bl	80013d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <MX_GPIO_Init+0xf0>)
 800092e:	f000 fbb7 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT_Pin;
 8000932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <MX_GPIO_Init+0xf4>)
 800094c:	f000 fba8 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAX_Pin;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MAX_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0xf4>)
 8000966:	f000 fb9b 	bl	80010a0 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3720      	adds	r7, #32
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	40011000 	.word	0x40011000
 800097c:	40010c00 	.word	0x40010c00

08000980 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	; (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f000 fd3b 	bl	8001438 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 f8b0 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000a8 	.word	0x200000a8
 80009d4:	40005400 	.word	0x40005400
 80009d8:	00061a80 	.word	0x00061a80

080009dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a15      	ldr	r2, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x70>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d123      	bne.n	8000a44 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a14:	23c0      	movs	r3, #192	; 0xc0
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_I2C_MspInit+0x78>)
 8000a28:	f000 fb3a 	bl	80010a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_I2C_MspInit+0x74>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 fa0e 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f80d 	bl	8000a7e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f7ff ff10 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a68:	f7ff ff8a 	bl	8000980 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a6c:	f000 f96a 	bl	8000d44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000a70:	f001 fe80 	bl	8002774 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000a74:	f7ff fe7e 	bl	8000774 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a78:	f001 feae 	bl	80027d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <main+0x24>

08000a7e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b090      	sub	sp, #64	; 0x40
 8000a82:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	2228      	movs	r2, #40	; 0x28
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fcfb 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000abc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0318 	add.w	r3, r7, #24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fdfa 	bl	80016c0 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ad2:	f000 f82b 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2102      	movs	r1, #2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 f867 	bl	8001bc4 <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000afc:	f000 f816 	bl	8000b2c <Error_Handler>
  }
}
 8000b00:	bf00      	nop
 8000b02:	3740      	adds	r7, #64	; 0x40
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 f9c5 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	61d3      	str	r3, [r2, #28]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x68>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f000 fa68 	bl	800104a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_MspInit+0x6c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_MspInit+0x6c>)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	; 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_InitTick+0xd0>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 f95f 	bl	8001ea4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be6:	f001 f949 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8000bea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_InitTick+0xd4>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0c9b      	lsrs	r3, r3, #18
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_InitTick+0xd8>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <HAL_InitTick+0xdc>)
 8000bfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c22:	f001 f98d 	bl	8001f40 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d11b      	bne.n	8000c6c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <HAL_InitTick+0xd8>)
 8000c36:	f001 f9db 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c48:	2019      	movs	r0, #25
 8000c4a:	f000 fa1a 	bl	8001082 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d808      	bhi.n	8000c66 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f000 f9f6 	bl	800104a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0xe0>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e002      	b.n	8000c6c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	200000fc 	.word	0x200000fc
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	20000004 	.word	0x20000004

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
	...

08000cb8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM1_UP_IRQHandler+0x10>)
 8000cbe:	f001 f9e9 	bl	8002094 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000fc 	.word	0x200000fc

08000ccc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cfc:	f004 fb8a 	bl	8005414 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20005000 	.word	0x20005000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000144 	.word	0x20000144
 8000d34:	20001bb0 	.word	0x20001bb0

08000d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_USART1_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	f001 fb2a 	bl	80023d4 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f7ff fed1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000148 	.word	0x20000148
 8000d94:	40013800 	.word	0x40013800

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0x8c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d131      	bne.n	8000e1c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6193      	str	r3, [r2, #24]
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_UART_MspInit+0x90>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <HAL_UART_MspInit+0x94>)
 8000dfe:	f000 f94f 	bl	80010a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_UART_MspInit+0x94>)
 8000e18:	f000 f942 	bl	80010a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40013800 	.word	0x40013800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ff82 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e36:	490c      	ldr	r1, [pc, #48]	; (8000e68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e4c:	4c09      	ldr	r4, [pc, #36]	; (8000e74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fae1 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5e:	f7ff fdfb 	bl	8000a58 <main>
  bx lr
 8000e62:	4770      	bx	lr
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e6c:	08005fd4 	.word	0x08005fd4
  ldr r2, =_sbss
 8000e70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e74:	20001bac 	.word	0x20001bac

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x28>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x28>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8d1 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	200f      	movs	r0, #15
 8000e94:	f7ff fe88 	bl	8000ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fe4e 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x1c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000190 	.word	0x20000190

08000ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b02      	ldr	r3, [pc, #8]	; (8000edc <HAL_GetTick+0x10>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000190 	.word	0x20000190

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4906      	ldr	r1, [pc, #24]	; (8000f78 <__NVIC_EnableIRQ+0x34>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff4f 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff64 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ffb2 	bl	8000fd0 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff81 	bl	8000f7c <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff57 	bl	8000f44 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08b      	sub	sp, #44	; 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e169      	b.n	8001388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b4:	2201      	movs	r2, #1
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8158 	bne.w	8001382 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a9a      	ldr	r2, [pc, #616]	; (8001340 <HAL_GPIO_Init+0x2a0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d05e      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010dc:	4a98      	ldr	r2, [pc, #608]	; (8001340 <HAL_GPIO_Init+0x2a0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d875      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010e2:	4a98      	ldr	r2, [pc, #608]	; (8001344 <HAL_GPIO_Init+0x2a4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d058      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010e8:	4a96      	ldr	r2, [pc, #600]	; (8001344 <HAL_GPIO_Init+0x2a4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d86f      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010ee:	4a96      	ldr	r2, [pc, #600]	; (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d052      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010f4:	4a94      	ldr	r2, [pc, #592]	; (8001348 <HAL_GPIO_Init+0x2a8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d869      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010fa:	4a94      	ldr	r2, [pc, #592]	; (800134c <HAL_GPIO_Init+0x2ac>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d04c      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 8001100:	4a92      	ldr	r2, [pc, #584]	; (800134c <HAL_GPIO_Init+0x2ac>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d863      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001106:	4a92      	ldr	r2, [pc, #584]	; (8001350 <HAL_GPIO_Init+0x2b0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d046      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 800110c:	4a90      	ldr	r2, [pc, #576]	; (8001350 <HAL_GPIO_Init+0x2b0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d85d      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d82a      	bhi.n	800116c <HAL_GPIO_Init+0xcc>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d859      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <HAL_GPIO_Init+0x80>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	0800119b 	.word	0x0800119b
 8001124:	08001175 	.word	0x08001175
 8001128:	08001187 	.word	0x08001187
 800112c:	080011c9 	.word	0x080011c9
 8001130:	080011cf 	.word	0x080011cf
 8001134:	080011cf 	.word	0x080011cf
 8001138:	080011cf 	.word	0x080011cf
 800113c:	080011cf 	.word	0x080011cf
 8001140:	080011cf 	.word	0x080011cf
 8001144:	080011cf 	.word	0x080011cf
 8001148:	080011cf 	.word	0x080011cf
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011cf 	.word	0x080011cf
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011cf 	.word	0x080011cf
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001191 	.word	0x08001191
 800116c:	4a79      	ldr	r2, [pc, #484]	; (8001354 <HAL_GPIO_Init+0x2b4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001172:	e02c      	b.n	80011ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e029      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	3304      	adds	r3, #4
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e024      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	3308      	adds	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e01f      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	330c      	adds	r3, #12
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e01a      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a2:	2304      	movs	r3, #4
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e013      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	611a      	str	r2, [r3, #16]
          break;
 80011ba:	e009      	b.n	80011d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	615a      	str	r2, [r3, #20]
          break;
 80011c6:	e003      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          break;
 80011ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	; 0xff
 80011d4:	d801      	bhi.n	80011da <HAL_GPIO_Init+0x13a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_Init+0x13e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3304      	adds	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	; 0xff
 80011e4:	d802      	bhi.n	80011ec <HAL_GPIO_Init+0x14c>
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x152>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	3b08      	subs	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	210f      	movs	r1, #15
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	6a39      	ldr	r1, [r7, #32]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80b1 	beq.w	8001382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x2b8>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x2b8>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001238:	4a48      	ldr	r2, [pc, #288]	; (800135c <HAL_GPIO_Init+0x2bc>)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a40      	ldr	r2, [pc, #256]	; (8001360 <HAL_GPIO_Init+0x2c0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d013      	beq.n	800128c <HAL_GPIO_Init+0x1ec>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3f      	ldr	r2, [pc, #252]	; (8001364 <HAL_GPIO_Init+0x2c4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1e8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3e      	ldr	r2, [pc, #248]	; (8001368 <HAL_GPIO_Init+0x2c8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1e4>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a3d      	ldr	r2, [pc, #244]	; (800136c <HAL_GPIO_Init+0x2cc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1e0>
 800127c:	2303      	movs	r3, #3
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001280:	2304      	movs	r3, #4
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1ee>
 800128c:	2300      	movs	r3, #0
 800128e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800129e:	492f      	ldr	r1, [pc, #188]	; (800135c <HAL_GPIO_Init+0x2bc>)
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012b8:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	492c      	ldr	r1, [pc, #176]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4928      	ldr	r1, [pc, #160]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4922      	ldr	r1, [pc, #136]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	60cb      	str	r3, [r1, #12]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	491e      	ldr	r1, [pc, #120]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4918      	ldr	r1, [pc, #96]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	43db      	mvns	r3, r3
 800131e:	4914      	ldr	r1, [pc, #80]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001320:	4013      	ands	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <HAL_GPIO_Init+0x2d0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e021      	b.n	8001382 <HAL_GPIO_Init+0x2e2>
 800133e:	bf00      	nop
 8001340:	10320000 	.word	0x10320000
 8001344:	10310000 	.word	0x10310000
 8001348:	10220000 	.word	0x10220000
 800134c:	10210000 	.word	0x10210000
 8001350:	10120000 	.word	0x10120000
 8001354:	10110000 	.word	0x10110000
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	40010800 	.word	0x40010800
 8001364:	40010c00 	.word	0x40010c00
 8001368:	40011000 	.word	0x40011000
 800136c:	40011400 	.word	0x40011400
 8001370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_GPIO_Init+0x304>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	43db      	mvns	r3, r3
 800137c:	4909      	ldr	r1, [pc, #36]	; (80013a4 <HAL_GPIO_Init+0x304>)
 800137e:	4013      	ands	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f ae8e 	bne.w	80010b4 <HAL_GPIO_Init+0x14>
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	372c      	adds	r7, #44	; 0x2c
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e001      	b.n	80013ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]
 80013e2:	4613      	mov	r3, r2
 80013e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e6:	787b      	ldrb	r3, [r7, #1]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013f2:	e003      	b.n	80013fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	460b      	mov	r3, r1
 8001410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001418:	887a      	ldrh	r2, [r7, #2]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	041a      	lsls	r2, r3, #16
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43d9      	mvns	r1, r3
 8001424:	887b      	ldrh	r3, [r7, #2]
 8001426:	400b      	ands	r3, r1
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e12b      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fabc 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800149c:	f000 fcda 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a81      	ldr	r2, [pc, #516]	; (80016ac <HAL_I2C_Init+0x274>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d807      	bhi.n	80014bc <HAL_I2C_Init+0x84>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_I2C_Init+0x278>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	bf94      	ite	ls
 80014b4:	2301      	movls	r3, #1
 80014b6:	2300      	movhi	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e006      	b.n	80014ca <HAL_I2C_Init+0x92>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a7d      	ldr	r2, [pc, #500]	; (80016b4 <HAL_I2C_Init+0x27c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0e7      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <HAL_I2C_Init+0x280>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_I2C_Init+0x274>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <HAL_I2C_Init+0xd4>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	e009      	b.n	8001520 <HAL_I2C_Init+0xe8>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a69      	ldr	r2, [pc, #420]	; (80016bc <HAL_I2C_Init+0x284>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	3301      	adds	r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	495c      	ldr	r1, [pc, #368]	; (80016ac <HAL_I2C_Init+0x274>)
 800153c:	428b      	cmp	r3, r1
 800153e:	d819      	bhi.n	8001574 <HAL_I2C_Init+0x13c>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e59      	subs	r1, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fbb1 f3f3 	udiv	r3, r1, r3
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001554:	400b      	ands	r3, r1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <HAL_I2C_Init+0x138>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e59      	subs	r1, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	3301      	adds	r3, #1
 800156a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156e:	e051      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001570:	2304      	movs	r3, #4
 8001572:	e04f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d111      	bne.n	80015a0 <HAL_I2C_Init+0x168>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e012      	b.n	80015c6 <HAL_I2C_Init+0x18e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x196>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10e      	bne.n	80015f4 <HAL_I2C_Init+0x1bc>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e58      	subs	r0, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	440b      	add	r3, r1
 80015e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6809      	ldr	r1, [r1, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6911      	ldr	r1, [r2, #16]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	000186a0 	.word	0x000186a0
 80016b0:	001e847f 	.word	0x001e847f
 80016b4:	003d08ff 	.word	0x003d08ff
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e272      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8087 	beq.w	80017ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ec:	4b8f      	ldr	r3, [pc, #572]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d112      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
 80016f8:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06c      	beq.n	80017ec <HAL_RCC_OscConfig+0x12c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d168      	bne.n	80017ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e24c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x76>
 8001728:	4b80      	ldr	r3, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a7f      	ldr	r2, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e02e      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7a      	ldr	r2, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a77      	ldr	r2, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0xbc>
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a71      	ldr	r2, [pc, #452]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a67      	ldr	r2, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fb96 	bl	8000ecc <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb92 	bl	8000ecc <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e200      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe4>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb82 	bl	8000ecc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fb7e 	bl	8000ecc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1ec      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x10c>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1c0      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4939      	ldr	r1, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	e03a      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fb37 	bl	8000ecc <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fb33 	bl	8000ecc <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1a1      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4927      	ldr	r1, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e015      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb16 	bl	8000ecc <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fb12 	bl	8000ecc <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e180      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03a      	beq.n	8001944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d019      	beq.n	800190a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff faf6 	bl	8000ecc <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff faf2 	bl	8000ecc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e160      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fafe 	bl	8001f04 <RCC_Delay>
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fadc 	bl	8000ecc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fad8 	bl	8000ecc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d908      	bls.n	8001938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e146      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	42420000 	.word	0x42420000
 8001934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e9      	bne.n	8001918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a6 	beq.w	8001a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198a:	4b7f      	ldr	r3, [pc, #508]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7e      	ldr	r2, [pc, #504]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff fa99 	bl	8000ecc <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff fa95 	bl	8000ecc <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e103      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x312>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	e02d      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x334>
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x356>
 80019fc:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa49 	bl	8000ecc <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fa45 	bl	8000ecc <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0b1      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x37e>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fa33 	bl	8000ecc <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fa2f 	bl	8000ecc <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e09b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d061      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d146      	bne.n	8001b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa03 	bl	8000ecc <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f9ff 	bl	8000ecc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e06d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4921      	ldr	r1, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a19      	ldr	r1, [r3, #32]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	430b      	orrs	r3, r1
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f9d3 	bl	8000ecc <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f9cf 	bl	8000ecc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46a>
 8001b48:	e035      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9bc 	bl	8000ecc <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f9b8 	bl	8000ecc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e026      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x498>
 8001b76:	e01e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e019      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x500>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0d0      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d910      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4965      	ldr	r1, [pc, #404]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b8      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	494d      	ldr	r1, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d040      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d115      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e073      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06b      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 0203 	bic.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4936      	ldr	r1, [pc, #216]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f90a 	bl	8000ecc <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7ff f906 	bl	8000ecc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e053      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 020c 	and.w	r2, r3, #12
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1eb      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d210      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4922      	ldr	r1, [pc, #136]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d52:	f000 f821 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	490a      	ldr	r1, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1cc>)
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff18 	bl	8000ba8 <HAL_InitTick>

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08005f0c 	.word	0x08005f0c
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x36>
 8001dc6:	e027      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	613b      	str	r3, [r7, #16]
      break;
 8001dcc:	e027      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0c9b      	lsrs	r3, r3, #18
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d010      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0c5b      	lsrs	r3, r3, #17
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfa:	fb03 f202 	mul.w	r2, r3, r2
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e004      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	613b      	str	r3, [r7, #16]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1a:	613b      	str	r3, [r7, #16]
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	693b      	ldr	r3, [r7, #16]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	08005f24 	.word	0x08005f24
 8001e38:	08005f34 	.word	0x08005f34
 8001e3c:	003d0900 	.word	0x003d0900

08001e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e58:	f7ff fff2 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08005f1c 	.word	0x08005f1c

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08005f1c 	.word	0x08005f1c

08001ea4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e041      	b.n	8001fd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f839 	bl	8001fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	f000 f9b4 	bl	80022ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e03a      	b.n	800207e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_TIM_Base_Start_IT+0x98>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00e      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d009      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_TIM_Base_Start_IT+0x9c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x58>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a13      	ldr	r2, [pc, #76]	; (8002090 <HAL_TIM_Base_Start_IT+0xa0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d010      	beq.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	e007      	b.n	800207c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40000400 	.word	0x40000400
 8002090:	40000800 	.word	0x40000800

08002094 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0202 	mvn.w	r2, #2
 80020c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8ed 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8e0 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8ef 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b04      	cmp	r3, #4
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0204 	mvn.w	r2, #4
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2202      	movs	r2, #2
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8c3 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f8b6 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8c5 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b08      	cmp	r3, #8
 8002150:	d122      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b08      	cmp	r3, #8
 800215e:	d11b      	bne.n	8002198 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0208 	mvn.w	r2, #8
 8002168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2204      	movs	r2, #4
 800216e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f899 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 8002184:	e005      	b.n	8002192 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f88c 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f89b 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d122      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d11b      	bne.n	80021ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2208      	movs	r2, #8
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f86f 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f862 	bl	80022a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f871 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0201 	mvn.w	r2, #1
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fc78 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	2b80      	cmp	r3, #128	; 0x80
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002230:	2b80      	cmp	r3, #128	; 0x80
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8bf 	bl	80023c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f835 	bl	80022da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b20      	cmp	r3, #32
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b20      	cmp	r3, #32
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f88a 	bl	80023b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <TIM_Base_SetConfig+0xb8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d007      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <TIM_Base_SetConfig+0xbc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_Base_SetConfig+0x30>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <TIM_Base_SetConfig+0xc0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d108      	bne.n	800232e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <TIM_Base_SetConfig+0xb8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00b      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d007      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <TIM_Base_SetConfig+0xbc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d003      	beq.n	800234e <TIM_Base_SetConfig+0x62>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <TIM_Base_SetConfig+0xc0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a07      	ldr	r2, [pc, #28]	; (80023a4 <TIM_Base_SetConfig+0xb8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d103      	bne.n	8002394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	615a      	str	r2, [r3, #20]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr
 80023a4:	40012c00 	.word	0x40012c00
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800

080023b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e042      	b.n	800246c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fccc 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f91d 	bl	8002658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800242c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800243c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2220      	movs	r2, #32
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b20      	cmp	r3, #32
 8002492:	d16d      	bne.n	8002570 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_UART_Transmit+0x2c>
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e066      	b.n	8002572 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2221      	movs	r2, #33	; 0x21
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b2:	f7fe fd0b 	bl	8000ecc <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024cc:	d108      	bne.n	80024e0 <HAL_UART_Transmit+0x6c>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	e003      	b.n	80024e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024e8:	e02a      	b.n	8002540 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f840 	bl	800257a <UART_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e036      	b.n	8002572 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10b      	bne.n	8002522 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	3302      	adds	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
 8002520:	e007      	b.n	8002532 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	781a      	ldrb	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1cf      	bne.n	80024ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2200      	movs	r2, #0
 8002552:	2140      	movs	r1, #64	; 0x40
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f810 	bl	800257a <UART_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e006      	b.n	8002572 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	4618      	mov	r0, r3
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b090      	sub	sp, #64	; 0x40
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800258a:	e050      	b.n	800262e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d04c      	beq.n	800262e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <UART_WaitOnFlagUntilTimeout+0x30>
 800259a:	f7fe fc97 	bl	8000ecc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d241      	bcs.n	800262e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	e853 3f00 	ldrex	r3, [r3]
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025ca:	637a      	str	r2, [r7, #52]	; 0x34
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e5      	bne.n	80025aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	3314      	adds	r3, #20
 80025e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	e853 3f00 	ldrex	r3, [r3]
 80025ec:	613b      	str	r3, [r7, #16]
   return(result);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3314      	adds	r3, #20
 80025fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025fe:	623a      	str	r2, [r7, #32]
 8002600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	69f9      	ldr	r1, [r7, #28]
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	61bb      	str	r3, [r7, #24]
   return(result);
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e5      	bne.n	80025de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e00f      	b.n	800264e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4013      	ands	r3, r2
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	429a      	cmp	r2, r3
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	429a      	cmp	r2, r3
 800264a:	d09f      	beq.n	800258c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3740      	adds	r7, #64	; 0x40
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002692:	f023 030c 	bic.w	r3, r3, #12
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	430b      	orrs	r3, r1
 800269e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2c      	ldr	r2, [pc, #176]	; (800276c <UART_SetConfig+0x114>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026c0:	f7ff fbdc 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	e002      	b.n	80026ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026c8:	f7ff fbc4 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80026cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	4a22      	ldr	r2, [pc, #136]	; (8002770 <UART_SetConfig+0x118>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	0119      	lsls	r1, r3, #4
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f2f3 	udiv	r2, r2, r3
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <UART_SetConfig+0x118>)
 8002706:	fba3 0302 	umull	r0, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2064      	movs	r0, #100	; 0x64
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	3332      	adds	r3, #50	; 0x32
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	4419      	add	r1, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f2f3 	udiv	r2, r2, r3
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <UART_SetConfig+0x118>)
 800273e:	fba3 0302 	umull	r0, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2064      	movs	r0, #100	; 0x64
 8002746:	fb00 f303 	mul.w	r3, r0, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <UART_SetConfig+0x118>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	440a      	add	r2, r1
 8002762:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40013800 	.word	0x40013800
 8002770:	51eb851f 	.word	0x51eb851f

08002774 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800277a:	f3ef 8305 	mrs	r3, IPSR
 800277e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002780:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	607b      	str	r3, [r7, #4]
  return(result);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <osKernelInitialize+0x32>
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <osKernelInitialize+0x60>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d109      	bne.n	80027ae <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800279a:	f3ef 8311 	mrs	r3, BASEPRI
 800279e:	603b      	str	r3, [r7, #0]
  return(result);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80027a6:	f06f 0305 	mvn.w	r3, #5
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	e00c      	b.n	80027c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <osKernelInitialize+0x60>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d105      	bne.n	80027c2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <osKernelInitialize+0x60>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e002      	b.n	80027c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80027c8:	68fb      	ldr	r3, [r7, #12]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000194 	.word	0x20000194

080027d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027de:	f3ef 8305 	mrs	r3, IPSR
 80027e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80027e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ea:	f3ef 8310 	mrs	r3, PRIMASK
 80027ee:	607b      	str	r3, [r7, #4]
  return(result);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <osKernelStart+0x32>
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <osKernelStart+0x64>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d109      	bne.n	8002812 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002802:	603b      	str	r3, [r7, #0]
  return(result);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <osKernelStart+0x3a>
    stat = osErrorISR;
 800280a:	f06f 0305 	mvn.w	r3, #5
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e00e      	b.n	8002830 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <osKernelStart+0x64>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <osKernelStart+0x64>)
 800281c:	2202      	movs	r2, #2
 800281e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002820:	f001 fcf4 	bl	800420c <vTaskStartScheduler>
      stat = osOK;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e002      	b.n	8002830 <osKernelStart+0x58>
    } else {
      stat = osError;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002830:	68fb      	ldr	r3, [r7, #12]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000194 	.word	0x20000194

08002840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b092      	sub	sp, #72	; 0x48
 8002844:	af04      	add	r7, sp, #16
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002850:	f3ef 8305 	mrs	r3, IPSR
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 8094 	bne.w	8002986 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285e:	f3ef 8310 	mrs	r3, PRIMASK
 8002862:	623b      	str	r3, [r7, #32]
  return(result);
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 808d 	bne.w	8002986 <osThreadNew+0x146>
 800286c:	4b48      	ldr	r3, [pc, #288]	; (8002990 <osThreadNew+0x150>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d106      	bne.n	8002882 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002874:	f3ef 8311 	mrs	r3, BASEPRI
 8002878:	61fb      	str	r3, [r7, #28]
  return(result);
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2b00      	cmp	r3, #0
 800287e:	f040 8082 	bne.w	8002986 <osThreadNew+0x146>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d07e      	beq.n	8002986 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800288c:	2318      	movs	r3, #24
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002890:	2300      	movs	r3, #0
 8002892:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002894:	f107 031b 	add.w	r3, r7, #27
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d045      	beq.n	8002932 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <osThreadNew+0x74>
        name = attr->name;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <osThreadNew+0x9a>
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	2b38      	cmp	r3, #56	; 0x38
 80028cc:	d805      	bhi.n	80028da <osThreadNew+0x9a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <osThreadNew+0x9e>
        return (NULL);
 80028da:	2300      	movs	r3, #0
 80028dc:	e054      	b.n	8002988 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00e      	beq.n	8002914 <osThreadNew+0xd4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2bbb      	cmp	r3, #187	; 0xbb
 80028fc:	d90a      	bls.n	8002914 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <osThreadNew+0xd4>
        mem = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e010      	b.n	8002936 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <osThreadNew+0xf6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <osThreadNew+0xf6>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <osThreadNew+0xf6>
          mem = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002930:	e001      	b.n	8002936 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	2b01      	cmp	r3, #1
 800293a:	d110      	bne.n	800295e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002944:	9202      	str	r2, [sp, #8]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002950:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f001 fa76 	bl	8003e44 <xTaskCreateStatic>
 8002958:	4603      	mov	r3, r0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e013      	b.n	8002986 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d110      	bne.n	8002986 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	b29a      	uxth	r2, r3
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f001 fac0 	bl	8003efc <xTaskCreate>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <osThreadNew+0x146>
          hTask = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002986:	697b      	ldr	r3, [r7, #20]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3738      	adds	r7, #56	; 0x38
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000194 	.word	0x20000194

08002994 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800299c:	f3ef 8305 	mrs	r3, IPSR
 80029a0:	613b      	str	r3, [r7, #16]
  return(result);
 80029a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10f      	bne.n	80029c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a8:	f3ef 8310 	mrs	r3, PRIMASK
 80029ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <osDelay+0x34>
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <osDelay+0x58>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d109      	bne.n	80029d0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029bc:	f3ef 8311 	mrs	r3, BASEPRI
 80029c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <osDelay+0x3c>
    stat = osErrorISR;
 80029c8:	f06f 0305 	mvn.w	r3, #5
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e007      	b.n	80029e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f001 fbe2 	bl	80041a4 <vTaskDelay>
    }
  }

  return (stat);
 80029e0:	697b      	ldr	r3, [r7, #20]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000194 	.word	0x20000194

080029f0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f002 fceb 	bl	80053d4 <pvTimerGetTimerID>
 80029fe:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4798      	blx	r3
  }
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a30:	f3ef 8305 	mrs	r3, IPSR
 8002a34:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a36:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d16a      	bne.n	8002b12 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a40:	617b      	str	r3, [r7, #20]
  return(result);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d164      	bne.n	8002b12 <osTimerNew+0xf6>
 8002a48:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <osTimerNew+0x100>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d105      	bne.n	8002a5c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a50:	f3ef 8311 	mrs	r3, BASEPRI
 8002a54:	613b      	str	r3, [r7, #16]
  return(result);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d15a      	bne.n	8002b12 <osTimerNew+0xf6>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d057      	beq.n	8002b12 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002a62:	2008      	movs	r0, #8
 8002a64:	f000 f890 	bl	8002b88 <pvPortMalloc>
 8002a68:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d050      	beq.n	8002b12 <osTimerNew+0xf6>
      callb->func = func;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002a7c:	7afb      	ldrb	r3, [r7, #11]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <osTimerNew+0x6c>
        reload = pdFALSE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e001      	b.n	8002a8c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8002a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a90:	623b      	str	r3, [r7, #32]
      name = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <osTimerNew+0xba>
        if (attr->name != NULL) {
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <osTimerNew+0x8e>
          name = attr->name;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <osTimerNew+0xa4>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8002ab8:	d902      	bls.n	8002ac0 <osTimerNew+0xa4>
          mem = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e00c      	b.n	8002ada <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <osTimerNew+0xbe>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <osTimerNew+0xbe>
            mem = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	e001      	b.n	8002ada <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10c      	bne.n	8002afa <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <osTimerNew+0x104>)
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	2101      	movs	r1, #1
 8002af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002af2:	f002 f936 	bl	8004d62 <xTimerCreateStatic>
 8002af6:	62b8      	str	r0, [r7, #40]	; 0x28
 8002af8:	e00b      	b.n	8002b12 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <osTimerNew+0x104>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	2101      	movs	r1, #1
 8002b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b0c:	f002 f908 	bl	8004d20 <xTimerCreate>
 8002b10:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000194 	.word	0x20000194
 8002b20:	080029f1 	.word	0x080029f1

08002b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <vApplicationGetIdleTaskMemory+0x28>)
 8002b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000198 	.word	0x20000198
 8002b50:	20000254 	.word	0x20000254

08002b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <vApplicationGetTimerTaskMemory+0x30>)
 8002b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	20000454 	.word	0x20000454
 8002b84:	20000510 	.word	0x20000510

08002b88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002b94:	f001 fbaa 	bl	80042ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <pvPortMalloc+0x174>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ba0:	f000 f910 	bl	8002dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ba4:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <pvPortMalloc+0x178>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 808e 	bne.w	8002cce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01d      	beq.n	8002bf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002bb8:	2208      	movs	r2, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d014      	beq.n	8002bf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f023 0307 	bic.w	r3, r3, #7
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bf0:	bf00      	nop
 8002bf2:	e7fe      	b.n	8002bf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d069      	beq.n	8002cce <pvPortMalloc+0x146>
 8002bfa:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <pvPortMalloc+0x17c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d864      	bhi.n	8002cce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002c04:	4b40      	ldr	r3, [pc, #256]	; (8002d08 <pvPortMalloc+0x180>)
 8002c06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <pvPortMalloc+0x180>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c0e:	e004      	b.n	8002c1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d903      	bls.n	8002c2c <pvPortMalloc+0xa4>
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f1      	bne.n	8002c10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <pvPortMalloc+0x174>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d04b      	beq.n	8002cce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	4413      	add	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	2308      	movs	r3, #8
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d91f      	bls.n	8002c98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <pvPortMalloc+0xf8>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	613b      	str	r3, [r7, #16]
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c92:	69b8      	ldr	r0, [r7, #24]
 8002c94:	f000 f8f8 	bl	8002e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <pvPortMalloc+0x17c>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <pvPortMalloc+0x17c>)
 8002ca4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ca6:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <pvPortMalloc+0x17c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <pvPortMalloc+0x184>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d203      	bcs.n	8002cba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <pvPortMalloc+0x17c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <pvPortMalloc+0x184>)
 8002cb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <pvPortMalloc+0x178>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002cce:	f001 fb1b 	bl	8004308 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <pvPortMalloc+0x16a>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	60fb      	str	r3, [r7, #12]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <pvPortMalloc+0x168>
	return pvReturn;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3728      	adds	r7, #40	; 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20001518 	.word	0x20001518
 8002d00:	20001524 	.word	0x20001524
 8002d04:	2000151c 	.word	0x2000151c
 8002d08:	20001510 	.word	0x20001510
 8002d0c:	20001520 	.word	0x20001520

08002d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d048      	beq.n	8002db4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002d22:	2308      	movs	r3, #8
 8002d24:	425b      	negs	r3, r3
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	4b21      	ldr	r3, [pc, #132]	; (8002dbc <vPortFree+0xac>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <vPortFree+0x44>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	60fb      	str	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <vPortFree+0x62>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	60bb      	str	r3, [r7, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	e7fe      	b.n	8002d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <vPortFree+0xac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d019      	beq.n	8002db4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d115      	bne.n	8002db4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <vPortFree+0xac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	401a      	ands	r2, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002d98:	f001 faa8 	bl	80042ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <vPortFree+0xb0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <vPortFree+0xb0>)
 8002da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002daa:	6938      	ldr	r0, [r7, #16]
 8002dac:	f000 f86c 	bl	8002e88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002db0:	f001 faaa 	bl	8004308 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002db4:	bf00      	nop
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20001524 	.word	0x20001524
 8002dc0:	2000151c 	.word	0x2000151c

08002dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <prvHeapInit+0xac>)
 8002dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3307      	adds	r3, #7
 8002de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <prvHeapInit+0xac>)
 8002df4:	4413      	add	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <prvHeapInit+0xb0>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <prvHeapInit+0xb0>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002e10:	2208      	movs	r2, #8
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <prvHeapInit+0xb4>)
 8002e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <prvHeapInit+0xb4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <prvHeapInit+0xb4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <prvHeapInit+0xb4>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <prvHeapInit+0xb8>)
 8002e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <prvHeapInit+0xbc>)
 8002e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <prvHeapInit+0xc0>)
 8002e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e62:	601a      	str	r2, [r3, #0]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000910 	.word	0x20000910
 8002e74:	20001510 	.word	0x20001510
 8002e78:	20001518 	.word	0x20001518
 8002e7c:	20001520 	.word	0x20001520
 8002e80:	2000151c 	.word	0x2000151c
 8002e84:	20001524 	.word	0x20001524

08002e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <prvInsertBlockIntoFreeList+0xa8>)
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e002      	b.n	8002e9c <prvInsertBlockIntoFreeList+0x14>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d8f7      	bhi.n	8002e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d108      	bne.n	8002eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	441a      	add	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d118      	bne.n	8002f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <prvInsertBlockIntoFreeList+0xac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d00d      	beq.n	8002f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e008      	b.n	8002f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <prvInsertBlockIntoFreeList+0xac>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e003      	b.n	8002f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d002      	beq.n	8002f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	20001510 	.word	0x20001510
 8002f34:	20001518 	.word	0x20001518

08002f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f103 0208 	add.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f103 0208 	add.w	r2, r3, #8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f103 0208 	add.w	r2, r3, #8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d103      	bne.n	8002ff4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	e00c      	b.n	800300e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e002      	b.n	8003002 <vListInsert+0x2e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d2f6      	bcs.n	8002ffc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	601a      	str	r2, [r3, #0]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6892      	ldr	r2, [r2, #8]
 800305a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6852      	ldr	r2, [r2, #4]
 8003064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d103      	bne.n	8003078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1e5a      	subs	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
	...

08003098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3b04      	subs	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b04      	subs	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0201 	bic.w	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	3b04      	subs	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80030c8:	4a08      	ldr	r2, [pc, #32]	; (80030ec <pxPortInitialiseStack+0x54>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3b14      	subs	r3, #20
 80030d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3b20      	subs	r3, #32
 80030de:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	080030f1 	.word	0x080030f1

080030f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80030fa:	4b12      	ldr	r3, [pc, #72]	; (8003144 <prvTaskExitError+0x54>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d00a      	beq.n	800311a <prvTaskExitError+0x2a>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	60fb      	str	r3, [r7, #12]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <prvTaskExitError+0x28>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	60bb      	str	r3, [r7, #8]
}
 800312c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800312e:	bf00      	nop
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0fc      	beq.n	8003130 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	2000000c 	.word	0x2000000c
	...

08003150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <pxCurrentTCBConst2>)
 8003152:	6819      	ldr	r1, [r3, #0]
 8003154:	6808      	ldr	r0, [r1, #0]
 8003156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800315a:	f380 8809 	msr	PSP, r0
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f380 8811 	msr	BASEPRI, r0
 800316a:	f04e 0e0d 	orr.w	lr, lr, #13
 800316e:	4770      	bx	lr

08003170 <pxCurrentTCBConst2>:
 8003170:	20001570 	.word	0x20001570
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop

08003178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003178:	4806      	ldr	r0, [pc, #24]	; (8003194 <prvPortStartFirstTask+0x1c>)
 800317a:	6800      	ldr	r0, [r0, #0]
 800317c:	6800      	ldr	r0, [r0, #0]
 800317e:	f380 8808 	msr	MSP, r0
 8003182:	b662      	cpsie	i
 8003184:	b661      	cpsie	f
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	df00      	svc	0
 8003190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003192:	bf00      	nop
 8003194:	e000ed08 	.word	0xe000ed08

08003198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <xPortStartScheduler+0xd0>)
 80031a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <xPortStartScheduler+0xd4>)
 80031c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <xPortStartScheduler+0xd8>)
 80031c8:	2207      	movs	r2, #7
 80031ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031cc:	e009      	b.n	80031e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <xPortStartScheduler+0xd8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3b01      	subs	r3, #1
 80031d4:	4a26      	ldr	r2, [pc, #152]	; (8003270 <xPortStartScheduler+0xd8>)
 80031d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d0ef      	beq.n	80031ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <xPortStartScheduler+0xd8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d00a      	beq.n	8003210 <xPortStartScheduler+0x78>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	60bb      	str	r3, [r7, #8]
}
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <xPortStartScheduler+0xd8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	4a16      	ldr	r2, [pc, #88]	; (8003270 <xPortStartScheduler+0xd8>)
 8003218:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <xPortStartScheduler+0xd8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003222:	4a13      	ldr	r2, [pc, #76]	; (8003270 <xPortStartScheduler+0xd8>)
 8003224:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <xPortStartScheduler+0xdc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <xPortStartScheduler+0xdc>)
 8003234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <xPortStartScheduler+0xdc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a0d      	ldr	r2, [pc, #52]	; (8003274 <xPortStartScheduler+0xdc>)
 8003240:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003244:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003246:	f000 f8b9 	bl	80033bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <xPortStartScheduler+0xe0>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003250:	f7ff ff92 	bl	8003178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003254:	f001 f9c2 	bl	80045dc <vTaskSwitchContext>
	prvTaskExitError();
 8003258:	f7ff ff4a 	bl	80030f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	e000e400 	.word	0xe000e400
 800326c:	20001528 	.word	0x20001528
 8003270:	2000152c 	.word	0x2000152c
 8003274:	e000ed20 	.word	0xe000ed20
 8003278:	2000000c 	.word	0x2000000c

0800327c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	607b      	str	r3, [r7, #4]
}
 8003294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <vPortEnterCritical+0x58>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	4a0d      	ldr	r2, [pc, #52]	; (80032d4 <vPortEnterCritical+0x58>)
 800329e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <vPortEnterCritical+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10f      	bne.n	80032c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <vPortEnterCritical+0x5c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	603b      	str	r3, [r7, #0]
}
 80032c4:	bf00      	nop
 80032c6:	e7fe      	b.n	80032c6 <vPortEnterCritical+0x4a>
	}
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000000c 	.word	0x2000000c
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <vPortExitCritical+0x4c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <vPortExitCritical+0x24>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	607b      	str	r3, [r7, #4]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003300:	4b09      	ldr	r3, [pc, #36]	; (8003328 <vPortExitCritical+0x4c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3b01      	subs	r3, #1
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <vPortExitCritical+0x4c>)
 8003308:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <vPortExitCritical+0x4c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <vPortExitCritical+0x42>
 8003312:	2300      	movs	r3, #0
 8003314:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800331c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000000c 	.word	0x2000000c
 800332c:	00000000 	.word	0x00000000

08003330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003330:	f3ef 8009 	mrs	r0, PSP
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <pxCurrentTCBConst>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003340:	6010      	str	r0, [r2, #0]
 8003342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003346:	f04f 0050 	mov.w	r0, #80	; 0x50
 800334a:	f380 8811 	msr	BASEPRI, r0
 800334e:	f001 f945 	bl	80045dc <vTaskSwitchContext>
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f380 8811 	msr	BASEPRI, r0
 800335a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	6808      	ldr	r0, [r1, #0]
 8003362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003366:	f380 8809 	msr	PSP, r0
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	4770      	bx	lr

08003370 <pxCurrentTCBConst>:
 8003370:	20001570 	.word	0x20001570
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop

08003378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	607b      	str	r3, [r7, #4]
}
 8003390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003392:	f001 f865 	bl	8004460 <xTaskIncrementTick>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <SysTick_Handler+0x40>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f383 8811 	msr	BASEPRI, r3
}
 80033ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <vPortSetupTimerInterrupt+0x30>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <vPortSetupTimerInterrupt+0x34>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <vPortSetupTimerInterrupt+0x38>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <vPortSetupTimerInterrupt+0x3c>)
 80033d2:	fba2 2303 	umull	r2, r3, r2, r3
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	4a08      	ldr	r2, [pc, #32]	; (80033fc <vPortSetupTimerInterrupt+0x40>)
 80033da:	3b01      	subs	r3, #1
 80033dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <vPortSetupTimerInterrupt+0x30>)
 80033e0:	2207      	movs	r2, #7
 80033e2:	601a      	str	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	e000e010 	.word	0xe000e010
 80033f0:	e000e018 	.word	0xe000e018
 80033f4:	20000000 	.word	0x20000000
 80033f8:	10624dd3 	.word	0x10624dd3
 80033fc:	e000e014 	.word	0xe000e014

08003400 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003406:	f3ef 8305 	mrs	r3, IPSR
 800340a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b0f      	cmp	r3, #15
 8003410:	d914      	bls.n	800343c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003412:	4a16      	ldr	r2, [pc, #88]	; (800346c <vPortValidateInterruptPriority+0x6c>)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <vPortValidateInterruptPriority+0x70>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	7afa      	ldrb	r2, [r7, #11]
 8003422:	429a      	cmp	r2, r3
 8003424:	d20a      	bcs.n	800343c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	607b      	str	r3, [r7, #4]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800343c:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <vPortValidateInterruptPriority+0x74>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <vPortValidateInterruptPriority+0x78>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d90a      	bls.n	8003462 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	603b      	str	r3, [r7, #0]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <vPortValidateInterruptPriority+0x60>
	}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	e000e3f0 	.word	0xe000e3f0
 8003470:	20001528 	.word	0x20001528
 8003474:	e000ed0c 	.word	0xe000ed0c
 8003478:	2000152c 	.word	0x2000152c

0800347c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGenericReset+0x2a>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	60bb      	str	r3, [r7, #8]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034a6:	f7ff fee9 	bl	800327c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	441a      	add	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	3b01      	subs	r3, #1
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	441a      	add	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	22ff      	movs	r2, #255	; 0xff
 80034ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	22ff      	movs	r2, #255	; 0xff
 80034f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d114      	bne.n	8003526 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01a      	beq.n	800353a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3310      	adds	r3, #16
 8003508:	4618      	mov	r0, r3
 800350a:	f001 f91b 	bl	8004744 <xTaskRemoveFromEventList>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <xQueueGenericReset+0xcc>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	e009      	b.n	800353a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3310      	adds	r3, #16
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fd04 	bl	8002f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3324      	adds	r3, #36	; 0x24
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fcff 	bl	8002f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800353a:	f7ff fecf 	bl	80032dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800353e:	2301      	movs	r3, #1
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	e000ed04 	.word	0xe000ed04

0800354c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08e      	sub	sp, #56	; 0x38
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800358e:	bf00      	nop
 8003590:	e7fe      	b.n	8003590 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <xQueueGenericCreateStatic+0x52>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <xQueueGenericCreateStatic+0x56>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xQueueGenericCreateStatic+0x58>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	623b      	str	r3, [r7, #32]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <xQueueGenericCreateStatic+0x7e>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <xQueueGenericCreateStatic+0x82>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <xQueueGenericCreateStatic+0x84>
 80035ce:	2300      	movs	r3, #0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10a      	bne.n	80035ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	61fb      	str	r3, [r7, #28]
}
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035ea:	2350      	movs	r3, #80	; 0x50
 80035ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b50      	cmp	r3, #80	; 0x50
 80035f2:	d00a      	beq.n	800360a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	61bb      	str	r3, [r7, #24]
}
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800361c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f805 	bl	800363a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003632:	4618      	mov	r0, r3
 8003634:	3730      	adds	r7, #48	; 0x30
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e002      	b.n	800365c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003668:	2101      	movs	r1, #1
 800366a:	69b8      	ldr	r0, [r7, #24]
 800366c:	f7ff ff06 	bl	800347c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xQueueGenericSend+0x32>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <xQueueGenericSend+0x40>
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <xQueueGenericSend+0x44>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <xQueueGenericSend+0x46>
 80036c4:	2300      	movs	r3, #0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <xQueueGenericSend+0x60>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d103      	bne.n	80036ee <xQueueGenericSend+0x6e>
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericSend+0x72>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericSend+0x74>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericSend+0x8e>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	623b      	str	r3, [r7, #32]
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800370e:	f001 f9df 	bl	8004ad0 <xTaskGetSchedulerState>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <xQueueGenericSend+0x9e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <xQueueGenericSend+0xa2>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSend+0xa4>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10a      	bne.n	800373e <xQueueGenericSend+0xbe>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61fb      	str	r3, [r7, #28]
}
 800373a:	bf00      	nop
 800373c:	e7fe      	b.n	800373c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800373e:	f7ff fd9d 	bl	800327c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <xQueueGenericSend+0xd4>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d129      	bne.n	80037a8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fa07 	bl	8003b6c <prvCopyDataToQueue>
 800375e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	2b00      	cmp	r3, #0
 8003766:	d010      	beq.n	800378a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	3324      	adds	r3, #36	; 0x24
 800376c:	4618      	mov	r0, r3
 800376e:	f000 ffe9 	bl	8004744 <xTaskRemoveFromEventList>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003778:	4b3f      	ldr	r3, [pc, #252]	; (8003878 <xQueueGenericSend+0x1f8>)
 800377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	e00a      	b.n	80037a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <xQueueGenericSend+0x1f8>)
 8003792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037a0:	f7ff fd9c 	bl	80032dc <vPortExitCritical>
				return pdPASS;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e063      	b.n	8003870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037ae:	f7ff fd95 	bl	80032dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e05c      	b.n	8003870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4618      	mov	r0, r3
 80037c2:	f001 f823 	bl	800480c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037c6:	2301      	movs	r3, #1
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ca:	f7ff fd87 	bl	80032dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ce:	f000 fd8d 	bl	80042ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037d2:	f7ff fd53 	bl	800327c <vPortEnterCritical>
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037dc:	b25b      	sxtb	r3, r3
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d103      	bne.n	80037ec <xQueueGenericSend+0x16c>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d103      	bne.n	8003802 <xQueueGenericSend+0x182>
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003802:	f7ff fd6b 	bl	80032dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003806:	1d3a      	adds	r2, r7, #4
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f001 f812 	bl	8004838 <xTaskCheckForTimeOut>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d124      	bne.n	8003864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800381a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800381c:	f000 fa9e 	bl	8003d5c <prvIsQueueFull>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d018      	beq.n	8003858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	3310      	adds	r3, #16
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f000 ff38 	bl	80046a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003836:	f000 fa29 	bl	8003c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800383a:	f000 fd65 	bl	8004308 <xTaskResumeAll>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	f47f af7c 	bne.w	800373e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <xQueueGenericSend+0x1f8>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	e772      	b.n	800373e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385a:	f000 fa17 	bl	8003c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800385e:	f000 fd53 	bl	8004308 <xTaskResumeAll>
 8003862:	e76c      	b.n	800373e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003866:	f000 fa11 	bl	8003c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800386a:	f000 fd4d 	bl	8004308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800386e:	2300      	movs	r3, #0
		}
	}
}
 8003870:	4618      	mov	r0, r3
 8003872:	3738      	adds	r7, #56	; 0x38
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08e      	sub	sp, #56	; 0x38
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <xQueueGenericSendFromISR+0x3c>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <xQueueGenericSendFromISR+0x40>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <xQueueGenericSendFromISR+0x42>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	623b      	str	r3, [r7, #32]
}
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d103      	bne.n	80038e6 <xQueueGenericSendFromISR+0x6a>
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <xQueueGenericSendFromISR+0x6e>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <xQueueGenericSendFromISR+0x70>
 80038ea:	2300      	movs	r3, #0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	61fb      	str	r3, [r7, #28]
}
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003906:	f7ff fd7b 	bl	8003400 <vPortValidateInterruptPriority>
	__asm volatile
 800390a:	f3ef 8211 	mrs	r2, BASEPRI
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	61ba      	str	r2, [r7, #24]
 8003920:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003922:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <xQueueGenericSendFromISR+0xbc>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d12c      	bne.n	8003992 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003948:	f000 f910 	bl	8003b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800394c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d112      	bne.n	800397c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	4618      	mov	r0, r3
 8003964:	f000 feee 	bl	8004744 <xTaskRemoveFromEventList>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e007      	b.n	800398c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800397c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003980:	3301      	adds	r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	b25a      	sxtb	r2, r3
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800398c:	2301      	movs	r3, #1
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003990:	e001      	b.n	8003996 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	613b      	str	r3, [r7, #16]
	__asm volatile
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f383 8811 	msr	BASEPRI, r3
}
 80039a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3738      	adds	r7, #56	; 0x38
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	; 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <xQueueReceive+0x30>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	623b      	str	r3, [r7, #32]
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0x3e>
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <xQueueReceive+0x42>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <xQueueReceive+0x44>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueReceive+0x5e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	61fb      	str	r3, [r7, #28]
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a0a:	f001 f861 	bl	8004ad0 <xTaskGetSchedulerState>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xQueueReceive+0x6e>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <xQueueReceive+0x72>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <xQueueReceive+0x74>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueReceive+0x8e>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	61bb      	str	r3, [r7, #24]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a3a:	f7ff fc1f 	bl	800327c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01f      	beq.n	8003a8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4e:	f000 f8f7 	bl	8003c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00f      	beq.n	8003a82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	3310      	adds	r3, #16
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fe6c 	bl	8004744 <xTaskRemoveFromEventList>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a72:	4b3d      	ldr	r3, [pc, #244]	; (8003b68 <xQueueReceive+0x1bc>)
 8003a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a82:	f7ff fc2b 	bl	80032dc <vPortExitCritical>
				return pdPASS;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e069      	b.n	8003b5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a90:	f7ff fc24 	bl	80032dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e062      	b.n	8003b5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a9e:	f107 0310 	add.w	r3, r7, #16
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 feb2 	bl	800480c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aac:	f7ff fc16 	bl	80032dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ab0:	f000 fc1c 	bl	80042ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ab4:	f7ff fbe2 	bl	800327c <vPortEnterCritical>
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003abe:	b25b      	sxtb	r3, r3
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d103      	bne.n	8003ace <xQueueReceive+0x122>
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d103      	bne.n	8003ae4 <xQueueReceive+0x138>
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ae4:	f7ff fbfa 	bl	80032dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae8:	1d3a      	adds	r2, r7, #4
 8003aea:	f107 0310 	add.w	r3, r7, #16
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fea1 	bl	8004838 <xTaskCheckForTimeOut>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d123      	bne.n	8003b44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afe:	f000 f917 	bl	8003d30 <prvIsQueueEmpty>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	3324      	adds	r3, #36	; 0x24
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fdc7 	bl	80046a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b18:	f000 f8b8 	bl	8003c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b1c:	f000 fbf4 	bl	8004308 <xTaskResumeAll>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d189      	bne.n	8003a3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <xQueueReceive+0x1bc>)
 8003b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	e780      	b.n	8003a3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b3a:	f000 f8a7 	bl	8003c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b3e:	f000 fbe3 	bl	8004308 <xTaskResumeAll>
 8003b42:	e77a      	b.n	8003a3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b46:	f000 f8a1 	bl	8003c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b4a:	f000 fbdd 	bl	8004308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b50:	f000 f8ee 	bl	8003d30 <prvIsQueueEmpty>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f43f af6f 	beq.w	8003a3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3730      	adds	r7, #48	; 0x30
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10d      	bne.n	8003ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d14d      	bne.n	8003c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 ffb8 	bl	8004b0c <xTaskPriorityDisinherit>
 8003b9c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	e043      	b.n	8003c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d119      	bne.n	8003be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6898      	ldr	r0, [r3, #8]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	f001 fc58 	bl	800546c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d32b      	bcc.n	8003c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	e026      	b.n	8003c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68d8      	ldr	r0, [r3, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	461a      	mov	r2, r3
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	f001 fc3e 	bl	800546c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	425b      	negs	r3, r3
 8003bfa:	441a      	add	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d207      	bcs.n	8003c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	425b      	negs	r3, r3
 8003c16:	441a      	add	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d105      	bne.n	8003c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c36:	697b      	ldr	r3, [r7, #20]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	441a      	add	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d303      	bcc.n	8003c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68d9      	ldr	r1, [r3, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f001 fbf4 	bl	800546c <memcpy>
	}
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c94:	f7ff faf2 	bl	800327c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ca0:	e011      	b.n	8003cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d012      	beq.n	8003cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fd48 	bl	8004744 <xTaskRemoveFromEventList>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003cba:	f000 fe1f 	bl	80048fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	dce9      	bgt.n	8003ca2 <prvUnlockQueue+0x16>
 8003cce:	e000      	b.n	8003cd2 <prvUnlockQueue+0x46>
					break;
 8003cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	22ff      	movs	r2, #255	; 0xff
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cda:	f7ff faff 	bl	80032dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cde:	f7ff facd 	bl	800327c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cea:	e011      	b.n	8003d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fd23 	bl	8004744 <xTaskRemoveFromEventList>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d04:	f000 fdfa 	bl	80048fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d08:	7bbb      	ldrb	r3, [r7, #14]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	dce9      	bgt.n	8003cec <prvUnlockQueue+0x60>
 8003d18:	e000      	b.n	8003d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d24:	f7ff fada 	bl	80032dc <vPortExitCritical>
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d38:	f7ff faa0 	bl	800327c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e001      	b.n	8003d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d4e:	f7ff fac5 	bl	80032dc <vPortExitCritical>

	return xReturn;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d64:	f7ff fa8a 	bl	800327c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d102      	bne.n	8003d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e001      	b.n	8003d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d7e:	f7ff faad 	bl	80032dc <vPortExitCritical>

	return xReturn;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e014      	b.n	8003dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <vQueueAddToRegistry+0x4c>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <vQueueAddToRegistry+0x4c>)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <vQueueAddToRegistry+0x4c>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003dbe:	e006      	b.n	8003dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b07      	cmp	r3, #7
 8003dca:	d9e7      	bls.n	8003d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20001530 	.word	0x20001530

08003ddc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dec:	f7ff fa46 	bl	800327c <vPortEnterCritical>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df6:	b25b      	sxtb	r3, r3
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d103      	bne.n	8003e06 <vQueueWaitForMessageRestricted+0x2a>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e0c:	b25b      	sxtb	r3, r3
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d103      	bne.n	8003e1c <vQueueWaitForMessageRestricted+0x40>
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1c:	f7ff fa5e 	bl	80032dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d106      	bne.n	8003e36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3324      	adds	r3, #36	; 0x24
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fc5b 	bl	80046ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e36:	6978      	ldr	r0, [r7, #20]
 8003e38:	f7ff ff28 	bl	8003c8c <prvUnlockQueue>
	}
 8003e3c:	bf00      	nop
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08e      	sub	sp, #56	; 0x38
 8003e48:	af04      	add	r7, sp, #16
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10a      	bne.n	8003e8a <xTaskCreateStatic+0x46>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	61fb      	str	r3, [r7, #28]
}
 8003e86:	bf00      	nop
 8003e88:	e7fe      	b.n	8003e88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e8a:	23bc      	movs	r3, #188	; 0xbc
 8003e8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2bbc      	cmp	r3, #188	; 0xbc
 8003e92:	d00a      	beq.n	8003eaa <xTaskCreateStatic+0x66>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	61bb      	str	r3, [r7, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <xTaskCreateStatic+0xaa>
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01b      	beq.n	8003eee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f851 	bl	8003f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ee8:	f000 f8ec 	bl	80040c4 <prvAddNewTaskToReadyList>
 8003eec:	e001      	b.n	8003ef2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ef2:	697b      	ldr	r3, [r7, #20]
	}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3728      	adds	r7, #40	; 0x28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	; 0x30
 8003f00:	af04      	add	r7, sp, #16
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fe39 	bl	8002b88 <pvPortMalloc>
 8003f16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003f1e:	20bc      	movs	r0, #188	; 0xbc
 8003f20:	f7fe fe32 	bl	8002b88 <pvPortMalloc>
 8003f24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
 8003f32:	e005      	b.n	8003f40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7fe feeb 	bl	8002d10 <vPortFree>
 8003f3a:	e001      	b.n	8003f40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	2300      	movs	r3, #0
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9302      	str	r3, [sp, #8]
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f80f 	bl	8003f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f6a:	69f8      	ldr	r0, [r7, #28]
 8003f6c:	f000 f8aa 	bl	80040c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	e002      	b.n	8003f7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f76:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	21a5      	movs	r1, #165	; 0xa5
 8003fa2:	f001 fa71 	bl	8005488 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f023 0307 	bic.w	r3, r3, #7
 8003fbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	617b      	str	r3, [r7, #20]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	e012      	b.n	800400c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	4413      	add	r3, r2
 8003fec:	7819      	ldrb	r1, [r3, #0]
 8003fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3334      	adds	r3, #52	; 0x34
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	4413      	add	r3, r2
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	d9e9      	bls.n	8003fe6 <prvInitialiseNewTask+0x5e>
 8004012:	e000      	b.n	8004016 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004014:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	2b37      	cmp	r3, #55	; 0x37
 8004022:	d901      	bls.n	8004028 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004024:	2337      	movs	r3, #55	; 0x37
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004032:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	2200      	movs	r2, #0
 8004038:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800403a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403c:	3304      	adds	r3, #4
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe ff99 	bl	8002f76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	3318      	adds	r3, #24
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe ff94 	bl	8002f76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	2200      	movs	r2, #0
 8004068:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	2200      	movs	r2, #0
 8004070:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	3354      	adds	r3, #84	; 0x54
 8004078:	2260      	movs	r2, #96	; 0x60
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fa03 	bl	8005488 <memset>
 8004082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004084:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <prvInitialiseNewTask+0x130>)
 8004086:	659a      	str	r2, [r3, #88]	; 0x58
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <prvInitialiseNewTask+0x134>)
 800408c:	65da      	str	r2, [r3, #92]	; 0x5c
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <prvInitialiseNewTask+0x138>)
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	69b8      	ldr	r0, [r7, #24]
 800409a:	f7fe fffd 	bl	8003098 <pxPortInitialiseStack>
 800409e:	4602      	mov	r2, r0
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040b0:	bf00      	nop
 80040b2:	3720      	adds	r7, #32
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	08005f58 	.word	0x08005f58
 80040bc:	08005f78 	.word	0x08005f78
 80040c0:	08005f38 	.word	0x08005f38

080040c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040cc:	f7ff f8d6 	bl	800327c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <prvAddNewTaskToReadyList+0xc4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <prvAddNewTaskToReadyList+0xc4>)
 80040d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040da:	4b2c      	ldr	r3, [pc, #176]	; (800418c <prvAddNewTaskToReadyList+0xc8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <prvAddNewTaskToReadyList+0xc8>)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <prvAddNewTaskToReadyList+0xc4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d110      	bne.n	8004112 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040f0:	f000 fc28 	bl	8004944 <prvInitialiseTaskLists>
 80040f4:	e00d      	b.n	8004112 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <prvAddNewTaskToReadyList+0xcc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <prvAddNewTaskToReadyList+0xc8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	429a      	cmp	r2, r3
 800410a:	d802      	bhi.n	8004112 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <prvAddNewTaskToReadyList+0xc8>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004112:	4b20      	ldr	r3, [pc, #128]	; (8004194 <prvAddNewTaskToReadyList+0xd0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <prvAddNewTaskToReadyList+0xd0>)
 800411a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <prvAddNewTaskToReadyList+0xd0>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <prvAddNewTaskToReadyList+0xd4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d903      	bls.n	8004138 <prvAddNewTaskToReadyList+0x74>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	4a18      	ldr	r2, [pc, #96]	; (8004198 <prvAddNewTaskToReadyList+0xd4>)
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	4613      	mov	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <prvAddNewTaskToReadyList+0xd8>)
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f7fe ff1d 	bl	8002f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004154:	f7ff f8c2 	bl	80032dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004158:	4b0d      	ldr	r3, [pc, #52]	; (8004190 <prvAddNewTaskToReadyList+0xcc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00e      	beq.n	800417e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <prvAddNewTaskToReadyList+0xc8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	429a      	cmp	r2, r3
 800416c:	d207      	bcs.n	800417e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <prvAddNewTaskToReadyList+0xdc>)
 8004170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20001a44 	.word	0x20001a44
 800418c:	20001570 	.word	0x20001570
 8004190:	20001a50 	.word	0x20001a50
 8004194:	20001a60 	.word	0x20001a60
 8004198:	20001a4c 	.word	0x20001a4c
 800419c:	20001574 	.word	0x20001574
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d017      	beq.n	80041e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <vTaskDelay+0x60>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <vTaskDelay+0x30>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60bb      	str	r3, [r7, #8]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041d4:	f000 f88a 	bl	80042ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041d8:	2100      	movs	r1, #0
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fd04 	bl	8004be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041e0:	f000 f892 	bl	8004308 <xTaskResumeAll>
 80041e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d107      	bne.n	80041fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <vTaskDelay+0x64>)
 80041ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20001a6c 	.word	0x20001a6c
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	; 0x28
 8004210:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004216:	2300      	movs	r3, #0
 8004218:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800421a:	463a      	mov	r2, r7
 800421c:	1d39      	adds	r1, r7, #4
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fc7e 	bl	8002b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004228:	6839      	ldr	r1, [r7, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	9202      	str	r2, [sp, #8]
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	2300      	movs	r3, #0
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	460a      	mov	r2, r1
 800423a:	4924      	ldr	r1, [pc, #144]	; (80042cc <vTaskStartScheduler+0xc0>)
 800423c:	4824      	ldr	r0, [pc, #144]	; (80042d0 <vTaskStartScheduler+0xc4>)
 800423e:	f7ff fe01 	bl	8003e44 <xTaskCreateStatic>
 8004242:	4603      	mov	r3, r0
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <vTaskStartScheduler+0xc8>)
 8004246:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <vTaskStartScheduler+0xc8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004250:	2301      	movs	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e001      	b.n	800425a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d102      	bne.n	8004266 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004260:	f000 fd16 	bl	8004c90 <xTimerCreateTimerTask>
 8004264:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11b      	bne.n	80042a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	613b      	str	r3, [r7, #16]
}
 800427e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004280:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <vTaskStartScheduler+0xcc>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3354      	adds	r3, #84	; 0x54
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <vTaskStartScheduler+0xd0>)
 8004288:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <vTaskStartScheduler+0xd4>)
 800428c:	f04f 32ff 	mov.w	r2, #4294967295
 8004290:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <vTaskStartScheduler+0xd8>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004298:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <vTaskStartScheduler+0xdc>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800429e:	f7fe ff7b 	bl	8003198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042a2:	e00e      	b.n	80042c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d10a      	bne.n	80042c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60fb      	str	r3, [r7, #12]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vTaskStartScheduler+0xb4>
}
 80042c2:	bf00      	nop
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	08005e9c 	.word	0x08005e9c
 80042d0:	08004915 	.word	0x08004915
 80042d4:	20001a68 	.word	0x20001a68
 80042d8:	20001570 	.word	0x20001570
 80042dc:	20000010 	.word	0x20000010
 80042e0:	20001a64 	.word	0x20001a64
 80042e4:	20001a50 	.word	0x20001a50
 80042e8:	20001a48 	.word	0x20001a48

080042ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <vTaskSuspendAll+0x18>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	4a03      	ldr	r2, [pc, #12]	; (8004304 <vTaskSuspendAll+0x18>)
 80042f8:	6013      	str	r3, [r2, #0]
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20001a6c 	.word	0x20001a6c

08004308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004316:	4b42      	ldr	r3, [pc, #264]	; (8004420 <xTaskResumeAll+0x118>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <xTaskResumeAll+0x2c>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	603b      	str	r3, [r7, #0]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004334:	f7fe ffa2 	bl	800327c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <xTaskResumeAll+0x118>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a38      	ldr	r2, [pc, #224]	; (8004420 <xTaskResumeAll+0x118>)
 8004340:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004342:	4b37      	ldr	r3, [pc, #220]	; (8004420 <xTaskResumeAll+0x118>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d162      	bne.n	8004410 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <xTaskResumeAll+0x11c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d05e      	beq.n	8004410 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004352:	e02f      	b.n	80043b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004354:	4b34      	ldr	r3, [pc, #208]	; (8004428 <xTaskResumeAll+0x120>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	3318      	adds	r3, #24
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fe6f 	bl	8003044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3304      	adds	r3, #4
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fe6a 	bl	8003044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	4b2d      	ldr	r3, [pc, #180]	; (800442c <xTaskResumeAll+0x124>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d903      	bls.n	8004384 <xTaskResumeAll+0x7c>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a2a      	ldr	r2, [pc, #168]	; (800442c <xTaskResumeAll+0x124>)
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a27      	ldr	r2, [pc, #156]	; (8004430 <xTaskResumeAll+0x128>)
 8004392:	441a      	add	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3304      	adds	r3, #4
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f7fe fdf7 	bl	8002f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <xTaskResumeAll+0x12c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d302      	bcc.n	80043b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043ae:	4b22      	ldr	r3, [pc, #136]	; (8004438 <xTaskResumeAll+0x130>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043b4:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <xTaskResumeAll+0x120>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1cb      	bne.n	8004354 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043c2:	f000 fb61 	bl	8004a88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <xTaskResumeAll+0x134>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043d2:	f000 f845 	bl	8004460 <xTaskIncrementTick>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <xTaskResumeAll+0x130>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f1      	bne.n	80043d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <xTaskResumeAll+0x134>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043f4:	4b10      	ldr	r3, [pc, #64]	; (8004438 <xTaskResumeAll+0x130>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004400:	4b0f      	ldr	r3, [pc, #60]	; (8004440 <xTaskResumeAll+0x138>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004410:	f7fe ff64 	bl	80032dc <vPortExitCritical>

	return xAlreadyYielded;
 8004414:	68bb      	ldr	r3, [r7, #8]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20001a6c 	.word	0x20001a6c
 8004424:	20001a44 	.word	0x20001a44
 8004428:	20001a04 	.word	0x20001a04
 800442c:	20001a4c 	.word	0x20001a4c
 8004430:	20001574 	.word	0x20001574
 8004434:	20001570 	.word	0x20001570
 8004438:	20001a58 	.word	0x20001a58
 800443c:	20001a54 	.word	0x20001a54
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800444a:	4b04      	ldr	r3, [pc, #16]	; (800445c <xTaskGetTickCount+0x18>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004450:	687b      	ldr	r3, [r7, #4]
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20001a48 	.word	0x20001a48

08004460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800446a:	4b51      	ldr	r3, [pc, #324]	; (80045b0 <xTaskIncrementTick+0x150>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 808e 	bne.w	8004590 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004474:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <xTaskIncrementTick+0x154>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800447c:	4a4d      	ldr	r2, [pc, #308]	; (80045b4 <xTaskIncrementTick+0x154>)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d120      	bne.n	80044ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004488:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <xTaskIncrementTick+0x158>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	603b      	str	r3, [r7, #0]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xTaskIncrementTick+0x46>
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b43      	ldr	r3, [pc, #268]	; (80045bc <xTaskIncrementTick+0x15c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a41      	ldr	r2, [pc, #260]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4a41      	ldr	r2, [pc, #260]	; (80045bc <xTaskIncrementTick+0x15c>)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <xTaskIncrementTick+0x160>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	4a3f      	ldr	r2, [pc, #252]	; (80045c0 <xTaskIncrementTick+0x160>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	f000 fadf 	bl	8004a88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ca:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <xTaskIncrementTick+0x164>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d34e      	bcc.n	8004572 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d4:	4b38      	ldr	r3, [pc, #224]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <xTaskIncrementTick+0x82>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <xTaskIncrementTick+0x84>
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e8:	4b36      	ldr	r3, [pc, #216]	; (80045c4 <xTaskIncrementTick+0x164>)
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	601a      	str	r2, [r3, #0]
					break;
 80044f0:	e03f      	b.n	8004572 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d203      	bcs.n	8004512 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800450a:	4a2e      	ldr	r2, [pc, #184]	; (80045c4 <xTaskIncrementTick+0x164>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]
						break;
 8004510:	e02f      	b.n	8004572 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3304      	adds	r3, #4
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fd94 	bl	8003044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3318      	adds	r3, #24
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fd8b 	bl	8003044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <xTaskIncrementTick+0x168>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d903      	bls.n	8004542 <xTaskIncrementTick+0xe2>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453e:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <xTaskIncrementTick+0x168>)
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <xTaskIncrementTick+0x16c>)
 8004550:	441a      	add	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3304      	adds	r3, #4
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7fe fd18 	bl	8002f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <xTaskIncrementTick+0x170>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d3b3      	bcc.n	80044d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004570:	e7b0      	b.n	80044d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <xTaskIncrementTick+0x170>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4914      	ldr	r1, [pc, #80]	; (80045cc <xTaskIncrementTick+0x16c>)
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d907      	bls.n	800459a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e004      	b.n	800459a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <xTaskIncrementTick+0x174>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <xTaskIncrementTick+0x174>)
 8004598:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <xTaskIncrementTick+0x178>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20001a6c 	.word	0x20001a6c
 80045b4:	20001a48 	.word	0x20001a48
 80045b8:	200019fc 	.word	0x200019fc
 80045bc:	20001a00 	.word	0x20001a00
 80045c0:	20001a5c 	.word	0x20001a5c
 80045c4:	20001a64 	.word	0x20001a64
 80045c8:	20001a4c 	.word	0x20001a4c
 80045cc:	20001574 	.word	0x20001574
 80045d0:	20001570 	.word	0x20001570
 80045d4:	20001a54 	.word	0x20001a54
 80045d8:	20001a58 	.word	0x20001a58

080045dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <vTaskSwitchContext+0xb0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045ea:	4b29      	ldr	r3, [pc, #164]	; (8004690 <vTaskSwitchContext+0xb4>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045f0:	e046      	b.n	8004680 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <vTaskSwitchContext+0xb4>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045f8:	4b26      	ldr	r3, [pc, #152]	; (8004694 <vTaskSwitchContext+0xb8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e010      	b.n	8004622 <vTaskSwitchContext+0x46>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10a      	bne.n	800461c <vTaskSwitchContext+0x40>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	607b      	str	r3, [r7, #4]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <vTaskSwitchContext+0x3e>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3b01      	subs	r3, #1
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	491d      	ldr	r1, [pc, #116]	; (8004698 <vTaskSwitchContext+0xbc>)
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0e4      	beq.n	8004600 <vTaskSwitchContext+0x24>
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <vTaskSwitchContext+0xbc>)
 8004642:	4413      	add	r3, r2
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3308      	adds	r3, #8
 8004658:	429a      	cmp	r2, r3
 800465a:	d104      	bne.n	8004666 <vTaskSwitchContext+0x8a>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <vTaskSwitchContext+0xc0>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <vTaskSwitchContext+0xb8>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <vTaskSwitchContext+0xc0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3354      	adds	r3, #84	; 0x54
 800467c:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <vTaskSwitchContext+0xc4>)
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20001a6c 	.word	0x20001a6c
 8004690:	20001a58 	.word	0x20001a58
 8004694:	20001a4c 	.word	0x20001a4c
 8004698:	20001574 	.word	0x20001574
 800469c:	20001570 	.word	0x20001570
 80046a0:	20000010 	.word	0x20000010

080046a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046ca:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <vTaskPlaceOnEventList+0x44>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3318      	adds	r3, #24
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fe fc7e 	bl	8002fd4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d8:	2101      	movs	r1, #1
 80046da:	6838      	ldr	r0, [r7, #0]
 80046dc:	f000 fa84 	bl	8004be8 <prvAddCurrentTaskToDelayedList>
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20001570 	.word	0x20001570

080046ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	617b      	str	r3, [r7, #20]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <vTaskPlaceOnEventListRestricted+0x54>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3318      	adds	r3, #24
 800471a:	4619      	mov	r1, r3
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7fe fc36 	bl	8002f8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004728:	f04f 33ff 	mov.w	r3, #4294967295
 800472c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f000 fa59 	bl	8004be8 <prvAddCurrentTaskToDelayedList>
	}
 8004736:	bf00      	nop
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20001570 	.word	0x20001570

08004744 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	60fb      	str	r3, [r7, #12]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3318      	adds	r3, #24
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fc65 	bl	8003044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <xTaskRemoveFromEventList+0xb0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11d      	bne.n	80047be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3304      	adds	r3, #4
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fc5c 	bl	8003044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	4b19      	ldr	r3, [pc, #100]	; (80047f8 <xTaskRemoveFromEventList+0xb4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d903      	bls.n	80047a0 <xTaskRemoveFromEventList+0x5c>
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <xTaskRemoveFromEventList+0xb4>)
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4a13      	ldr	r2, [pc, #76]	; (80047fc <xTaskRemoveFromEventList+0xb8>)
 80047ae:	441a      	add	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f7fe fbe9 	bl	8002f8e <vListInsertEnd>
 80047bc:	e005      	b.n	80047ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3318      	adds	r3, #24
 80047c2:	4619      	mov	r1, r3
 80047c4:	480e      	ldr	r0, [pc, #56]	; (8004800 <xTaskRemoveFromEventList+0xbc>)
 80047c6:	f7fe fbe2 	bl	8002f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <xTaskRemoveFromEventList+0xc0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d905      	bls.n	80047e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <xTaskRemoveFromEventList+0xc4>)
 80047de:	2201      	movs	r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e001      	b.n	80047e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20001a6c 	.word	0x20001a6c
 80047f8:	20001a4c 	.word	0x20001a4c
 80047fc:	20001574 	.word	0x20001574
 8004800:	20001a04 	.word	0x20001a04
 8004804:	20001570 	.word	0x20001570
 8004808:	20001a58 	.word	0x20001a58

0800480c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <vTaskInternalSetTimeOutState+0x24>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <vTaskInternalSetTimeOutState+0x28>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	605a      	str	r2, [r3, #4]
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20001a5c 	.word	0x20001a5c
 8004834:	20001a48 	.word	0x20001a48

08004838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	613b      	str	r3, [r7, #16]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	60fb      	str	r3, [r7, #12]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800487a:	f7fe fcff 	bl	800327c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800487e:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <xTaskCheckForTimeOut+0xbc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d102      	bne.n	800489e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e023      	b.n	80048e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <xTaskCheckForTimeOut+0xc0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d007      	beq.n	80048ba <xTaskCheckForTimeOut+0x82>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d302      	bcc.n	80048ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e015      	b.n	80048e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d20b      	bcs.n	80048dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7ff ff9b 	bl	800480c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e004      	b.n	80048e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048e6:	f7fe fcf9 	bl	80032dc <vPortExitCritical>

	return xReturn;
 80048ea:	69fb      	ldr	r3, [r7, #28]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20001a48 	.word	0x20001a48
 80048f8:	20001a5c 	.word	0x20001a5c

080048fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <vTaskMissedYield+0x14>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	bc80      	pop	{r7}
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20001a58 	.word	0x20001a58

08004914 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800491c:	f000 f852 	bl	80049c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <prvIdleTask+0x28>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d9f9      	bls.n	800491c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <prvIdleTask+0x2c>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004938:	e7f0      	b.n	800491c <prvIdleTask+0x8>
 800493a:	bf00      	nop
 800493c:	20001574 	.word	0x20001574
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
 800494e:	e00c      	b.n	800496a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <prvInitialiseTaskLists+0x60>)
 800495c:	4413      	add	r3, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe faea 	bl	8002f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3301      	adds	r3, #1
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b37      	cmp	r3, #55	; 0x37
 800496e:	d9ef      	bls.n	8004950 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004970:	480d      	ldr	r0, [pc, #52]	; (80049a8 <prvInitialiseTaskLists+0x64>)
 8004972:	f7fe fae1 	bl	8002f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004976:	480d      	ldr	r0, [pc, #52]	; (80049ac <prvInitialiseTaskLists+0x68>)
 8004978:	f7fe fade 	bl	8002f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800497c:	480c      	ldr	r0, [pc, #48]	; (80049b0 <prvInitialiseTaskLists+0x6c>)
 800497e:	f7fe fadb 	bl	8002f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004982:	480c      	ldr	r0, [pc, #48]	; (80049b4 <prvInitialiseTaskLists+0x70>)
 8004984:	f7fe fad8 	bl	8002f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004988:	480b      	ldr	r0, [pc, #44]	; (80049b8 <prvInitialiseTaskLists+0x74>)
 800498a:	f7fe fad5 	bl	8002f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <prvInitialiseTaskLists+0x78>)
 8004990:	4a05      	ldr	r2, [pc, #20]	; (80049a8 <prvInitialiseTaskLists+0x64>)
 8004992:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvInitialiseTaskLists+0x7c>)
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <prvInitialiseTaskLists+0x68>)
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20001574 	.word	0x20001574
 80049a8:	200019d4 	.word	0x200019d4
 80049ac:	200019e8 	.word	0x200019e8
 80049b0:	20001a04 	.word	0x20001a04
 80049b4:	20001a18 	.word	0x20001a18
 80049b8:	20001a30 	.word	0x20001a30
 80049bc:	200019fc 	.word	0x200019fc
 80049c0:	20001a00 	.word	0x20001a00

080049c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ca:	e019      	b.n	8004a00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049cc:	f7fe fc56 	bl	800327c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80049d0:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <prvCheckTasksWaitingTermination+0x50>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3304      	adds	r3, #4
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fe fb31 	bl	8003044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	4a0b      	ldr	r2, [pc, #44]	; (8004a18 <prvCheckTasksWaitingTermination+0x54>)
 80049ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 80049f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049f6:	f7fe fc71 	bl	80032dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f810 	bl	8004a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a00:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <prvCheckTasksWaitingTermination+0x58>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e1      	bne.n	80049cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20001a18 	.word	0x20001a18
 8004a18:	20001a44 	.word	0x20001a44
 8004a1c:	20001a2c 	.word	0x20001a2c

08004a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3354      	adds	r3, #84	; 0x54
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fdd5 	bl	80055dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe f965 	bl	8002d10 <vPortFree>
				vPortFree( pxTCB );
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe f962 	bl	8002d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a4c:	e018      	b.n	8004a80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d103      	bne.n	8004a60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fe f959 	bl	8002d10 <vPortFree>
	}
 8004a5e:	e00f      	b.n	8004a80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d00a      	beq.n	8004a80 <prvDeleteTCB+0x60>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	60fb      	str	r3, [r7, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <prvDeleteTCB+0x5e>
	}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <prvResetNextTaskUnblockTime+0x40>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <prvResetNextTaskUnblockTime+0x14>
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <prvResetNextTaskUnblockTime+0x16>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d004      	beq.n	8004aac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <prvResetNextTaskUnblockTime+0x44>)
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004aaa:	e008      	b.n	8004abe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <prvResetNextTaskUnblockTime+0x40>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4a04      	ldr	r2, [pc, #16]	; (8004acc <prvResetNextTaskUnblockTime+0x44>)
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr
 8004ac8:	200019fc 	.word	0x200019fc
 8004acc:	20001a64 	.word	0x20001a64

08004ad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <xTaskGetSchedulerState+0x34>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d102      	bne.n	8004ae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	e008      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae4:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <xTaskGetSchedulerState+0x38>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004aec:	2302      	movs	r3, #2
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	e001      	b.n	8004af6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004af6:	687b      	ldr	r3, [r7, #4]
	}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20001a50 	.word	0x20001a50
 8004b08:	20001a6c 	.word	0x20001a6c

08004b0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d056      	beq.n	8004bd0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b22:	4b2e      	ldr	r3, [pc, #184]	; (8004bdc <xTaskPriorityDisinherit+0xd0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d00a      	beq.n	8004b42 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60fb      	str	r3, [r7, #12]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60bb      	str	r3, [r7, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d02c      	beq.n	8004bd0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d128      	bne.n	8004bd0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fa5e 	bl	8003044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <xTaskPriorityDisinherit+0xd4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d903      	bls.n	8004bb0 <xTaskPriorityDisinherit+0xa4>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <xTaskPriorityDisinherit+0xd4>)
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <xTaskPriorityDisinherit+0xd8>)
 8004bbe:	441a      	add	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7fe f9e1 	bl	8002f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bd0:	697b      	ldr	r3, [r7, #20]
	}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20001570 	.word	0x20001570
 8004be0:	20001a4c 	.word	0x20001a4c
 8004be4:	20001574 	.word	0x20001574

08004be8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bf2:	4b21      	ldr	r3, [pc, #132]	; (8004c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe fa20 	bl	8003044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d10a      	bne.n	8004c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c12:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4819      	ldr	r0, [pc, #100]	; (8004c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c1c:	f7fe f9b7 	bl	8002f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c20:	e026      	b.n	8004c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4413      	add	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d209      	bcs.n	8004c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c3a:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe f9c4 	bl	8002fd4 <vListInsert>
}
 8004c4c:	e010      	b.n	8004c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fe f9ba 	bl	8002fd4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d202      	bcs.n	8004c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c6a:	4a08      	ldr	r2, [pc, #32]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6013      	str	r3, [r2, #0]
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20001a48 	.word	0x20001a48
 8004c7c:	20001570 	.word	0x20001570
 8004c80:	20001a30 	.word	0x20001a30
 8004c84:	20001a00 	.word	0x20001a00
 8004c88:	200019fc 	.word	0x200019fc
 8004c8c:	20001a64 	.word	0x20001a64

08004c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c9a:	f000 fb5b 	bl	8005354 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <xTimerCreateTimerTask+0x80>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d021      	beq.n	8004cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cae:	1d3a      	adds	r2, r7, #4
 8004cb0:	f107 0108 	add.w	r1, r7, #8
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd ff4b 	bl	8002b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	9202      	str	r2, [sp, #8]
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	2302      	movs	r3, #2
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	460a      	mov	r2, r1
 8004cd0:	4910      	ldr	r1, [pc, #64]	; (8004d14 <xTimerCreateTimerTask+0x84>)
 8004cd2:	4811      	ldr	r0, [pc, #68]	; (8004d18 <xTimerCreateTimerTask+0x88>)
 8004cd4:	f7ff f8b6 	bl	8003e44 <xTaskCreateStatic>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4a10      	ldr	r2, [pc, #64]	; (8004d1c <xTimerCreateTimerTask+0x8c>)
 8004cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTimerCreateTimerTask+0x8c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d06:	697b      	ldr	r3, [r7, #20]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20001aa0 	.word	0x20001aa0
 8004d14:	08005ea4 	.word	0x08005ea4
 8004d18:	08004f5d 	.word	0x08004f5d
 8004d1c:	20001aa4 	.word	0x20001aa4

08004d20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004d2e:	2030      	movs	r0, #48	; 0x30
 8004d30:	f7fd ff2a 	bl	8002b88 <pvPortMalloc>
 8004d34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f846 	bl	8004ddc <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004d58:	697b      	ldr	r3, [r7, #20]
	}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b08a      	sub	sp, #40	; 0x28
 8004d66:	af02      	add	r7, sp, #8
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004d70:	2330      	movs	r3, #48	; 0x30
 8004d72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b30      	cmp	r3, #48	; 0x30
 8004d78:	d00a      	beq.n	8004d90 <xTimerCreateStatic+0x2e>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	61bb      	str	r3, [r7, #24]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <xTimerCreateStatic+0x4a>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00d      	beq.n	8004dd2 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	9301      	str	r3, [sp, #4]
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f809 	bl	8004ddc <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
	}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	617b      	str	r3, [r7, #20]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004e0c:	f000 faa2 	bl	8005354 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	6a3a      	ldr	r2, [r7, #32]
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe f89f 	bl	8002f76 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10a      	bne.n	8004e6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	623b      	str	r3, [r7, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	e7fe      	b.n	8004e6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <xTimerGenericCommand+0x98>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d02a      	beq.n	8004ecc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	dc18      	bgt.n	8004eba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e88:	f7ff fe22 	bl	8004ad0 <xTaskGetSchedulerState>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d109      	bne.n	8004ea6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e92:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <xTimerGenericCommand+0x98>)
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	f107 0110 	add.w	r1, r7, #16
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9e:	f7fe fbef 	bl	8003680 <xQueueGenericSend>
 8004ea2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ea4:	e012      	b.n	8004ecc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <xTimerGenericCommand+0x98>)
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f107 0110 	add.w	r1, r7, #16
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f7fe fbe5 	bl	8003680 <xQueueGenericSend>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24
 8004eb8:	e008      	b.n	8004ecc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <xTimerGenericCommand+0x98>)
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	f107 0110 	add.w	r1, r7, #16
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	f7fe fcd9 	bl	800387c <xQueueGenericSendFromISR>
 8004eca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3728      	adds	r7, #40	; 0x28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20001aa0 	.word	0x20001aa0

08004edc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <prvProcessExpiredTimer+0x7c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe f8a5 	bl	8003044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d122      	bne.n	8004f48 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	18d1      	adds	r1, r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	f000 f8c8 	bl	80050a4 <prvInsertTimerInActiveList>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	2100      	movs	r1, #0
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f7ff ff8b 	bl	8004e40 <xTimerGenericCommand>
 8004f2a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60fb      	str	r3, [r7, #12]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	6978      	ldr	r0, [r7, #20]
 8004f4e:	4798      	blx	r3
}
 8004f50:	bf00      	nop
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20001a98 	.word	0x20001a98

08004f5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f64:	f107 0308 	add.w	r3, r7, #8
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f857 	bl	800501c <prvGetNextExpireTime>
 8004f6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4619      	mov	r1, r3
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f803 	bl	8004f80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f7a:	f000 f8d5 	bl	8005128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f7e:	e7f1      	b.n	8004f64 <prvTimerTask+0x8>

08004f80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f8a:	f7ff f9af 	bl	80042ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f8e:	f107 0308 	add.w	r3, r7, #8
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f866 	bl	8005064 <prvSampleTimeNow>
 8004f98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d130      	bne.n	8005002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10a      	bne.n	8004fbc <prvProcessTimerOrBlockTask+0x3c>
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d806      	bhi.n	8004fbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fae:	f7ff f9ab 	bl	8004308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fb2:	68f9      	ldr	r1, [r7, #12]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff91 	bl	8004edc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fba:	e024      	b.n	8005006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <prvProcessTimerOrBlockTask+0x90>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fd4:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <prvProcessTimerOrBlockTask+0x94>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	f7fe fefb 	bl	8003ddc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fe6:	f7ff f98f 	bl	8004308 <xTaskResumeAll>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <prvProcessTimerOrBlockTask+0x98>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
}
 8005000:	e001      	b.n	8005006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005002:	f7ff f981 	bl	8004308 <xTaskResumeAll>
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20001a9c 	.word	0x20001a9c
 8005014:	20001aa0 	.word	0x20001aa0
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <prvGetNextExpireTime+0x44>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf0c      	ite	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	2300      	movne	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <prvGetNextExpireTime+0x44>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005052:	68fb      	ldr	r3, [r7, #12]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20001a98 	.word	0x20001a98

08005064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800506c:	f7ff f9ea 	bl	8004444 <xTaskGetTickCount>
 8005070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <prvSampleTimeNow+0x3c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	d205      	bcs.n	8005088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800507c:	f000 f908 	bl	8005290 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e002      	b.n	800508e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800508e:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <prvSampleTimeNow+0x3c>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005094:	68fb      	ldr	r3, [r7, #12]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20001aa8 	.word	0x20001aa8

080050a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d812      	bhi.n	80050f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d302      	bcc.n	80050de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e01b      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <prvInsertTimerInActiveList+0x7c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f7fd ff73 	bl	8002fd4 <vListInsert>
 80050ee:	e012      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d206      	bcs.n	8005106 <prvInsertTimerInActiveList+0x62>
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d302      	bcc.n	8005106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005100:	2301      	movs	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	e007      	b.n	8005116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <prvInsertTimerInActiveList+0x80>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fd ff5f 	bl	8002fd4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005116:	697b      	ldr	r3, [r7, #20]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20001a9c 	.word	0x20001a9c
 8005124:	20001a98 	.word	0x20001a98

08005128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08e      	sub	sp, #56	; 0x38
 800512c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800512e:	e09d      	b.n	800526c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	da18      	bge.n	8005168 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	3304      	adds	r3, #4
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	61fb      	str	r3, [r7, #28]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800515e:	6850      	ldr	r0, [r2, #4]
 8005160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005162:	6892      	ldr	r2, [r2, #8]
 8005164:	4611      	mov	r1, r2
 8005166:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db7d      	blt.n	800526a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd ff60 	bl	8003044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005184:	463b      	mov	r3, r7
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff6c 	bl	8005064 <prvSampleTimeNow>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b09      	cmp	r3, #9
 8005192:	d86b      	bhi.n	800526c <prvProcessReceivedCommands+0x144>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <prvProcessReceivedCommands+0x74>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051c5 	.word	0x080051c5
 80051a8:	0800526d 	.word	0x0800526d
 80051ac:	08005221 	.word	0x08005221
 80051b0:	08005259 	.word	0x08005259
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051c5 	.word	0x080051c5
 80051bc:	0800526d 	.word	0x0800526d
 80051c0:	08005221 	.word	0x08005221
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	18d1      	adds	r1, r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d2:	f7ff ff67 	bl	80050a4 <prvInsertTimerInActiveList>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d047      	beq.n	800526c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d13f      	bne.n	800526c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	441a      	add	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fe:	f7ff fe1f 	bl	8004e40 <xTimerGenericCommand>
 8005202:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d130      	bne.n	800526c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61bb      	str	r3, [r7, #24]
}
 800521c:	bf00      	nop
 800521e:	e7fe      	b.n	800521e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	18d1      	adds	r1, r2, r3
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005252:	f7ff ff27 	bl	80050a4 <prvInsertTimerInActiveList>
					break;
 8005256:	e009      	b.n	800526c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005264:	f7fd fd54 	bl	8002d10 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005268:	e000      	b.n	800526c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800526a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800526c:	4b07      	ldr	r3, [pc, #28]	; (800528c <prvProcessReceivedCommands+0x164>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	1d39      	adds	r1, r7, #4
 8005272:	2200      	movs	r2, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f7fe fb99 	bl	80039ac <xQueueReceive>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f af57 	bne.w	8005130 <prvProcessReceivedCommands+0x8>
	}
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3730      	adds	r7, #48	; 0x30
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20001aa0 	.word	0x20001aa0

08005290 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005296:	e045      	b.n	8005324 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <prvSwitchTimerLists+0xbc>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <prvSwitchTimerLists+0xbc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fd fec7 	bl	8003044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d12e      	bne.n	8005324 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4413      	add	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d90e      	bls.n	80052f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052e4:	4b19      	ldr	r3, [pc, #100]	; (800534c <prvSwitchTimerLists+0xbc>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f7fd fe70 	bl	8002fd4 <vListInsert>
 80052f4:	e016      	b.n	8005324 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	2100      	movs	r1, #0
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fd9d 	bl	8004e40 <xTimerGenericCommand>
 8005306:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <prvSwitchTimerLists+0x94>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	603b      	str	r3, [r7, #0]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <prvSwitchTimerLists+0xbc>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1b4      	bne.n	8005298 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <prvSwitchTimerLists+0xbc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <prvSwitchTimerLists+0xc0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <prvSwitchTimerLists+0xbc>)
 800533a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <prvSwitchTimerLists+0xc0>)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	6013      	str	r3, [r2, #0]
}
 8005342:	bf00      	nop
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20001a98 	.word	0x20001a98
 8005350:	20001a9c 	.word	0x20001a9c

08005354 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800535a:	f7fd ff8f 	bl	800327c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800535e:	4b15      	ldr	r3, [pc, #84]	; (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d120      	bne.n	80053a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005366:	4814      	ldr	r0, [pc, #80]	; (80053b8 <prvCheckForValidListAndQueue+0x64>)
 8005368:	f7fd fde6 	bl	8002f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800536c:	4813      	ldr	r0, [pc, #76]	; (80053bc <prvCheckForValidListAndQueue+0x68>)
 800536e:	f7fd fde3 	bl	8002f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <prvCheckForValidListAndQueue+0x6c>)
 8005374:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <prvCheckForValidListAndQueue+0x64>)
 8005376:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <prvCheckForValidListAndQueue+0x70>)
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <prvCheckForValidListAndQueue+0x68>)
 800537c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <prvCheckForValidListAndQueue+0x74>)
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <prvCheckForValidListAndQueue+0x78>)
 8005386:	2110      	movs	r1, #16
 8005388:	200a      	movs	r0, #10
 800538a:	f7fe f8df 	bl	800354c <xQueueGenericCreateStatic>
 800538e:	4603      	mov	r3, r0
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005392:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <prvCheckForValidListAndQueue+0x60>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <prvCheckForValidListAndQueue+0x60>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	490b      	ldr	r1, [pc, #44]	; (80053d0 <prvCheckForValidListAndQueue+0x7c>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fcf2 	bl	8003d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a8:	f7fd ff98 	bl	80032dc <vPortExitCritical>
}
 80053ac:	bf00      	nop
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20001aa0 	.word	0x20001aa0
 80053b8:	20001a70 	.word	0x20001a70
 80053bc:	20001a84 	.word	0x20001a84
 80053c0:	20001a98 	.word	0x20001a98
 80053c4:	20001a9c 	.word	0x20001a9c
 80053c8:	20001b4c 	.word	0x20001b4c
 80053cc:	20001aac 	.word	0x20001aac
 80053d0:	08005eac 	.word	0x08005eac

080053d4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <pvTimerGetTimerID+0x28>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80053fc:	f7fd ff3e 	bl	800327c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005406:	f7fd ff69 	bl	80032dc <vPortExitCritical>

	return pvReturn;
 800540a:	693b      	ldr	r3, [r7, #16]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000010 	.word	0x20000010

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	2600      	movs	r6, #0
 8005424:	4d0c      	ldr	r5, [pc, #48]	; (8005458 <__libc_init_array+0x38>)
 8005426:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	f000 fd06 	bl	8005e40 <_init>
 8005434:	2600      	movs	r6, #0
 8005436:	4d0a      	ldr	r5, [pc, #40]	; (8005460 <__libc_init_array+0x40>)
 8005438:	4c0a      	ldr	r4, [pc, #40]	; (8005464 <__libc_init_array+0x44>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005fcc 	.word	0x08005fcc
 800545c:	08005fcc 	.word	0x08005fcc
 8005460:	08005fcc 	.word	0x08005fcc
 8005464:	08005fd0 	.word	0x08005fd0

08005468 <__retarget_lock_acquire_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_release_recursive>:
 800546a:	4770      	bx	lr

0800546c <memcpy>:
 800546c:	440a      	add	r2, r1
 800546e:	4291      	cmp	r1, r2
 8005470:	f100 33ff 	add.w	r3, r0, #4294967295
 8005474:	d100      	bne.n	8005478 <memcpy+0xc>
 8005476:	4770      	bx	lr
 8005478:	b510      	push	{r4, lr}
 800547a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547e:	4291      	cmp	r1, r2
 8005480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005484:	d1f9      	bne.n	800547a <memcpy+0xe>
 8005486:	bd10      	pop	{r4, pc}

08005488 <memset>:
 8005488:	4603      	mov	r3, r0
 800548a:	4402      	add	r2, r0
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	f803 1b01 	strb.w	r1, [r3], #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0e      	ldr	r6, [pc, #56]	; (80054d4 <sbrk_aligned+0x3c>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f000 f8f6 	bl	8005694 <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f8f1 	bl	8005694 <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d00a      	beq.n	80054cc <sbrk_aligned+0x34>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d007      	beq.n	80054d0 <sbrk_aligned+0x38>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f8e6 	bl	8005694 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d101      	bne.n	80054d0 <sbrk_aligned+0x38>
 80054cc:	f04f 34ff 	mov.w	r4, #4294967295
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	20001ba4 	.word	0x20001ba4

080054d8 <_malloc_r>:
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4607      	mov	r7, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d905      	bls.n	8005500 <_malloc_r+0x28>
 80054f4:	230c      	movs	r3, #12
 80054f6:	2600      	movs	r6, #0
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4630      	mov	r0, r6
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	4e2e      	ldr	r6, [pc, #184]	; (80055bc <_malloc_r+0xe4>)
 8005502:	f000 f8f7 	bl	80056f4 <__malloc_lock>
 8005506:	6833      	ldr	r3, [r6, #0]
 8005508:	461c      	mov	r4, r3
 800550a:	bb34      	cbnz	r4, 800555a <_malloc_r+0x82>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	f7ff ffc2 	bl	8005498 <sbrk_aligned>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	4604      	mov	r4, r0
 8005518:	d14d      	bne.n	80055b6 <_malloc_r+0xde>
 800551a:	6834      	ldr	r4, [r6, #0]
 800551c:	4626      	mov	r6, r4
 800551e:	2e00      	cmp	r6, #0
 8005520:	d140      	bne.n	80055a4 <_malloc_r+0xcc>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4631      	mov	r1, r6
 8005526:	4638      	mov	r0, r7
 8005528:	eb04 0803 	add.w	r8, r4, r3
 800552c:	f000 f8b2 	bl	8005694 <_sbrk_r>
 8005530:	4580      	cmp	r8, r0
 8005532:	d13a      	bne.n	80055aa <_malloc_r+0xd2>
 8005534:	6821      	ldr	r1, [r4, #0]
 8005536:	3503      	adds	r5, #3
 8005538:	1a6d      	subs	r5, r5, r1
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	4638      	mov	r0, r7
 8005548:	4629      	mov	r1, r5
 800554a:	f7ff ffa5 	bl	8005498 <sbrk_aligned>
 800554e:	3001      	adds	r0, #1
 8005550:	d02b      	beq.n	80055aa <_malloc_r+0xd2>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	442b      	add	r3, r5
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	e00e      	b.n	8005578 <_malloc_r+0xa0>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	1b52      	subs	r2, r2, r5
 800555e:	d41e      	bmi.n	800559e <_malloc_r+0xc6>
 8005560:	2a0b      	cmp	r2, #11
 8005562:	d916      	bls.n	8005592 <_malloc_r+0xba>
 8005564:	1961      	adds	r1, r4, r5
 8005566:	42a3      	cmp	r3, r4
 8005568:	6025      	str	r5, [r4, #0]
 800556a:	bf18      	it	ne
 800556c:	6059      	strne	r1, [r3, #4]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	bf08      	it	eq
 8005572:	6031      	streq	r1, [r6, #0]
 8005574:	5162      	str	r2, [r4, r5]
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	4638      	mov	r0, r7
 800557a:	f104 060b 	add.w	r6, r4, #11
 800557e:	f000 f8bf 	bl	8005700 <__malloc_unlock>
 8005582:	f026 0607 	bic.w	r6, r6, #7
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	1af2      	subs	r2, r6, r3
 800558a:	d0b6      	beq.n	80054fa <_malloc_r+0x22>
 800558c:	1b9b      	subs	r3, r3, r6
 800558e:	50a3      	str	r3, [r4, r2]
 8005590:	e7b3      	b.n	80054fa <_malloc_r+0x22>
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	42a3      	cmp	r3, r4
 8005596:	bf0c      	ite	eq
 8005598:	6032      	streq	r2, [r6, #0]
 800559a:	605a      	strne	r2, [r3, #4]
 800559c:	e7ec      	b.n	8005578 <_malloc_r+0xa0>
 800559e:	4623      	mov	r3, r4
 80055a0:	6864      	ldr	r4, [r4, #4]
 80055a2:	e7b2      	b.n	800550a <_malloc_r+0x32>
 80055a4:	4634      	mov	r4, r6
 80055a6:	6876      	ldr	r6, [r6, #4]
 80055a8:	e7b9      	b.n	800551e <_malloc_r+0x46>
 80055aa:	230c      	movs	r3, #12
 80055ac:	4638      	mov	r0, r7
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	f000 f8a6 	bl	8005700 <__malloc_unlock>
 80055b4:	e7a1      	b.n	80054fa <_malloc_r+0x22>
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	e7de      	b.n	8005578 <_malloc_r+0xa0>
 80055ba:	bf00      	nop
 80055bc:	20001ba0 	.word	0x20001ba0

080055c0 <cleanup_glue>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	460c      	mov	r4, r1
 80055c4:	6809      	ldr	r1, [r1, #0]
 80055c6:	4605      	mov	r5, r0
 80055c8:	b109      	cbz	r1, 80055ce <cleanup_glue+0xe>
 80055ca:	f7ff fff9 	bl	80055c0 <cleanup_glue>
 80055ce:	4621      	mov	r1, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d6:	f000 b899 	b.w	800570c <_free_r>
	...

080055dc <_reclaim_reent>:
 80055dc:	4b2c      	ldr	r3, [pc, #176]	; (8005690 <_reclaim_reent+0xb4>)
 80055de:	b570      	push	{r4, r5, r6, lr}
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4604      	mov	r4, r0
 80055e4:	4283      	cmp	r3, r0
 80055e6:	d051      	beq.n	800568c <_reclaim_reent+0xb0>
 80055e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80055ea:	b143      	cbz	r3, 80055fe <_reclaim_reent+0x22>
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d14a      	bne.n	8005688 <_reclaim_reent+0xac>
 80055f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	b111      	cbz	r1, 80055fe <_reclaim_reent+0x22>
 80055f8:	4620      	mov	r0, r4
 80055fa:	f000 f887 	bl	800570c <_free_r>
 80055fe:	6961      	ldr	r1, [r4, #20]
 8005600:	b111      	cbz	r1, 8005608 <_reclaim_reent+0x2c>
 8005602:	4620      	mov	r0, r4
 8005604:	f000 f882 	bl	800570c <_free_r>
 8005608:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800560a:	b111      	cbz	r1, 8005612 <_reclaim_reent+0x36>
 800560c:	4620      	mov	r0, r4
 800560e:	f000 f87d 	bl	800570c <_free_r>
 8005612:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005614:	b111      	cbz	r1, 800561c <_reclaim_reent+0x40>
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f878 	bl	800570c <_free_r>
 800561c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800561e:	b111      	cbz	r1, 8005626 <_reclaim_reent+0x4a>
 8005620:	4620      	mov	r0, r4
 8005622:	f000 f873 	bl	800570c <_free_r>
 8005626:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005628:	b111      	cbz	r1, 8005630 <_reclaim_reent+0x54>
 800562a:	4620      	mov	r0, r4
 800562c:	f000 f86e 	bl	800570c <_free_r>
 8005630:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005632:	b111      	cbz	r1, 800563a <_reclaim_reent+0x5e>
 8005634:	4620      	mov	r0, r4
 8005636:	f000 f869 	bl	800570c <_free_r>
 800563a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800563c:	b111      	cbz	r1, 8005644 <_reclaim_reent+0x68>
 800563e:	4620      	mov	r0, r4
 8005640:	f000 f864 	bl	800570c <_free_r>
 8005644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005646:	b111      	cbz	r1, 800564e <_reclaim_reent+0x72>
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f85f 	bl	800570c <_free_r>
 800564e:	69a3      	ldr	r3, [r4, #24]
 8005650:	b1e3      	cbz	r3, 800568c <_reclaim_reent+0xb0>
 8005652:	4620      	mov	r0, r4
 8005654:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005656:	4798      	blx	r3
 8005658:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800565a:	b1b9      	cbz	r1, 800568c <_reclaim_reent+0xb0>
 800565c:	4620      	mov	r0, r4
 800565e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005662:	f7ff bfad 	b.w	80055c0 <cleanup_glue>
 8005666:	5949      	ldr	r1, [r1, r5]
 8005668:	b941      	cbnz	r1, 800567c <_reclaim_reent+0xa0>
 800566a:	3504      	adds	r5, #4
 800566c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800566e:	2d80      	cmp	r5, #128	; 0x80
 8005670:	68d9      	ldr	r1, [r3, #12]
 8005672:	d1f8      	bne.n	8005666 <_reclaim_reent+0x8a>
 8005674:	4620      	mov	r0, r4
 8005676:	f000 f849 	bl	800570c <_free_r>
 800567a:	e7ba      	b.n	80055f2 <_reclaim_reent+0x16>
 800567c:	680e      	ldr	r6, [r1, #0]
 800567e:	4620      	mov	r0, r4
 8005680:	f000 f844 	bl	800570c <_free_r>
 8005684:	4631      	mov	r1, r6
 8005686:	e7ef      	b.n	8005668 <_reclaim_reent+0x8c>
 8005688:	2500      	movs	r5, #0
 800568a:	e7ef      	b.n	800566c <_reclaim_reent+0x90>
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	bf00      	nop
 8005690:	20000010 	.word	0x20000010

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	2300      	movs	r3, #0
 8005698:	4d05      	ldr	r5, [pc, #20]	; (80056b0 <_sbrk_r+0x1c>)
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fb fb14 	bl	8000ccc <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	20001ba8 	.word	0x20001ba8

080056b4 <siprintf>:
 80056b4:	b40e      	push	{r1, r2, r3}
 80056b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056ba:	b500      	push	{lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	ab1d      	add	r3, sp, #116	; 0x74
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	9107      	str	r1, [sp, #28]
 80056c6:	9104      	str	r1, [sp, #16]
 80056c8:	4808      	ldr	r0, [pc, #32]	; (80056ec <siprintf+0x38>)
 80056ca:	4909      	ldr	r1, [pc, #36]	; (80056f0 <siprintf+0x3c>)
 80056cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d0:	9105      	str	r1, [sp, #20]
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	a902      	add	r1, sp, #8
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	f000 f8bc 	bl	8005854 <_svfiprintf_r>
 80056dc:	2200      	movs	r2, #0
 80056de:	9b02      	ldr	r3, [sp, #8]
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	b01c      	add	sp, #112	; 0x70
 80056e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e8:	b003      	add	sp, #12
 80056ea:	4770      	bx	lr
 80056ec:	20000010 	.word	0x20000010
 80056f0:	ffff0208 	.word	0xffff0208

080056f4 <__malloc_lock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	; (80056fc <__malloc_lock+0x8>)
 80056f6:	f7ff beb7 	b.w	8005468 <__retarget_lock_acquire_recursive>
 80056fa:	bf00      	nop
 80056fc:	20001b9c 	.word	0x20001b9c

08005700 <__malloc_unlock>:
 8005700:	4801      	ldr	r0, [pc, #4]	; (8005708 <__malloc_unlock+0x8>)
 8005702:	f7ff beb2 	b.w	800546a <__retarget_lock_release_recursive>
 8005706:	bf00      	nop
 8005708:	20001b9c 	.word	0x20001b9c

0800570c <_free_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4605      	mov	r5, r0
 8005710:	2900      	cmp	r1, #0
 8005712:	d040      	beq.n	8005796 <_free_r+0x8a>
 8005714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005718:	1f0c      	subs	r4, r1, #4
 800571a:	2b00      	cmp	r3, #0
 800571c:	bfb8      	it	lt
 800571e:	18e4      	addlt	r4, r4, r3
 8005720:	f7ff ffe8 	bl	80056f4 <__malloc_lock>
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <_free_r+0x8c>)
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	b933      	cbnz	r3, 8005738 <_free_r+0x2c>
 800572a:	6063      	str	r3, [r4, #4]
 800572c:	6014      	str	r4, [r2, #0]
 800572e:	4628      	mov	r0, r5
 8005730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005734:	f7ff bfe4 	b.w	8005700 <__malloc_unlock>
 8005738:	42a3      	cmp	r3, r4
 800573a:	d908      	bls.n	800574e <_free_r+0x42>
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	1821      	adds	r1, r4, r0
 8005740:	428b      	cmp	r3, r1
 8005742:	bf01      	itttt	eq
 8005744:	6819      	ldreq	r1, [r3, #0]
 8005746:	685b      	ldreq	r3, [r3, #4]
 8005748:	1809      	addeq	r1, r1, r0
 800574a:	6021      	streq	r1, [r4, #0]
 800574c:	e7ed      	b.n	800572a <_free_r+0x1e>
 800574e:	461a      	mov	r2, r3
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	b10b      	cbz	r3, 8005758 <_free_r+0x4c>
 8005754:	42a3      	cmp	r3, r4
 8005756:	d9fa      	bls.n	800574e <_free_r+0x42>
 8005758:	6811      	ldr	r1, [r2, #0]
 800575a:	1850      	adds	r0, r2, r1
 800575c:	42a0      	cmp	r0, r4
 800575e:	d10b      	bne.n	8005778 <_free_r+0x6c>
 8005760:	6820      	ldr	r0, [r4, #0]
 8005762:	4401      	add	r1, r0
 8005764:	1850      	adds	r0, r2, r1
 8005766:	4283      	cmp	r3, r0
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	d1e0      	bne.n	800572e <_free_r+0x22>
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4401      	add	r1, r0
 8005772:	6011      	str	r1, [r2, #0]
 8005774:	6053      	str	r3, [r2, #4]
 8005776:	e7da      	b.n	800572e <_free_r+0x22>
 8005778:	d902      	bls.n	8005780 <_free_r+0x74>
 800577a:	230c      	movs	r3, #12
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	e7d6      	b.n	800572e <_free_r+0x22>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	1821      	adds	r1, r4, r0
 8005784:	428b      	cmp	r3, r1
 8005786:	bf01      	itttt	eq
 8005788:	6819      	ldreq	r1, [r3, #0]
 800578a:	685b      	ldreq	r3, [r3, #4]
 800578c:	1809      	addeq	r1, r1, r0
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	6063      	str	r3, [r4, #4]
 8005792:	6054      	str	r4, [r2, #4]
 8005794:	e7cb      	b.n	800572e <_free_r+0x22>
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20001ba0 	.word	0x20001ba0

0800579c <__ssputs_r>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	688e      	ldr	r6, [r1, #8]
 80057a2:	4682      	mov	sl, r0
 80057a4:	429e      	cmp	r6, r3
 80057a6:	460c      	mov	r4, r1
 80057a8:	4690      	mov	r8, r2
 80057aa:	461f      	mov	r7, r3
 80057ac:	d838      	bhi.n	8005820 <__ssputs_r+0x84>
 80057ae:	898a      	ldrh	r2, [r1, #12]
 80057b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057b4:	d032      	beq.n	800581c <__ssputs_r+0x80>
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	6909      	ldr	r1, [r1, #16]
 80057ba:	3301      	adds	r3, #1
 80057bc:	eba5 0901 	sub.w	r9, r5, r1
 80057c0:	6965      	ldr	r5, [r4, #20]
 80057c2:	444b      	add	r3, r9
 80057c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057cc:	106d      	asrs	r5, r5, #1
 80057ce:	429d      	cmp	r5, r3
 80057d0:	bf38      	it	cc
 80057d2:	461d      	movcc	r5, r3
 80057d4:	0553      	lsls	r3, r2, #21
 80057d6:	d531      	bpl.n	800583c <__ssputs_r+0xa0>
 80057d8:	4629      	mov	r1, r5
 80057da:	f7ff fe7d 	bl	80054d8 <_malloc_r>
 80057de:	4606      	mov	r6, r0
 80057e0:	b950      	cbnz	r0, 80057f8 <__ssputs_r+0x5c>
 80057e2:	230c      	movs	r3, #12
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	f8ca 3000 	str.w	r3, [sl]
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f2:	81a3      	strh	r3, [r4, #12]
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	464a      	mov	r2, r9
 80057fa:	6921      	ldr	r1, [r4, #16]
 80057fc:	f7ff fe36 	bl	800546c <memcpy>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	6126      	str	r6, [r4, #16]
 800580e:	444e      	add	r6, r9
 8005810:	6026      	str	r6, [r4, #0]
 8005812:	463e      	mov	r6, r7
 8005814:	6165      	str	r5, [r4, #20]
 8005816:	eba5 0509 	sub.w	r5, r5, r9
 800581a:	60a5      	str	r5, [r4, #8]
 800581c:	42be      	cmp	r6, r7
 800581e:	d900      	bls.n	8005822 <__ssputs_r+0x86>
 8005820:	463e      	mov	r6, r7
 8005822:	4632      	mov	r2, r6
 8005824:	4641      	mov	r1, r8
 8005826:	6820      	ldr	r0, [r4, #0]
 8005828:	f000 fab8 	bl	8005d9c <memmove>
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	2000      	movs	r0, #0
 8005830:	1b9b      	subs	r3, r3, r6
 8005832:	60a3      	str	r3, [r4, #8]
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	4433      	add	r3, r6
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	e7db      	b.n	80057f4 <__ssputs_r+0x58>
 800583c:	462a      	mov	r2, r5
 800583e:	f000 fac7 	bl	8005dd0 <_realloc_r>
 8005842:	4606      	mov	r6, r0
 8005844:	2800      	cmp	r0, #0
 8005846:	d1e1      	bne.n	800580c <__ssputs_r+0x70>
 8005848:	4650      	mov	r0, sl
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	f7ff ff5e 	bl	800570c <_free_r>
 8005850:	e7c7      	b.n	80057e2 <__ssputs_r+0x46>
	...

08005854 <_svfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	4698      	mov	r8, r3
 800585a:	898b      	ldrh	r3, [r1, #12]
 800585c:	4607      	mov	r7, r0
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	460d      	mov	r5, r1
 8005862:	4614      	mov	r4, r2
 8005864:	b09d      	sub	sp, #116	; 0x74
 8005866:	d50e      	bpl.n	8005886 <_svfiprintf_r+0x32>
 8005868:	690b      	ldr	r3, [r1, #16]
 800586a:	b963      	cbnz	r3, 8005886 <_svfiprintf_r+0x32>
 800586c:	2140      	movs	r1, #64	; 0x40
 800586e:	f7ff fe33 	bl	80054d8 <_malloc_r>
 8005872:	6028      	str	r0, [r5, #0]
 8005874:	6128      	str	r0, [r5, #16]
 8005876:	b920      	cbnz	r0, 8005882 <_svfiprintf_r+0x2e>
 8005878:	230c      	movs	r3, #12
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	e0d1      	b.n	8005a26 <_svfiprintf_r+0x1d2>
 8005882:	2340      	movs	r3, #64	; 0x40
 8005884:	616b      	str	r3, [r5, #20]
 8005886:	2300      	movs	r3, #0
 8005888:	9309      	str	r3, [sp, #36]	; 0x24
 800588a:	2320      	movs	r3, #32
 800588c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005890:	2330      	movs	r3, #48	; 0x30
 8005892:	f04f 0901 	mov.w	r9, #1
 8005896:	f8cd 800c 	str.w	r8, [sp, #12]
 800589a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a40 <_svfiprintf_r+0x1ec>
 800589e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058a2:	4623      	mov	r3, r4
 80058a4:	469a      	mov	sl, r3
 80058a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058aa:	b10a      	cbz	r2, 80058b0 <_svfiprintf_r+0x5c>
 80058ac:	2a25      	cmp	r2, #37	; 0x25
 80058ae:	d1f9      	bne.n	80058a4 <_svfiprintf_r+0x50>
 80058b0:	ebba 0b04 	subs.w	fp, sl, r4
 80058b4:	d00b      	beq.n	80058ce <_svfiprintf_r+0x7a>
 80058b6:	465b      	mov	r3, fp
 80058b8:	4622      	mov	r2, r4
 80058ba:	4629      	mov	r1, r5
 80058bc:	4638      	mov	r0, r7
 80058be:	f7ff ff6d 	bl	800579c <__ssputs_r>
 80058c2:	3001      	adds	r0, #1
 80058c4:	f000 80aa 	beq.w	8005a1c <_svfiprintf_r+0x1c8>
 80058c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ca:	445a      	add	r2, fp
 80058cc:	9209      	str	r2, [sp, #36]	; 0x24
 80058ce:	f89a 3000 	ldrb.w	r3, [sl]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80a2 	beq.w	8005a1c <_svfiprintf_r+0x1c8>
 80058d8:	2300      	movs	r3, #0
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e2:	f10a 0a01 	add.w	sl, sl, #1
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	9307      	str	r3, [sp, #28]
 80058ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ee:	931a      	str	r3, [sp, #104]	; 0x68
 80058f0:	4654      	mov	r4, sl
 80058f2:	2205      	movs	r2, #5
 80058f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f8:	4851      	ldr	r0, [pc, #324]	; (8005a40 <_svfiprintf_r+0x1ec>)
 80058fa:	f000 fa41 	bl	8005d80 <memchr>
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	b9d8      	cbnz	r0, 800593a <_svfiprintf_r+0xe6>
 8005902:	06d0      	lsls	r0, r2, #27
 8005904:	bf44      	itt	mi
 8005906:	2320      	movmi	r3, #32
 8005908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800590c:	0711      	lsls	r1, r2, #28
 800590e:	bf44      	itt	mi
 8005910:	232b      	movmi	r3, #43	; 0x2b
 8005912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005916:	f89a 3000 	ldrb.w	r3, [sl]
 800591a:	2b2a      	cmp	r3, #42	; 0x2a
 800591c:	d015      	beq.n	800594a <_svfiprintf_r+0xf6>
 800591e:	4654      	mov	r4, sl
 8005920:	2000      	movs	r0, #0
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	4621      	mov	r1, r4
 800592a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592e:	3b30      	subs	r3, #48	; 0x30
 8005930:	2b09      	cmp	r3, #9
 8005932:	d94e      	bls.n	80059d2 <_svfiprintf_r+0x17e>
 8005934:	b1b0      	cbz	r0, 8005964 <_svfiprintf_r+0x110>
 8005936:	9207      	str	r2, [sp, #28]
 8005938:	e014      	b.n	8005964 <_svfiprintf_r+0x110>
 800593a:	eba0 0308 	sub.w	r3, r0, r8
 800593e:	fa09 f303 	lsl.w	r3, r9, r3
 8005942:	4313      	orrs	r3, r2
 8005944:	46a2      	mov	sl, r4
 8005946:	9304      	str	r3, [sp, #16]
 8005948:	e7d2      	b.n	80058f0 <_svfiprintf_r+0x9c>
 800594a:	9b03      	ldr	r3, [sp, #12]
 800594c:	1d19      	adds	r1, r3, #4
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	9103      	str	r1, [sp, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfbb      	ittet	lt
 8005956:	425b      	neglt	r3, r3
 8005958:	f042 0202 	orrlt.w	r2, r2, #2
 800595c:	9307      	strge	r3, [sp, #28]
 800595e:	9307      	strlt	r3, [sp, #28]
 8005960:	bfb8      	it	lt
 8005962:	9204      	strlt	r2, [sp, #16]
 8005964:	7823      	ldrb	r3, [r4, #0]
 8005966:	2b2e      	cmp	r3, #46	; 0x2e
 8005968:	d10c      	bne.n	8005984 <_svfiprintf_r+0x130>
 800596a:	7863      	ldrb	r3, [r4, #1]
 800596c:	2b2a      	cmp	r3, #42	; 0x2a
 800596e:	d135      	bne.n	80059dc <_svfiprintf_r+0x188>
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	3402      	adds	r4, #2
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9203      	str	r2, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfb8      	it	lt
 800597e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a44 <_svfiprintf_r+0x1f0>
 8005988:	2203      	movs	r2, #3
 800598a:	4650      	mov	r0, sl
 800598c:	7821      	ldrb	r1, [r4, #0]
 800598e:	f000 f9f7 	bl	8005d80 <memchr>
 8005992:	b140      	cbz	r0, 80059a6 <_svfiprintf_r+0x152>
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	eba0 000a 	sub.w	r0, r0, sl
 800599a:	fa03 f000 	lsl.w	r0, r3, r0
 800599e:	9b04      	ldr	r3, [sp, #16]
 80059a0:	3401      	adds	r4, #1
 80059a2:	4303      	orrs	r3, r0
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059aa:	2206      	movs	r2, #6
 80059ac:	4826      	ldr	r0, [pc, #152]	; (8005a48 <_svfiprintf_r+0x1f4>)
 80059ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059b2:	f000 f9e5 	bl	8005d80 <memchr>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d038      	beq.n	8005a2c <_svfiprintf_r+0x1d8>
 80059ba:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <_svfiprintf_r+0x1f8>)
 80059bc:	bb1b      	cbnz	r3, 8005a06 <_svfiprintf_r+0x1b2>
 80059be:	9b03      	ldr	r3, [sp, #12]
 80059c0:	3307      	adds	r3, #7
 80059c2:	f023 0307 	bic.w	r3, r3, #7
 80059c6:	3308      	adds	r3, #8
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059cc:	4433      	add	r3, r6
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	e767      	b.n	80058a2 <_svfiprintf_r+0x4e>
 80059d2:	460c      	mov	r4, r1
 80059d4:	2001      	movs	r0, #1
 80059d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059da:	e7a5      	b.n	8005928 <_svfiprintf_r+0xd4>
 80059dc:	2300      	movs	r3, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4619      	mov	r1, r3
 80059e4:	3401      	adds	r4, #1
 80059e6:	9305      	str	r3, [sp, #20]
 80059e8:	4620      	mov	r0, r4
 80059ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ee:	3a30      	subs	r2, #48	; 0x30
 80059f0:	2a09      	cmp	r2, #9
 80059f2:	d903      	bls.n	80059fc <_svfiprintf_r+0x1a8>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0c5      	beq.n	8005984 <_svfiprintf_r+0x130>
 80059f8:	9105      	str	r1, [sp, #20]
 80059fa:	e7c3      	b.n	8005984 <_svfiprintf_r+0x130>
 80059fc:	4604      	mov	r4, r0
 80059fe:	2301      	movs	r3, #1
 8005a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a04:	e7f0      	b.n	80059e8 <_svfiprintf_r+0x194>
 8005a06:	ab03      	add	r3, sp, #12
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	f3af 8000 	nop.w
 8005a16:	1c42      	adds	r2, r0, #1
 8005a18:	4606      	mov	r6, r0
 8005a1a:	d1d6      	bne.n	80059ca <_svfiprintf_r+0x176>
 8005a1c:	89ab      	ldrh	r3, [r5, #12]
 8005a1e:	065b      	lsls	r3, r3, #25
 8005a20:	f53f af2c 	bmi.w	800587c <_svfiprintf_r+0x28>
 8005a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a26:	b01d      	add	sp, #116	; 0x74
 8005a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2c:	ab03      	add	r3, sp, #12
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <_svfiprintf_r+0x1fc>)
 8005a36:	a904      	add	r1, sp, #16
 8005a38:	f000 f87c 	bl	8005b34 <_printf_i>
 8005a3c:	e7eb      	b.n	8005a16 <_svfiprintf_r+0x1c2>
 8005a3e:	bf00      	nop
 8005a40:	08005f98 	.word	0x08005f98
 8005a44:	08005f9e 	.word	0x08005f9e
 8005a48:	08005fa2 	.word	0x08005fa2
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	0800579d 	.word	0x0800579d

08005a54 <_printf_common>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	4616      	mov	r6, r2
 8005a5a:	4699      	mov	r9, r3
 8005a5c:	688a      	ldr	r2, [r1, #8]
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	4607      	mov	r7, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bfb8      	it	lt
 8005a66:	4613      	movlt	r3, r2
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a6e:	460c      	mov	r4, r1
 8005a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a74:	b10a      	cbz	r2, 8005a7a <_printf_common+0x26>
 8005a76:	3301      	adds	r3, #1
 8005a78:	6033      	str	r3, [r6, #0]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	0699      	lsls	r1, r3, #26
 8005a7e:	bf42      	ittt	mi
 8005a80:	6833      	ldrmi	r3, [r6, #0]
 8005a82:	3302      	addmi	r3, #2
 8005a84:	6033      	strmi	r3, [r6, #0]
 8005a86:	6825      	ldr	r5, [r4, #0]
 8005a88:	f015 0506 	ands.w	r5, r5, #6
 8005a8c:	d106      	bne.n	8005a9c <_printf_common+0x48>
 8005a8e:	f104 0a19 	add.w	sl, r4, #25
 8005a92:	68e3      	ldr	r3, [r4, #12]
 8005a94:	6832      	ldr	r2, [r6, #0]
 8005a96:	1a9b      	subs	r3, r3, r2
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	dc28      	bgt.n	8005aee <_printf_common+0x9a>
 8005a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005aa0:	1e13      	subs	r3, r2, #0
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	bf18      	it	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	0692      	lsls	r2, r2, #26
 8005aaa:	d42d      	bmi.n	8005b08 <_printf_common+0xb4>
 8005aac:	4649      	mov	r1, r9
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ab4:	47c0      	blx	r8
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d020      	beq.n	8005afc <_printf_common+0xa8>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	68e5      	ldr	r5, [r4, #12]
 8005abe:	f003 0306 	and.w	r3, r3, #6
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	bf18      	it	ne
 8005ac6:	2500      	movne	r5, #0
 8005ac8:	6832      	ldr	r2, [r6, #0]
 8005aca:	f04f 0600 	mov.w	r6, #0
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	bf08      	it	eq
 8005ad2:	1aad      	subeq	r5, r5, r2
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	bf08      	it	eq
 8005ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005adc:	4293      	cmp	r3, r2
 8005ade:	bfc4      	itt	gt
 8005ae0:	1a9b      	subgt	r3, r3, r2
 8005ae2:	18ed      	addgt	r5, r5, r3
 8005ae4:	341a      	adds	r4, #26
 8005ae6:	42b5      	cmp	r5, r6
 8005ae8:	d11a      	bne.n	8005b20 <_printf_common+0xcc>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e008      	b.n	8005b00 <_printf_common+0xac>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4652      	mov	r2, sl
 8005af2:	4649      	mov	r1, r9
 8005af4:	4638      	mov	r0, r7
 8005af6:	47c0      	blx	r8
 8005af8:	3001      	adds	r0, #1
 8005afa:	d103      	bne.n	8005b04 <_printf_common+0xb0>
 8005afc:	f04f 30ff 	mov.w	r0, #4294967295
 8005b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b04:	3501      	adds	r5, #1
 8005b06:	e7c4      	b.n	8005a92 <_printf_common+0x3e>
 8005b08:	2030      	movs	r0, #48	; 0x30
 8005b0a:	18e1      	adds	r1, r4, r3
 8005b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b16:	4422      	add	r2, r4
 8005b18:	3302      	adds	r3, #2
 8005b1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b1e:	e7c5      	b.n	8005aac <_printf_common+0x58>
 8005b20:	2301      	movs	r3, #1
 8005b22:	4622      	mov	r2, r4
 8005b24:	4649      	mov	r1, r9
 8005b26:	4638      	mov	r0, r7
 8005b28:	47c0      	blx	r8
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d0e6      	beq.n	8005afc <_printf_common+0xa8>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7d9      	b.n	8005ae6 <_printf_common+0x92>
	...

08005b34 <_printf_i>:
 8005b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b38:	7e0f      	ldrb	r7, [r1, #24]
 8005b3a:	4691      	mov	r9, r2
 8005b3c:	2f78      	cmp	r7, #120	; 0x78
 8005b3e:	4680      	mov	r8, r0
 8005b40:	460c      	mov	r4, r1
 8005b42:	469a      	mov	sl, r3
 8005b44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b4a:	d807      	bhi.n	8005b5c <_printf_i+0x28>
 8005b4c:	2f62      	cmp	r7, #98	; 0x62
 8005b4e:	d80a      	bhi.n	8005b66 <_printf_i+0x32>
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	f000 80d9 	beq.w	8005d08 <_printf_i+0x1d4>
 8005b56:	2f58      	cmp	r7, #88	; 0x58
 8005b58:	f000 80a4 	beq.w	8005ca4 <_printf_i+0x170>
 8005b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b64:	e03a      	b.n	8005bdc <_printf_i+0xa8>
 8005b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b6a:	2b15      	cmp	r3, #21
 8005b6c:	d8f6      	bhi.n	8005b5c <_printf_i+0x28>
 8005b6e:	a101      	add	r1, pc, #4	; (adr r1, 8005b74 <_printf_i+0x40>)
 8005b70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005b5d 	.word	0x08005b5d
 8005b80:	08005b5d 	.word	0x08005b5d
 8005b84:	08005b5d 	.word	0x08005b5d
 8005b88:	08005b5d 	.word	0x08005b5d
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005b5d 	.word	0x08005b5d
 8005b94:	08005b5d 	.word	0x08005b5d
 8005b98:	08005b5d 	.word	0x08005b5d
 8005b9c:	08005b5d 	.word	0x08005b5d
 8005ba0:	08005cef 	.word	0x08005cef
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005cd1 	.word	0x08005cd1
 8005bac:	08005b5d 	.word	0x08005b5d
 8005bb0:	08005b5d 	.word	0x08005b5d
 8005bb4:	08005d11 	.word	0x08005d11
 8005bb8:	08005b5d 	.word	0x08005b5d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b5d 	.word	0x08005b5d
 8005bc4:	08005b5d 	.word	0x08005b5d
 8005bc8:	08005cd9 	.word	0x08005cd9
 8005bcc:	682b      	ldr	r3, [r5, #0]
 8005bce:	1d1a      	adds	r2, r3, #4
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	602a      	str	r2, [r5, #0]
 8005bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0a4      	b.n	8005d2a <_printf_i+0x1f6>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	0606      	lsls	r6, r0, #24
 8005be6:	f101 0304 	add.w	r3, r1, #4
 8005bea:	d50a      	bpl.n	8005c02 <_printf_i+0xce>
 8005bec:	680e      	ldr	r6, [r1, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	2e00      	cmp	r6, #0
 8005bf2:	da03      	bge.n	8005bfc <_printf_i+0xc8>
 8005bf4:	232d      	movs	r3, #45	; 0x2d
 8005bf6:	4276      	negs	r6, r6
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	230a      	movs	r3, #10
 8005bfe:	485e      	ldr	r0, [pc, #376]	; (8005d78 <_printf_i+0x244>)
 8005c00:	e019      	b.n	8005c36 <_printf_i+0x102>
 8005c02:	680e      	ldr	r6, [r1, #0]
 8005c04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	bf18      	it	ne
 8005c0c:	b236      	sxthne	r6, r6
 8005c0e:	e7ef      	b.n	8005bf0 <_printf_i+0xbc>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	6820      	ldr	r0, [r4, #0]
 8005c14:	1d19      	adds	r1, r3, #4
 8005c16:	6029      	str	r1, [r5, #0]
 8005c18:	0601      	lsls	r1, r0, #24
 8005c1a:	d501      	bpl.n	8005c20 <_printf_i+0xec>
 8005c1c:	681e      	ldr	r6, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <_printf_i+0xf2>
 8005c20:	0646      	lsls	r6, r0, #25
 8005c22:	d5fb      	bpl.n	8005c1c <_printf_i+0xe8>
 8005c24:	881e      	ldrh	r6, [r3, #0]
 8005c26:	2f6f      	cmp	r7, #111	; 0x6f
 8005c28:	bf0c      	ite	eq
 8005c2a:	2308      	moveq	r3, #8
 8005c2c:	230a      	movne	r3, #10
 8005c2e:	4852      	ldr	r0, [pc, #328]	; (8005d78 <_printf_i+0x244>)
 8005c30:	2100      	movs	r1, #0
 8005c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c36:	6865      	ldr	r5, [r4, #4]
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	bfa8      	it	ge
 8005c3c:	6821      	ldrge	r1, [r4, #0]
 8005c3e:	60a5      	str	r5, [r4, #8]
 8005c40:	bfa4      	itt	ge
 8005c42:	f021 0104 	bicge.w	r1, r1, #4
 8005c46:	6021      	strge	r1, [r4, #0]
 8005c48:	b90e      	cbnz	r6, 8005c4e <_printf_i+0x11a>
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	d04d      	beq.n	8005cea <_printf_i+0x1b6>
 8005c4e:	4615      	mov	r5, r2
 8005c50:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c54:	fb03 6711 	mls	r7, r3, r1, r6
 8005c58:	5dc7      	ldrb	r7, [r0, r7]
 8005c5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c5e:	4637      	mov	r7, r6
 8005c60:	42bb      	cmp	r3, r7
 8005c62:	460e      	mov	r6, r1
 8005c64:	d9f4      	bls.n	8005c50 <_printf_i+0x11c>
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d10b      	bne.n	8005c82 <_printf_i+0x14e>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	07de      	lsls	r6, r3, #31
 8005c6e:	d508      	bpl.n	8005c82 <_printf_i+0x14e>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	6861      	ldr	r1, [r4, #4]
 8005c74:	4299      	cmp	r1, r3
 8005c76:	bfde      	ittt	le
 8005c78:	2330      	movle	r3, #48	; 0x30
 8005c7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c82:	1b52      	subs	r2, r2, r5
 8005c84:	6122      	str	r2, [r4, #16]
 8005c86:	464b      	mov	r3, r9
 8005c88:	4621      	mov	r1, r4
 8005c8a:	4640      	mov	r0, r8
 8005c8c:	f8cd a000 	str.w	sl, [sp]
 8005c90:	aa03      	add	r2, sp, #12
 8005c92:	f7ff fedf 	bl	8005a54 <_printf_common>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d14c      	bne.n	8005d34 <_printf_i+0x200>
 8005c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9e:	b004      	add	sp, #16
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	4834      	ldr	r0, [pc, #208]	; (8005d78 <_printf_i+0x244>)
 8005ca6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005caa:	6829      	ldr	r1, [r5, #0]
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cb2:	6029      	str	r1, [r5, #0]
 8005cb4:	061d      	lsls	r5, r3, #24
 8005cb6:	d514      	bpl.n	8005ce2 <_printf_i+0x1ae>
 8005cb8:	07df      	lsls	r7, r3, #31
 8005cba:	bf44      	itt	mi
 8005cbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005cc0:	6023      	strmi	r3, [r4, #0]
 8005cc2:	b91e      	cbnz	r6, 8005ccc <_printf_i+0x198>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	2310      	movs	r3, #16
 8005cce:	e7af      	b.n	8005c30 <_printf_i+0xfc>
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	f043 0320 	orr.w	r3, r3, #32
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	2378      	movs	r3, #120	; 0x78
 8005cda:	4828      	ldr	r0, [pc, #160]	; (8005d7c <_printf_i+0x248>)
 8005cdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ce0:	e7e3      	b.n	8005caa <_printf_i+0x176>
 8005ce2:	0659      	lsls	r1, r3, #25
 8005ce4:	bf48      	it	mi
 8005ce6:	b2b6      	uxthmi	r6, r6
 8005ce8:	e7e6      	b.n	8005cb8 <_printf_i+0x184>
 8005cea:	4615      	mov	r5, r2
 8005cec:	e7bb      	b.n	8005c66 <_printf_i+0x132>
 8005cee:	682b      	ldr	r3, [r5, #0]
 8005cf0:	6826      	ldr	r6, [r4, #0]
 8005cf2:	1d18      	adds	r0, r3, #4
 8005cf4:	6961      	ldr	r1, [r4, #20]
 8005cf6:	6028      	str	r0, [r5, #0]
 8005cf8:	0635      	lsls	r5, r6, #24
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	d501      	bpl.n	8005d02 <_printf_i+0x1ce>
 8005cfe:	6019      	str	r1, [r3, #0]
 8005d00:	e002      	b.n	8005d08 <_printf_i+0x1d4>
 8005d02:	0670      	lsls	r0, r6, #25
 8005d04:	d5fb      	bpl.n	8005cfe <_printf_i+0x1ca>
 8005d06:	8019      	strh	r1, [r3, #0]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	6123      	str	r3, [r4, #16]
 8005d0e:	e7ba      	b.n	8005c86 <_printf_i+0x152>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	2100      	movs	r1, #0
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f82f 	bl	8005d80 <memchr>
 8005d22:	b108      	cbz	r0, 8005d28 <_printf_i+0x1f4>
 8005d24:	1b40      	subs	r0, r0, r5
 8005d26:	6060      	str	r0, [r4, #4]
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d32:	e7a8      	b.n	8005c86 <_printf_i+0x152>
 8005d34:	462a      	mov	r2, r5
 8005d36:	4649      	mov	r1, r9
 8005d38:	4640      	mov	r0, r8
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	47d0      	blx	sl
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d0ab      	beq.n	8005c9a <_printf_i+0x166>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	079b      	lsls	r3, r3, #30
 8005d46:	d413      	bmi.n	8005d70 <_printf_i+0x23c>
 8005d48:	68e0      	ldr	r0, [r4, #12]
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	4298      	cmp	r0, r3
 8005d4e:	bfb8      	it	lt
 8005d50:	4618      	movlt	r0, r3
 8005d52:	e7a4      	b.n	8005c9e <_printf_i+0x16a>
 8005d54:	2301      	movs	r3, #1
 8005d56:	4632      	mov	r2, r6
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	47d0      	blx	sl
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d09b      	beq.n	8005c9a <_printf_i+0x166>
 8005d62:	3501      	adds	r5, #1
 8005d64:	68e3      	ldr	r3, [r4, #12]
 8005d66:	9903      	ldr	r1, [sp, #12]
 8005d68:	1a5b      	subs	r3, r3, r1
 8005d6a:	42ab      	cmp	r3, r5
 8005d6c:	dcf2      	bgt.n	8005d54 <_printf_i+0x220>
 8005d6e:	e7eb      	b.n	8005d48 <_printf_i+0x214>
 8005d70:	2500      	movs	r5, #0
 8005d72:	f104 0619 	add.w	r6, r4, #25
 8005d76:	e7f5      	b.n	8005d64 <_printf_i+0x230>
 8005d78:	08005fa9 	.word	0x08005fa9
 8005d7c:	08005fba 	.word	0x08005fba

08005d80 <memchr>:
 8005d80:	4603      	mov	r3, r0
 8005d82:	b510      	push	{r4, lr}
 8005d84:	b2c9      	uxtb	r1, r1
 8005d86:	4402      	add	r2, r0
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	d101      	bne.n	8005d92 <memchr+0x12>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e003      	b.n	8005d9a <memchr+0x1a>
 8005d92:	7804      	ldrb	r4, [r0, #0]
 8005d94:	3301      	adds	r3, #1
 8005d96:	428c      	cmp	r4, r1
 8005d98:	d1f6      	bne.n	8005d88 <memchr+0x8>
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <memmove>:
 8005d9c:	4288      	cmp	r0, r1
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	eb01 0402 	add.w	r4, r1, r2
 8005da4:	d902      	bls.n	8005dac <memmove+0x10>
 8005da6:	4284      	cmp	r4, r0
 8005da8:	4623      	mov	r3, r4
 8005daa:	d807      	bhi.n	8005dbc <memmove+0x20>
 8005dac:	1e43      	subs	r3, r0, #1
 8005dae:	42a1      	cmp	r1, r4
 8005db0:	d008      	beq.n	8005dc4 <memmove+0x28>
 8005db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dba:	e7f8      	b.n	8005dae <memmove+0x12>
 8005dbc:	4601      	mov	r1, r0
 8005dbe:	4402      	add	r2, r0
 8005dc0:	428a      	cmp	r2, r1
 8005dc2:	d100      	bne.n	8005dc6 <memmove+0x2a>
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dce:	e7f7      	b.n	8005dc0 <memmove+0x24>

08005dd0 <_realloc_r>:
 8005dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd4:	4680      	mov	r8, r0
 8005dd6:	4614      	mov	r4, r2
 8005dd8:	460e      	mov	r6, r1
 8005dda:	b921      	cbnz	r1, 8005de6 <_realloc_r+0x16>
 8005ddc:	4611      	mov	r1, r2
 8005dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de2:	f7ff bb79 	b.w	80054d8 <_malloc_r>
 8005de6:	b92a      	cbnz	r2, 8005df4 <_realloc_r+0x24>
 8005de8:	f7ff fc90 	bl	800570c <_free_r>
 8005dec:	4625      	mov	r5, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df4:	f000 f81b 	bl	8005e2e <_malloc_usable_size_r>
 8005df8:	4284      	cmp	r4, r0
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	d802      	bhi.n	8005e04 <_realloc_r+0x34>
 8005dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e02:	d812      	bhi.n	8005e2a <_realloc_r+0x5a>
 8005e04:	4621      	mov	r1, r4
 8005e06:	4640      	mov	r0, r8
 8005e08:	f7ff fb66 	bl	80054d8 <_malloc_r>
 8005e0c:	4605      	mov	r5, r0
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d0ed      	beq.n	8005dee <_realloc_r+0x1e>
 8005e12:	42bc      	cmp	r4, r7
 8005e14:	4622      	mov	r2, r4
 8005e16:	4631      	mov	r1, r6
 8005e18:	bf28      	it	cs
 8005e1a:	463a      	movcs	r2, r7
 8005e1c:	f7ff fb26 	bl	800546c <memcpy>
 8005e20:	4631      	mov	r1, r6
 8005e22:	4640      	mov	r0, r8
 8005e24:	f7ff fc72 	bl	800570c <_free_r>
 8005e28:	e7e1      	b.n	8005dee <_realloc_r+0x1e>
 8005e2a:	4635      	mov	r5, r6
 8005e2c:	e7df      	b.n	8005dee <_realloc_r+0x1e>

08005e2e <_malloc_usable_size_r>:
 8005e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e32:	1f18      	subs	r0, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bfbc      	itt	lt
 8005e38:	580b      	ldrlt	r3, [r1, r0]
 8005e3a:	18c0      	addlt	r0, r0, r3
 8005e3c:	4770      	bx	lr
	...

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
