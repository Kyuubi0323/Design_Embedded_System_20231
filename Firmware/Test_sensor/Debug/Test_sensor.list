
Test_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ea0  08007ea0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007ea0  08007ea0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ea0  08007ea0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea0  08007ea0  00017ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d38  20000074  08007f1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dac  08007f1c  00021dac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b68d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a22  00000000  00000000  0003b72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001690  00000000  00000000  0003f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  000407e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9a3  00000000  00000000  00041d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8fa  00000000  00000000  0005c6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009787a  00000000  00000000  00078fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000670c  00000000  00000000  00110878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d00 	.word	0x08007d00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007d00 	.word	0x08007d00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fmul>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d06f      	beq.n	8000d60 <__aeabi_fmul+0xf8>
 8000c80:	441a      	add	r2, r3
 8000c82:	ea80 0c01 	eor.w	ip, r0, r1
 8000c86:	0240      	lsls	r0, r0, #9
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8e:	d01e      	beq.n	8000cce <__aeabi_fmul+0x66>
 8000c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca8:	bf3e      	ittt	cc
 8000caa:	0049      	lslcc	r1, r1, #1
 8000cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb0:	005b      	lslcc	r3, r3, #1
 8000cb2:	ea40 0001 	orr.w	r0, r0, r1
 8000cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cba:	2afd      	cmp	r2, #253	; 0xfd
 8000cbc:	d81d      	bhi.n	8000cfa <__aeabi_fmul+0x92>
 8000cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd6:	bf08      	it	eq
 8000cd8:	0249      	lsleq	r1, r1, #9
 8000cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ce2:	3a7f      	subs	r2, #127	; 0x7f
 8000ce4:	bfc2      	ittt	gt
 8000ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cee:	4770      	bxgt	lr
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	dc5d      	bgt.n	8000db8 <__aeabi_fmul+0x150>
 8000cfc:	f112 0f19 	cmn.w	r2, #25
 8000d00:	bfdc      	itt	le
 8000d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d06:	4770      	bxle	lr
 8000d08:	f1c2 0200 	rsb	r2, r2, #0
 8000d0c:	0041      	lsls	r1, r0, #1
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	f1c2 0220 	rsb	r2, r2, #32
 8000d16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1e:	f140 0000 	adc.w	r0, r0, #0
 8000d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d26:	bf08      	it	eq
 8000d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2c:	4770      	bx	lr
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0040      	lsleq	r0, r0, #1
 8000d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3e:	3a01      	subeq	r2, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xce>
 8000d42:	ea40 000c 	orr.w	r0, r0, ip
 8000d46:	f093 0f00 	teq	r3, #0
 8000d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0049      	lsleq	r1, r1, #1
 8000d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d56:	3b01      	subeq	r3, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xe6>
 8000d5a:	ea41 010c 	orr.w	r1, r1, ip
 8000d5e:	e78f      	b.n	8000c80 <__aeabi_fmul+0x18>
 8000d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	bf18      	it	ne
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d00a      	beq.n	8000d86 <__aeabi_fmul+0x11e>
 8000d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d74:	bf18      	it	ne
 8000d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	d1d8      	bne.n	8000d2e <__aeabi_fmul+0xc6>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	bf17      	itett	ne
 8000d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d90:	4608      	moveq	r0, r1
 8000d92:	f091 0f00 	teqne	r1, #0
 8000d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d9a:	d014      	beq.n	8000dc6 <__aeabi_fmul+0x15e>
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d101      	bne.n	8000da6 <__aeabi_fmul+0x13e>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d10f      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000da6:	ea93 0f0c 	teq	r3, ip
 8000daa:	d103      	bne.n	8000db4 <__aeabi_fmul+0x14c>
 8000dac:	024b      	lsls	r3, r1, #9
 8000dae:	bf18      	it	ne
 8000db0:	4608      	movne	r0, r1
 8000db2:	d108      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bx	lr
 8000dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fdiv>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d069      	beq.n	8000ebc <__aeabi_fdiv+0xec>
 8000de8:	eba2 0203 	sub.w	r2, r2, r3
 8000dec:	ea80 0c01 	eor.w	ip, r0, r1
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df6:	d037      	beq.n	8000e68 <__aeabi_fdiv+0x98>
 8000df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf38      	it	cc
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e16:	428b      	cmp	r3, r1
 8000e18:	bf24      	itt	cs
 8000e1a:	1a5b      	subcs	r3, r3, r1
 8000e1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e32:	bf24      	itt	cs
 8000e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e52:	d1e0      	bne.n	8000e16 <__aeabi_fdiv+0x46>
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	f63f af50 	bhi.w	8000cfa <__aeabi_fmul+0x92>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e70:	327f      	adds	r2, #127	; 0x7f
 8000e72:	bfc2      	ittt	gt
 8000e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7c:	4770      	bxgt	lr
 8000e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	3a01      	subs	r2, #1
 8000e88:	e737      	b.n	8000cfa <__aeabi_fmul+0x92>
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xc2>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xda>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e795      	b.n	8000de8 <__aeabi_fdiv+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	d108      	bne.n	8000ed8 <__aeabi_fdiv+0x108>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	f47f af7d 	bne.w	8000dc6 <__aeabi_fmul+0x15e>
 8000ecc:	ea93 0f0c 	teq	r3, ip
 8000ed0:	f47f af70 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e776      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ed8:	ea93 0f0c 	teq	r3, ip
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_fdiv+0x118>
 8000ede:	024b      	lsls	r3, r1, #9
 8000ee0:	f43f af4c 	beq.w	8000d7c <__aeabi_fmul+0x114>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e76e      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1ca      	bne.n	8000e8a <__aeabi_fdiv+0xba>
 8000ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef8:	f47f af5c 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f00:	f47f af3c 	bne.w	8000d7c <__aeabi_fmul+0x114>
 8000f04:	e75f      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000f06:	bf00      	nop

08000f08 <__gesf2>:
 8000f08:	f04f 3cff 	mov.w	ip, #4294967295
 8000f0c:	e006      	b.n	8000f1c <__cmpsf2+0x4>
 8000f0e:	bf00      	nop

08000f10 <__lesf2>:
 8000f10:	f04f 0c01 	mov.w	ip, #1
 8000f14:	e002      	b.n	8000f1c <__cmpsf2+0x4>
 8000f16:	bf00      	nop

08000f18 <__cmpsf2>:
 8000f18:	f04f 0c01 	mov.w	ip, #1
 8000f1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f2c:	bf18      	it	ne
 8000f2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f32:	d011      	beq.n	8000f58 <__cmpsf2+0x40>
 8000f34:	b001      	add	sp, #4
 8000f36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f3a:	bf18      	it	ne
 8000f3c:	ea90 0f01 	teqne	r0, r1
 8000f40:	bf58      	it	pl
 8000f42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f46:	bf88      	it	hi
 8000f48:	17c8      	asrhi	r0, r1, #31
 8000f4a:	bf38      	it	cc
 8000f4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f50:	bf18      	it	ne
 8000f52:	f040 0001 	orrne.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f5c:	d102      	bne.n	8000f64 <__cmpsf2+0x4c>
 8000f5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f62:	d105      	bne.n	8000f70 <__cmpsf2+0x58>
 8000f64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f68:	d1e4      	bne.n	8000f34 <__cmpsf2+0x1c>
 8000f6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f6e:	d0e1      	beq.n	8000f34 <__cmpsf2+0x1c>
 8000f70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__aeabi_cfrcmple>:
 8000f78:	4684      	mov	ip, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4661      	mov	r1, ip
 8000f7e:	e7ff      	b.n	8000f80 <__aeabi_cfcmpeq>

08000f80 <__aeabi_cfcmpeq>:
 8000f80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f82:	f7ff ffc9 	bl	8000f18 <__cmpsf2>
 8000f86:	2800      	cmp	r0, #0
 8000f88:	bf48      	it	mi
 8000f8a:	f110 0f00 	cmnmi.w	r0, #0
 8000f8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f90 <__aeabi_fcmpeq>:
 8000f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f94:	f7ff fff4 	bl	8000f80 <__aeabi_cfcmpeq>
 8000f98:	bf0c      	ite	eq
 8000f9a:	2001      	moveq	r0, #1
 8000f9c:	2000      	movne	r0, #0
 8000f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_fcmplt>:
 8000fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa8:	f7ff ffea 	bl	8000f80 <__aeabi_cfcmpeq>
 8000fac:	bf34      	ite	cc
 8000fae:	2001      	movcc	r0, #1
 8000fb0:	2000      	movcs	r0, #0
 8000fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_fcmple>:
 8000fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fbc:	f7ff ffe0 	bl	8000f80 <__aeabi_cfcmpeq>
 8000fc0:	bf94      	ite	ls
 8000fc2:	2001      	movls	r0, #1
 8000fc4:	2000      	movhi	r0, #0
 8000fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fca:	bf00      	nop

08000fcc <__aeabi_fcmpge>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff ffd2 	bl	8000f78 <__aeabi_cfrcmple>
 8000fd4:	bf94      	ite	ls
 8000fd6:	2001      	movls	r0, #1
 8000fd8:	2000      	movhi	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmpgt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffc8 	bl	8000f78 <__aeabi_cfrcmple>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_f2uiz>:
 8000ff4:	0042      	lsls	r2, r0, #1
 8000ff6:	d20e      	bcs.n	8001016 <__aeabi_f2uiz+0x22>
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30b      	bcc.n	8001016 <__aeabi_f2uiz+0x22>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d409      	bmi.n	800101c <__aeabi_f2uiz+0x28>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	fa23 f002 	lsr.w	r0, r3, r2
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr
 800101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001020:	d101      	bne.n	8001026 <__aeabi_f2uiz+0x32>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	d102      	bne.n	800102c <__aeabi_f2uiz+0x38>
 8001026:	f04f 30ff 	mov.w	r0, #4294967295
 800102a:	4770      	bx	lr
 800102c:	f04f 0000 	mov.w	r0, #0
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Basic_timer */
  Basic_timerHandle = osTimerNew(Timer_Callback, osTimerPeriodic, NULL, &Basic_timer_attributes);
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <MX_FREERTOS_Init+0x3c>)
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_FREERTOS_Init+0x40>)
 8001040:	f003 fc4c 	bl	80048dc <osTimerNew>
 8001044:	4603      	mov	r3, r0
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <MX_FREERTOS_Init+0x44>)
 8001048:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800104a:	4a0c      	ldr	r2, [pc, #48]	; (800107c <MX_FREERTOS_Init+0x48>)
 800104c:	2100      	movs	r1, #0
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_FREERTOS_Init+0x4c>)
 8001050:	f003 fb56 	bl	8004700 <osThreadNew>
 8001054:	4603      	mov	r3, r0
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_FREERTOS_Init+0x50>)
 8001058:	6013      	str	r3, [r2, #0]

  /* creation of Sensor */
  SensorHandle = osThreadNew(Sensor_task, NULL, &Sensor_attributes);
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_FREERTOS_Init+0x54>)
 800105c:	2100      	movs	r1, #0
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <MX_FREERTOS_Init+0x58>)
 8001060:	f003 fb4e 	bl	8004700 <osThreadNew>
 8001064:	4603      	mov	r3, r0
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <MX_FREERTOS_Init+0x5c>)
 8001068:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	08007dd0 	.word	0x08007dd0
 8001074:	08001155 	.word	0x08001155
 8001078:	200000ec 	.word	0x200000ec
 800107c:	08007d88 	.word	0x08007d88
 8001080:	08001095 	.word	0x08001095
 8001084:	200000e4 	.word	0x200000e4
 8001088:	08007dac 	.word	0x08007dac
 800108c:	080010b5 	.word	0x080010b5
 8001090:	200000e8 	.word	0x200000e8

08001094 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	TxBuffer = "Default_here\r\n";
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <StartDefaultTask+0x18>)
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <StartDefaultTask+0x1c>)
 80010a0:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	HAL_UART_Transmit(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer), 500);
    osDelay(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f003 fbd5 	bl	8004854 <osDelay>
 80010aa:	e7fa      	b.n	80010a2 <StartDefaultTask+0xe>
 80010ac:	20000090 	.word	0x20000090
 80010b0:	08007d38 	.word	0x08007d38

080010b4 <Sensor_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_task */
void Sensor_task(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sensor_task */
	max30102_init();
 80010bc:	f000 f996 	bl	80013ec <max30102_init>
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 80010c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c4:	481c      	ldr	r0, [pc, #112]	; (8001138 <Sensor_task+0x84>)
 80010c6:	f001 f9b9 	bl	800243c <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d12d      	bne.n	800112c <Sensor_task+0x78>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <Sensor_task+0x88>)
 80010d6:	f001 f9e0 	bl	800249a <HAL_GPIO_TogglePin>
			  max30102_cal();
 80010da:	f000 fbf5 	bl	80018c8 <max30102_cal>
			  uint8_t spo2 = max30102_getSpO2();
 80010de:	f000 fd6b 	bl	8001bb8 <max30102_getSpO2>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
//			  uint8_t spo2 = max30102_getStatus();
			  uint8_t heartRate = max30102_getHeartRate();
 80010e6:	f000 fd5d 	bl	8001ba4 <max30102_getHeartRate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73bb      	strb	r3, [r7, #14]
+
			  HAL_UART_Transmit(&huart1, "gotheart\r\n", 10, 500 );
 80010ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f2:	220a      	movs	r2, #10
 80010f4:	4912      	ldr	r1, [pc, #72]	; (8001140 <Sensor_task+0x8c>)
 80010f6:	4813      	ldr	r0, [pc, #76]	; (8001144 <Sensor_task+0x90>)
 80010f8:	f003 f91c 	bl	8004334 <HAL_UART_Transmit>
			  sprintf(str, "bpm %d spo2 %d\r\n", heartRate, spo2); //
 80010fc:	7bba      	ldrb	r2, [r7, #14]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4911      	ldr	r1, [pc, #68]	; (8001148 <Sensor_task+0x94>)
 8001102:	4812      	ldr	r0, [pc, #72]	; (800114c <Sensor_task+0x98>)
 8001104:	f006 fa36 	bl	8007574 <siprintf>

			  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 500 );
 8001108:	4810      	ldr	r0, [pc, #64]	; (800114c <Sensor_task+0x98>)
 800110a:	f7ff f821 	bl	8000150 <strlen>
 800110e:	4603      	mov	r3, r0
 8001110:	b29a      	uxth	r2, r3
 8001112:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001116:	490d      	ldr	r1, [pc, #52]	; (800114c <Sensor_task+0x98>)
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <Sensor_task+0x90>)
 800111a:	f003 f90b 	bl	8004334 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart1, "done\r\n", 6, 500 );
 800111e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001122:	2206      	movs	r2, #6
 8001124:	490a      	ldr	r1, [pc, #40]	; (8001150 <Sensor_task+0x9c>)
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <Sensor_task+0x90>)
 8001128:	f003 f904 	bl	8004334 <HAL_UART_Transmit>
	      }
    osDelay(2000);
 800112c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001130:	f003 fb90 	bl	8004854 <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 8001134:	e7c4      	b.n	80010c0 <Sensor_task+0xc>
 8001136:	bf00      	nop
 8001138:	40010c00 	.word	0x40010c00
 800113c:	40011000 	.word	0x40011000
 8001140:	08007d48 	.word	0x08007d48
 8001144:	20000348 	.word	0x20000348
 8001148:	08007d54 	.word	0x08007d54
 800114c:	20000094 	.word	0x20000094
 8001150:	08007d68 	.word	0x08007d68

08001154 <Timer_Callback>:
  /* USER CODE END Sensor_task */
}

/* Timer_Callback function */
void Timer_Callback(void *argument)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_Callback */

  /* USER CODE END Timer_Callback */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
	...

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_GPIO_Init+0xc0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a29      	ldr	r2, [pc, #164]	; (8001228 <MX_GPIO_Init+0xc0>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_GPIO_Init+0xc0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_GPIO_Init+0xc0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a23      	ldr	r2, [pc, #140]	; (8001228 <MX_GPIO_Init+0xc0>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	4812      	ldr	r0, [pc, #72]	; (800122c <MX_GPIO_Init+0xc4>)
 80011e4:	f001 f941 	bl	800246a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	4619      	mov	r1, r3
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <MX_GPIO_Init+0xc4>)
 8001202:	f000 ff97 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MAX_Pin;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MAX_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_GPIO_Init+0xc8>)
 800121c:	f000 ff8a 	bl	8002134 <HAL_GPIO_Init>

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	40011000 	.word	0x40011000
 8001230:	40010c00 	.word	0x40010c00

08001234 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <MX_I2C1_Init+0x50>)
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <MX_I2C1_Init+0x54>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_I2C1_Init+0x50>)
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_I2C1_Init+0x58>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_I2C1_Init+0x50>)
 8001252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <MX_I2C1_Init+0x50>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_I2C1_Init+0x50>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_I2C1_Init+0x50>)
 8001272:	f001 f92b 	bl	80024cc <HAL_I2C_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800127c:	f000 f8b0 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200000f0 	.word	0x200000f0
 8001288:	40005400 	.word	0x40005400
 800128c:	00061a80 	.word	0x00061a80

08001290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <HAL_I2C_MspInit+0x70>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d123      	bne.n	80012f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c8:	23c0      	movs	r3, #192	; 0xc0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	480b      	ldr	r0, [pc, #44]	; (8001308 <HAL_I2C_MspInit+0x78>)
 80012dc:	f000 ff2a 	bl	8002134 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ea:	61d3      	str	r3, [r2, #28]
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_I2C_MspInit+0x74>)
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40005400 	.word	0x40005400
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fdfe 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f80d 	bl	8001332 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f7ff ff26 	bl	8001168 <MX_GPIO_Init>
  MX_I2C1_Init();
 800131c:	f7ff ff8a 	bl	8001234 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001320:	f000 fd5a 	bl	8001dd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001324:	f003 f986 	bl	8004634 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001328:	f7ff fe84 	bl	8001034 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800132c:	f003 f9b4 	bl	8004698 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x24>

08001332 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b090      	sub	sp, #64	; 0x40
 8001336:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	2228      	movs	r2, #40	; 0x28
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 f801 	bl	8007348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	2301      	movs	r3, #1
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001366:	2302      	movs	r3, #2
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800136a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f900 	bl	8003580 <HAL_RCC_OscConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001386:	f000 f82b 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2102      	movs	r1, #2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fb6d 	bl	8003a84 <HAL_RCC_ClockConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013b0:	f000 f816 	bl	80013e0 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3740      	adds	r7, #64	; 0x40
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ce:	f000 fdb5 	bl	8001f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <max30102_init>:
#define RES_PART_ID 0xff

extern I2C_HandleTypeDef hi2c1;

void max30102_init()
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
    /*reset*/
    data = 0x40;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80013fa:	230a      	movs	r3, #10
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	2301      	movs	r3, #1
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	2209      	movs	r2, #9
 800140a:	21ae      	movs	r1, #174	; 0xae
 800140c:	4847      	ldr	r0, [pc, #284]	; (800152c <max30102_init+0x140>)
 800140e:	f001 f9a1 	bl	8002754 <HAL_I2C_Mem_Write>
    do
    {
        HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001412:	230a      	movs	r3, #10
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2209      	movs	r2, #9
 8001422:	21af      	movs	r1, #175	; 0xaf
 8001424:	4841      	ldr	r0, [pc, #260]	; (800152c <max30102_init+0x140>)
 8001426:	f001 fa8f 	bl	8002948 <HAL_I2C_Mem_Read>
    } while (data & 0x40);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1ee      	bne.n	8001412 <max30102_init+0x26>
    /*新数据中断*/
    data = 0x40;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001438:	230a      	movs	r3, #10
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	2202      	movs	r2, #2
 8001448:	21ae      	movs	r1, #174	; 0xae
 800144a:	4838      	ldr	r0, [pc, #224]	; (800152c <max30102_init+0x140>)
 800144c:	f001 f982 	bl	8002754 <HAL_I2C_Mem_Write>
    //    /* 快满中断*/
    //    data = 0x80;
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    //    HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*16384量程 50Hz 18位adc分辨率*/
    data = 0x63;
 8001450:	2363      	movs	r3, #99	; 0x63
 8001452:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001454:	230a      	movs	r3, #10
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	2301      	movs	r3, #1
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	220a      	movs	r2, #10
 8001464:	21ae      	movs	r1, #174	; 0xae
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <max30102_init+0x140>)
 8001468:	f001 f974 	bl	8002754 <HAL_I2C_Mem_Write>
    /*灯的亮度*/
    data = 0x47;
 800146c:	2347      	movs	r3, #71	; 0x47
 800146e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001470:	230a      	movs	r3, #10
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	220c      	movs	r2, #12
 8001480:	21ae      	movs	r1, #174	; 0xae
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <max30102_init+0x140>)
 8001484:	f001 f966 	bl	8002754 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_LED_PLUSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8001488:	230a      	movs	r3, #10
 800148a:	9302      	str	r3, [sp, #8]
 800148c:	2301      	movs	r3, #1
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	220d      	movs	r2, #13
 8001498:	21ae      	movs	r1, #174	; 0xae
 800149a:	4824      	ldr	r0, [pc, #144]	; (800152c <max30102_init+0x140>)
 800149c:	f001 f95a 	bl	8002754 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_PROXIMITY_MODE_LED_PLUSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014a0:	230a      	movs	r3, #10
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2301      	movs	r3, #1
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2210      	movs	r2, #16
 80014b0:	21ae      	movs	r1, #174	; 0xae
 80014b2:	481e      	ldr	r0, [pc, #120]	; (800152c <max30102_init+0x140>)
 80014b4:	f001 f94e 	bl	8002754 <HAL_I2C_Mem_Write>
    /*FIFO clear*/
    data = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014bc:	230a      	movs	r3, #10
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2301      	movs	r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	2204      	movs	r2, #4
 80014cc:	21ae      	movs	r1, #174	; 0xae
 80014ce:	4817      	ldr	r0, [pc, #92]	; (800152c <max30102_init+0x140>)
 80014d0:	f001 f940 	bl	8002754 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014d4:	230a      	movs	r3, #10
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2301      	movs	r3, #1
 80014e2:	2205      	movs	r2, #5
 80014e4:	21ae      	movs	r1, #174	; 0xae
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <max30102_init+0x140>)
 80014e8:	f001 f934 	bl	8002754 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80014ec:	230a      	movs	r3, #10
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2301      	movs	r3, #1
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	2206      	movs	r2, #6
 80014fc:	21ae      	movs	r1, #174	; 0xae
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <max30102_init+0x140>)
 8001500:	f001 f928 	bl	8002754 <HAL_I2C_Mem_Write>
    /*interrupt status clear*/
    max30102_getStatus();
 8001504:	f000 f8d8 	bl	80016b8 <max30102_getStatus>
    // /*转换温度*/
    // data = 1;
    // HAL_I2C_Mem_Write(&, MAX30102_ADDR_WRITE, RES_DIE_TEMPERATURE_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
    /*SPO2 Mode*/
    data = 0x03;
 8001508:	2303      	movs	r3, #3
 800150a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, RES_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 800150c:	230a      	movs	r3, #10
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	2209      	movs	r2, #9
 800151c:	21ae      	movs	r1, #174	; 0xae
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <max30102_init+0x140>)
 8001520:	f001 f918 	bl	8002754 <HAL_I2C_Mem_Write>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200000f0 	.word	0x200000f0

08001530 <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af04      	add	r7, sp, #16
    uint8_t wr = 0, rd = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
 800153a:	2300      	movs	r3, #0
 800153c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 800153e:	230a      	movs	r3, #10
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	2301      	movs	r3, #1
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	2204      	movs	r2, #4
 800154e:	21af      	movs	r1, #175	; 0xaf
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <max30102_getUnreadSampleCount+0x68>)
 8001552:	f001 f9f9 	bl	8002948 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 8001556:	230a      	movs	r3, #10
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2301      	movs	r3, #1
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	1dbb      	adds	r3, r7, #6
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2206      	movs	r2, #6
 8001566:	21af      	movs	r1, #175	; 0xaf
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <max30102_getUnreadSampleCount+0x68>)
 800156a:	f001 f9ed 	bl	8002948 <HAL_I2C_Mem_Read>
    if ((wr - rd) < 0)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	461a      	mov	r2, r3
 8001572:	79bb      	ldrb	r3, [r7, #6]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	da06      	bge.n	8001588 <max30102_getUnreadSampleCount+0x58>
        return wr - rd + 32;
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	3320      	adds	r3, #32
 8001584:	b2db      	uxtb	r3, r3
 8001586:	e003      	b.n	8001590 <max30102_getUnreadSampleCount+0x60>
    else
        return wr - rd;
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	79bb      	ldrb	r3, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200000f0 	.word	0x200000f0

0800159c <max30102_getFIFO>:

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af04      	add	r7, sp, #16
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70fb      	strb	r3, [r7, #3]
    uint8_t dataTemp[5 * 6];
    if (sampleCount > 5)
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d901      	bls.n	80015b2 <max30102_getFIFO+0x16>
        sampleCount = 5;
 80015ae:	2305      	movs	r3, #5
 80015b0:	70fb      	strb	r3, [r7, #3]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_FIFO_DATA_REGISTER,
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	0052      	lsls	r2, r2, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2219      	movs	r2, #25
 80015c2:	9202      	str	r2, [sp, #8]
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	2301      	movs	r3, #1
 80015ce:	2207      	movs	r2, #7
 80015d0:	21af      	movs	r1, #175	; 0xaf
 80015d2:	4838      	ldr	r0, [pc, #224]	; (80016b4 <max30102_getFIFO+0x118>)
 80015d4:	f001 f9b8 	bl	8002948 <HAL_I2C_Mem_Read>
                     I2C_MEMADD_SIZE_8BIT, dataTemp,
                     6 * sampleCount, 25);
    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015de:	e05f      	b.n	80016a0 <max30102_getFIFO+0x104>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 80015e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	3328      	adds	r3, #40	; 0x28
 80015ee:	443b      	add	r3, r7
 80015f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80015f4:	0419      	lsls	r1, r3, #16
 80015f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3301      	adds	r3, #1
 8001604:	3328      	adds	r3, #40	; 0x28
 8001606:	443b      	add	r3, r7
 8001608:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	4319      	orrs	r1, r3
 8001610:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	3302      	adds	r3, #2
 800161e:	3328      	adds	r3, #40	; 0x28
 8001620:	443b      	add	r3, r7
 8001622:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001626:	ea41 0203 	orr.w	r2, r1, r3
 800162a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	440b      	add	r3, r1
 8001634:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001638:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 800163a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	3303      	adds	r3, #3
 8001648:	3328      	adds	r3, #40	; 0x28
 800164a:	443b      	add	r3, r7
 800164c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001650:	0419      	lsls	r1, r3, #16
 8001652:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3304      	adds	r3, #4
 8001660:	3328      	adds	r3, #40	; 0x28
 8001662:	443b      	add	r3, r7
 8001664:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	4319      	orrs	r1, r3
 800166c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	3305      	adds	r3, #5
 800167a:	3328      	adds	r3, #40	; 0x28
 800167c:	443b      	add	r3, r7
 800167e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001682:	ea41 0203 	orr.w	r2, r1, r3
 8001686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	440b      	add	r3, r1
 8001690:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001694:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 8001696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169a:	3301      	adds	r3, #1
 800169c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d39a      	bcc.n	80015e0 <max30102_getFIFO+0x44>
    }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200000f0 	.word	0x200000f0

080016b8 <max30102_getStatus>:

uint8_t max30102_getStatus()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af04      	add	r7, sp, #16
    uint8_t data = 0, dataTemp = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	2300      	movs	r3, #0
 80016c4:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80016c6:	230a      	movs	r3, #10
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	2301      	movs	r3, #1
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	1dbb      	adds	r3, r7, #6
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	2200      	movs	r2, #0
 80016d6:	21af      	movs	r1, #175	; 0xaf
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <max30102_getStatus+0x54>)
 80016da:	f001 f935 	bl	8002948 <HAL_I2C_Mem_Read>
    data = dataTemp;
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, RES_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 80016e2:	230a      	movs	r3, #10
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	2201      	movs	r2, #1
 80016f2:	21af      	movs	r1, #175	; 0xaf
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <max30102_getStatus+0x54>)
 80016f6:	f001 f927 	bl	8002948 <HAL_I2C_Mem_Read>
    return data | dataTemp;
 80016fa:	79ba      	ldrb	r2, [r7, #6]
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	4313      	orrs	r3, r2
 8001700:	b2db      	uxtb	r3, r3
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200000f0 	.word	0x200000f0

08001710 <filter>:
uint16_t iRedAC = 0;
uint32_t iRedDC = 0;

#define FILTER_LEVEL 8 /*滤波等级*/
void filter(SAMPLE *s)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]
 8001724:	e011      	b.n	800174a <filter+0x3a>
    {
        red += sampleBuff[i].red;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <filter+0x68>)
 800172a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4413      	add	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <filter+0x68>)
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	3301      	adds	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d9ea      	bls.n	8001726 <filter+0x16>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4413      	add	r3, r2
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	605a      	str	r2, [r3, #4]
}
 800176c:	bf00      	nop
 800176e:	371c      	adds	r7, #28
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000144 	.word	0x20000144

0800177c <buffInsert>:

void buffInsert(SAMPLE s)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	463b      	mov	r3, r7
 8001784:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t i;
    for (i = BUFF_SIZE - 1; i > 0; i--)
 8001788:	2331      	movs	r3, #49	; 0x31
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e016      	b.n	80017bc <buffInsert+0x40>
    {
        sampleBuff[i].red = sampleBuff[i - 1].red;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	4910      	ldr	r1, [pc, #64]	; (80017d8 <buffInsert+0x5c>)
 8001796:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800179a:	490f      	ldr	r1, [pc, #60]	; (80017d8 <buffInsert+0x5c>)
 800179c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	7bf9      	ldrb	r1, [r7, #15]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <buffInsert+0x5c>)
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	480a      	ldr	r0, [pc, #40]	; (80017d8 <buffInsert+0x5c>)
 80017b0:	00cb      	lsls	r3, r1, #3
 80017b2:	4403      	add	r3, r0
 80017b4:	605a      	str	r2, [r3, #4]
    for (i = BUFF_SIZE - 1; i > 0; i--)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e5      	bne.n	800178e <buffInsert+0x12>
    }
    sampleBuff[0].red = s.red;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <buffInsert+0x5c>)
 80017c6:	6013      	str	r3, [r2, #0]
    sampleBuff[0].iRed = s.iRed;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <buffInsert+0x5c>)
 80017cc:	6053      	str	r3, [r2, #4]
}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr
 80017d8:	20000144 	.word	0x20000144

080017dc <calAcDc>:

void calAcDc(uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
    uint32_t rMax = sampleBuff[0].red;
 80017ea:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <calAcDc+0xe4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rMin = sampleBuff[0].red;
 80017f0:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <calAcDc+0xe4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	623b      	str	r3, [r7, #32]
    uint32_t iMax = sampleBuff[0].iRed;
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <calAcDc+0xe4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61fb      	str	r3, [r7, #28]
    uint32_t iMin = sampleBuff[0].iRed;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <calAcDc+0xe4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	61bb      	str	r3, [r7, #24]

    uint8_t i;
    for (i = 0; i < BUFF_SIZE; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e036      	b.n	8001876 <calAcDc+0x9a>
    {
        if (sampleBuff[i].red > rMax)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <calAcDc+0xe4>)
 800180c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001812:	429a      	cmp	r2, r3
 8001814:	d204      	bcs.n	8001820 <calAcDc+0x44>
            rMax = sampleBuff[i].red;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <calAcDc+0xe4>)
 800181a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
        if (sampleBuff[i].red < rMin)
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <calAcDc+0xe4>)
 8001824:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	429a      	cmp	r2, r3
 800182c:	d904      	bls.n	8001838 <calAcDc+0x5c>
            rMin = sampleBuff[i].red;
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <calAcDc+0xe4>)
 8001832:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001836:	623b      	str	r3, [r7, #32]
        if (sampleBuff[i].iRed > iMax)
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <calAcDc+0xe4>)
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	429a      	cmp	r2, r3
 8001846:	d205      	bcs.n	8001854 <calAcDc+0x78>
            iMax = sampleBuff[i].iRed;
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <calAcDc+0xe4>)
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	61fb      	str	r3, [r7, #28]
        if (sampleBuff[i].iRed < iMin)
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	4a1a      	ldr	r2, [pc, #104]	; (80018c0 <calAcDc+0xe4>)
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4413      	add	r3, r2
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	429a      	cmp	r2, r3
 8001862:	d905      	bls.n	8001870 <calAcDc+0x94>
            iMin = sampleBuff[i].iRed;
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <calAcDc+0xe4>)
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < BUFF_SIZE; i++)
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	3301      	adds	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2b31      	cmp	r3, #49	; 0x31
 800187a:	d9c5      	bls.n	8001808 <calAcDc+0x2c>
    }
    *rac = rMax - rMin;
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	b29a      	uxth	r2, r3
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	b29b      	uxth	r3, r3
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	4413      	add	r3, r2
 8001892:	085a      	lsrs	r2, r3, #1
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	b29a      	uxth	r2, r3
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4413      	add	r3, r2
 80018ae:	085a      	lsrs	r2, r3, #1
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	372c      	adds	r7, #44	; 0x2c
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000144 	.word	0x20000144
 80018c4:	00000000 	.word	0x00000000

080018c8 <max30102_cal>:

int16_t eachSampleDiff = 0; //和上一个样本相差了多少
void max30102_cal()
{
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 80018ce:	f7ff fe2f 	bl	8001530 <max30102_getUnreadSampleCount>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    SAMPLE sampleBuffTemp[5];
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 80018d8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018dc:	463b      	mov	r3, r7
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe5b 	bl	800159c <max30102_getFIFO>
    static uint8_t eachBeatSampleCount = 0;    //这次心跳历经了多少个样本
    static uint8_t lastTenBeatSampleCount[10]; //过去十次心跳每一次的样本数
    static uint32_t last_iRed = 0;             //上一次红外的值，过滤后的
    uint8_t i, ii;
    for (i = 0; i < unreadSampleCount; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018ec:	e122      	b.n	8001b34 <max30102_cal+0x26c>
    {
        if (sampleBuffTemp[i].iRed < 40000) //无手指不计算，跳过
 80018ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	3338      	adds	r3, #56	; 0x38
 80018f6:	443b      	add	r3, r7
 80018f8:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80018fc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001900:	4293      	cmp	r3, r2
 8001902:	d809      	bhi.n	8001918 <max30102_cal+0x50>
        {
            heartRate = 0;
 8001904:	4b9a      	ldr	r3, [pc, #616]	; (8001b70 <max30102_cal+0x2a8>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
            spo2 = 0;
 800190a:	4b9a      	ldr	r3, [pc, #616]	; (8001b74 <max30102_cal+0x2ac>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 8001910:	4b99      	ldr	r3, [pc, #612]	; (8001b78 <max30102_cal+0x2b0>)
 8001912:	2200      	movs	r2, #0
 8001914:	801a      	strh	r2, [r3, #0]
            continue;
 8001916:	e108      	b.n	8001b2a <max30102_cal+0x262>
        }
        buffInsert(sampleBuffTemp[i]);
 8001918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	3338      	adds	r3, #56	; 0x38
 8001920:	443b      	add	r3, r7
 8001922:	3b38      	subs	r3, #56	; 0x38
 8001924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001928:	f7ff ff28 	bl	800177c <buffInsert>
        calAcDc(&redAC, &redDC, &iRedAC, &iRedDC);
 800192c:	4b93      	ldr	r3, [pc, #588]	; (8001b7c <max30102_cal+0x2b4>)
 800192e:	4a94      	ldr	r2, [pc, #592]	; (8001b80 <max30102_cal+0x2b8>)
 8001930:	4994      	ldr	r1, [pc, #592]	; (8001b84 <max30102_cal+0x2bc>)
 8001932:	4895      	ldr	r0, [pc, #596]	; (8001b88 <max30102_cal+0x2c0>)
 8001934:	f7ff ff52 	bl	80017dc <calAcDc>
        filter(&sampleBuffTemp[i]);
 8001938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800193c:	463a      	mov	r2, r7
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fee4 	bl	8001710 <filter>
        //计算spo2
        float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <max30102_cal+0x2c0>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f933 	bl	8000bb8 <__aeabi_ui2f>
 8001952:	4604      	mov	r4, r0
 8001954:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <max30102_cal+0x2bc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f92d 	bl	8000bb8 <__aeabi_ui2f>
 800195e:	4603      	mov	r3, r0
 8001960:	4619      	mov	r1, r3
 8001962:	4620      	mov	r0, r4
 8001964:	f7ff fa34 	bl	8000dd0 <__aeabi_fdiv>
 8001968:	4603      	mov	r3, r0
 800196a:	461d      	mov	r5, r3
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <max30102_cal+0x2b8>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f921 	bl	8000bb8 <__aeabi_ui2f>
 8001976:	4604      	mov	r4, r0
 8001978:	4b80      	ldr	r3, [pc, #512]	; (8001b7c <max30102_cal+0x2b4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f91b 	bl	8000bb8 <__aeabi_ui2f>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4620      	mov	r0, r4
 8001988:	f7ff fa22 	bl	8000dd0 <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	4619      	mov	r1, r3
 8001990:	4628      	mov	r0, r5
 8001992:	f7ff fa1d 	bl	8000dd0 <__aeabi_fdiv>
 8001996:	4603      	mov	r3, r0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
        if (R >= 0.36 && R < 0.66)
 800199a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800199c:	f7fe fd44 	bl	8000428 <__aeabi_f2d>
 80019a0:	a36b      	add	r3, pc, #428	; (adr r3, 8001b50 <max30102_cal+0x288>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7ff f81d 	bl	80009e4 <__aeabi_dcmpge>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d01c      	beq.n	80019ea <max30102_cal+0x122>
 80019b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019b2:	f7fe fd39 	bl	8000428 <__aeabi_f2d>
 80019b6:	a368      	add	r3, pc, #416	; (adr r3, 8001b58 <max30102_cal+0x290>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fffe 	bl	80009bc <__aeabi_dcmplt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d011      	beq.n	80019ea <max30102_cal+0x122>
            spo2 = (uint8_t)(107 - 20 * R);
 80019c6:	4971      	ldr	r1, [pc, #452]	; (8001b8c <max30102_cal+0x2c4>)
 80019c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ca:	f7ff f94d 	bl	8000c68 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	486f      	ldr	r0, [pc, #444]	; (8001b90 <max30102_cal+0x2c8>)
 80019d4:	f7ff f83e 	bl	8000a54 <__aeabi_fsub>
 80019d8:	4603      	mov	r3, r0
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb0a 	bl	8000ff4 <__aeabi_f2uiz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <max30102_cal+0x2ac>)
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e02b      	b.n	8001a42 <max30102_cal+0x17a>
        else if (R >= 0.66 && R < 1)
 80019ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019ec:	f7fe fd1c 	bl	8000428 <__aeabi_f2d>
 80019f0:	a359      	add	r3, pc, #356	; (adr r3, 8001b58 <max30102_cal+0x290>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fff5 	bl	80009e4 <__aeabi_dcmpge>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <max30102_cal+0x17a>
 8001a00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a06:	f7ff facd 	bl	8000fa4 <__aeabi_fcmplt>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d018      	beq.n	8001a42 <max30102_cal+0x17a>
            spo2 = (uint8_t)(129.64 - 54 * R);
 8001a10:	4960      	ldr	r1, [pc, #384]	; (8001b94 <max30102_cal+0x2cc>)
 8001a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a14:	f7ff f928 	bl	8000c68 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fd04 	bl	8000428 <__aeabi_f2d>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	a14e      	add	r1, pc, #312	; (adr r1, 8001b60 <max30102_cal+0x298>)
 8001a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a2a:	f7fe fb9d 	bl	8000168 <__aeabi_dsub>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7fe ffe9 	bl	8000a0c <__aeabi_d2uiz>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <max30102_cal+0x2ac>)
 8001a40:	701a      	strb	r2, [r3, #0]
        //计算心率,30-250ppm  count:200-12
        eachSampleDiff = last_iRed - sampleBuffTemp[i].iRed;
 8001a42:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <max30102_cal+0x2d0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	3338      	adds	r3, #56	; 0x38
 8001a50:	443b      	add	r3, r7
 8001a52:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <max30102_cal+0x2b0>)
 8001a60:	801a      	strh	r2, [r3, #0]
        if (eachSampleDiff > 50 && eachBeatSampleCount > 12)
 8001a62:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <max30102_cal+0x2b0>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	2b32      	cmp	r3, #50	; 0x32
 8001a6a:	dd4f      	ble.n	8001b0c <max30102_cal+0x244>
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <max30102_cal+0x2d4>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	d94b      	bls.n	8001b0c <max30102_cal+0x244>
        {
            for (ii = 9; ii > 0; ii--)
 8001a74:	2309      	movs	r3, #9
 8001a76:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a7a:	e00d      	b.n	8001a98 <max30102_cal+0x1d0>
                lastTenBeatSampleCount[i] = lastTenBeatSampleCount[i - 1];
 8001a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a80:	1e5a      	subs	r2, r3, #1
 8001a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a86:	4946      	ldr	r1, [pc, #280]	; (8001ba0 <max30102_cal+0x2d8>)
 8001a88:	5c89      	ldrb	r1, [r1, r2]
 8001a8a:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <max30102_cal+0x2d8>)
 8001a8c:	54d1      	strb	r1, [r2, r3]
            for (ii = 9; ii > 0; ii--)
 8001a8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001a98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ed      	bne.n	8001a7c <max30102_cal+0x1b4>
            lastTenBeatSampleCount[0] = eachBeatSampleCount;
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	; (8001b9c <max30102_cal+0x2d4>)
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <max30102_cal+0x2d8>)
 8001aa6:	701a      	strb	r2, [r3, #0]
            uint32_t totalTime = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ab2:	e00c      	b.n	8001ace <max30102_cal+0x206>
                totalTime += lastTenBeatSampleCount[i];
 8001ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ab8:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <max30102_cal+0x2d8>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	461a      	mov	r2, r3
 8001abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac0:	4413      	add	r3, r2
 8001ac2:	633b      	str	r3, [r7, #48]	; 0x30
            for (ii = 0; ii < 10; ii++)
 8001ac4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ac8:	3301      	adds	r3, #1
 8001aca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ace:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ad2:	2b09      	cmp	r3, #9
 8001ad4:	d9ee      	bls.n	8001ab4 <max30102_cal+0x1ec>
            heartRate = (uint8_t)(60.0 * 10 / 0.02 / ((float)totalTime));
 8001ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ad8:	f7ff f86e 	bl	8000bb8 <__aeabi_ui2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fca2 	bl	8000428 <__aeabi_f2d>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	a11f      	add	r1, pc, #124	; (adr r1, 8001b68 <max30102_cal+0x2a0>)
 8001aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aee:	f7fe fe1d 	bl	800072c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7fe ff87 	bl	8000a0c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <max30102_cal+0x2a8>)
 8001b04:	701a      	strb	r2, [r3, #0]
            eachBeatSampleCount = 0;
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <max30102_cal+0x2d4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
        }
        last_iRed = sampleBuffTemp[i].iRed;
 8001b0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	3338      	adds	r3, #56	; 0x38
 8001b14:	443b      	add	r3, r7
 8001b16:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <max30102_cal+0x2d0>)
 8001b1c:	6013      	str	r3, [r2, #0]
        eachBeatSampleCount++;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <max30102_cal+0x2d4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <max30102_cal+0x2d4>)
 8001b28:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 8001b2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f4ff aed6 	bcc.w	80018ee <max30102_cal+0x26>
    }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3738      	adds	r7, #56	; 0x38
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	70a3d70a 	.word	0x70a3d70a
 8001b54:	3fd70a3d 	.word	0x3fd70a3d
 8001b58:	51eb851f 	.word	0x51eb851f
 8001b5c:	3fe51eb8 	.word	0x3fe51eb8
 8001b60:	e147ae14 	.word	0xe147ae14
 8001b64:	4060347a 	.word	0x4060347a
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40dd4c00 	.word	0x40dd4c00
 8001b70:	200002d4 	.word	0x200002d4
 8001b74:	200002d5 	.word	0x200002d5
 8001b78:	200002e4 	.word	0x200002e4
 8001b7c:	200002e0 	.word	0x200002e0
 8001b80:	200002dc 	.word	0x200002dc
 8001b84:	200002d8 	.word	0x200002d8
 8001b88:	200002d6 	.word	0x200002d6
 8001b8c:	41a00000 	.word	0x41a00000
 8001b90:	42d60000 	.word	0x42d60000
 8001b94:	42580000 	.word	0x42580000
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	200002ec 	.word	0x200002ec
 8001ba0:	200002f0 	.word	0x200002f0

08001ba4 <max30102_getHeartRate>:

uint8_t max30102_getHeartRate() { return heartRate; }
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <max30102_getHeartRate+0x10>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	200002d4 	.word	0x200002d4

08001bb8 <max30102_getSpO2>:
uint8_t max30102_getSpO2() { return spo2; }
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <max30102_getSpO2+0x10>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	200002d5 	.word	0x200002d5

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_MspInit+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_MspInit+0x68>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_MspInit+0x68>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_MspInit+0x68>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_MspInit+0x68>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x68>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	f06f 0001 	mvn.w	r0, #1
 8001c0a:	f000 fa68 	bl	80020de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x6c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_MspInit+0x6c>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000

08001c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_InitTick+0xd0>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <HAL_InitTick+0xd0>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_InitTick+0xd0>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c6a:	f107 020c 	add.w	r2, r7, #12
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f002 f875 	bl	8003d64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c7a:	f002 f85f 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8001c7e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c82:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_InitTick+0xd4>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_InitTick+0xd8>)
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_InitTick+0xdc>)
 8001c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_InitTick+0xd8>)
 8001c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c9a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	; (8001d14 <HAL_InitTick+0xd8>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_InitTick+0xd8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_InitTick+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_InitTick+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <HAL_InitTick+0xd8>)
 8001cb6:	f002 f8a3 	bl	8003e00 <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11b      	bne.n	8001d00 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <HAL_InitTick+0xd8>)
 8001cca:	f002 f8f1 	bl	8003eb0 <HAL_TIM_Base_Start_IT>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cdc:	2019      	movs	r0, #25
 8001cde:	f000 fa1a 	bl	8002116 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d808      	bhi.n	8001cfa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	2019      	movs	r0, #25
 8001cee:	f000 f9f6 	bl	80020de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_InitTick+0xe0>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e002      	b.n	8001d00 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3730      	adds	r7, #48	; 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	200002fc 	.word	0x200002fc
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	20000004 	.word	0x20000004

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <TIM1_UP_IRQHandler+0x10>)
 8001d52:	f002 f8ff 	bl	8003f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200002fc 	.word	0x200002fc

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f005 faa0 	bl	80072d4 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20005000 	.word	0x20005000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000344 	.word	0x20000344
 8001dc8:	20001db0 	.word	0x20001db0

08001dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <MX_USART1_UART_Init+0x50>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_USART1_UART_Init+0x4c>)
 8001e10:	f002 fa40 	bl	8004294 <HAL_UART_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e1a:	f7ff fae1 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000348 	.word	0x20000348
 8001e28:	40013800 	.word	0x40013800

08001e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_UART_MspInit+0x8c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d131      	bne.n	8001eb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	6193      	str	r3, [r2, #24]
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6193      	str	r3, [r2, #24]
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_UART_MspInit+0x90>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0310 	add.w	r3, r7, #16
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480b      	ldr	r0, [pc, #44]	; (8001ec0 <HAL_UART_MspInit+0x94>)
 8001e92:	f000 f94f 	bl	8002134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <HAL_UART_MspInit+0x94>)
 8001eac:	f000 f942 	bl	8002134 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010800 	.word	0x40010800

08001ec4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec4:	f7ff ff82 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee0:	4c09      	ldr	r4, [pc, #36]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eee:	f005 f9f7 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef2:	f7ff fa0b 	bl	800130c <main>
  bx lr
 8001ef6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001efc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f00:	08007ea8 	.word	0x08007ea8
  ldr r2, =_sbss
 8001f04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f08:	20001dac 	.word	0x20001dac

08001f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC1_2_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x28>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x28>)
 8001f1a:	f043 0310 	orr.w	r3, r3, #16
 8001f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f8d1 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f7ff fe88 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fe4e 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x1c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x20>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_IncTick+0x20>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000390 	.word	0x20000390

08001f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_GetTick+0x10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000390 	.word	0x20000390

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4906      	ldr	r1, [pc, #24]	; (800200c <__NVIC_EnableIRQ+0x34>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ff4f 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f0:	f7ff ff64 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 80020f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	6978      	ldr	r0, [r7, #20]
 80020fc:	f7ff ffb2 	bl	8002064 <NVIC_EncodePriority>
 8002100:	4602      	mov	r2, r0
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff81 	bl	8002010 <__NVIC_SetPriority>
}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff57 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b08b      	sub	sp, #44	; 0x2c
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002146:	e169      	b.n	800241c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002148:	2201      	movs	r2, #1
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8158 	bne.w	8002416 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a9a      	ldr	r2, [pc, #616]	; (80023d4 <HAL_GPIO_Init+0x2a0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d05e      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002170:	4a98      	ldr	r2, [pc, #608]	; (80023d4 <HAL_GPIO_Init+0x2a0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d875      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 8002176:	4a98      	ldr	r2, [pc, #608]	; (80023d8 <HAL_GPIO_Init+0x2a4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d058      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 800217c:	4a96      	ldr	r2, [pc, #600]	; (80023d8 <HAL_GPIO_Init+0x2a4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d86f      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 8002182:	4a96      	ldr	r2, [pc, #600]	; (80023dc <HAL_GPIO_Init+0x2a8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d052      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002188:	4a94      	ldr	r2, [pc, #592]	; (80023dc <HAL_GPIO_Init+0x2a8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d869      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 800218e:	4a94      	ldr	r2, [pc, #592]	; (80023e0 <HAL_GPIO_Init+0x2ac>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d04c      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 8002194:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_GPIO_Init+0x2ac>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d863      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 800219a:	4a92      	ldr	r2, [pc, #584]	; (80023e4 <HAL_GPIO_Init+0x2b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d046      	beq.n	800222e <HAL_GPIO_Init+0xfa>
 80021a0:	4a90      	ldr	r2, [pc, #576]	; (80023e4 <HAL_GPIO_Init+0x2b0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d85d      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d82a      	bhi.n	8002200 <HAL_GPIO_Init+0xcc>
 80021aa:	2b12      	cmp	r3, #18
 80021ac:	d859      	bhi.n	8002262 <HAL_GPIO_Init+0x12e>
 80021ae:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <HAL_GPIO_Init+0x80>)
 80021b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b4:	0800222f 	.word	0x0800222f
 80021b8:	08002209 	.word	0x08002209
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	0800225d 	.word	0x0800225d
 80021c4:	08002263 	.word	0x08002263
 80021c8:	08002263 	.word	0x08002263
 80021cc:	08002263 	.word	0x08002263
 80021d0:	08002263 	.word	0x08002263
 80021d4:	08002263 	.word	0x08002263
 80021d8:	08002263 	.word	0x08002263
 80021dc:	08002263 	.word	0x08002263
 80021e0:	08002263 	.word	0x08002263
 80021e4:	08002263 	.word	0x08002263
 80021e8:	08002263 	.word	0x08002263
 80021ec:	08002263 	.word	0x08002263
 80021f0:	08002263 	.word	0x08002263
 80021f4:	08002263 	.word	0x08002263
 80021f8:	08002211 	.word	0x08002211
 80021fc:	08002225 	.word	0x08002225
 8002200:	4a79      	ldr	r2, [pc, #484]	; (80023e8 <HAL_GPIO_Init+0x2b4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002206:	e02c      	b.n	8002262 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	623b      	str	r3, [r7, #32]
          break;
 800220e:	e029      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	3304      	adds	r3, #4
 8002216:	623b      	str	r3, [r7, #32]
          break;
 8002218:	e024      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	3308      	adds	r3, #8
 8002220:	623b      	str	r3, [r7, #32]
          break;
 8002222:	e01f      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	330c      	adds	r3, #12
 800222a:	623b      	str	r3, [r7, #32]
          break;
 800222c:	e01a      	b.n	8002264 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002236:	2304      	movs	r3, #4
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e013      	b.n	8002264 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	611a      	str	r2, [r3, #16]
          break;
 800224e:	e009      	b.n	8002264 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002250:	2308      	movs	r3, #8
 8002252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	615a      	str	r2, [r3, #20]
          break;
 800225a:	e003      	b.n	8002264 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x130>
          break;
 8002262:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d801      	bhi.n	800226e <HAL_GPIO_Init+0x13a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_Init+0x13e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d802      	bhi.n	8002280 <HAL_GPIO_Init+0x14c>
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	e002      	b.n	8002286 <HAL_GPIO_Init+0x152>
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	3b08      	subs	r3, #8
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	210f      	movs	r1, #15
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	401a      	ands	r2, r3
 8002298:	6a39      	ldr	r1, [r7, #32]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80b1 	beq.w	8002416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b4:	4b4d      	ldr	r3, [pc, #308]	; (80023ec <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a4c      	ldr	r2, [pc, #304]	; (80023ec <HAL_GPIO_Init+0x2b8>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b4a      	ldr	r3, [pc, #296]	; (80023ec <HAL_GPIO_Init+0x2b8>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <HAL_GPIO_Init+0x2bc>)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a40      	ldr	r2, [pc, #256]	; (80023f4 <HAL_GPIO_Init+0x2c0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <HAL_GPIO_Init+0x1ec>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3f      	ldr	r2, [pc, #252]	; (80023f8 <HAL_GPIO_Init+0x2c4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_GPIO_Init+0x1e8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3e      	ldr	r2, [pc, #248]	; (80023fc <HAL_GPIO_Init+0x2c8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <HAL_GPIO_Init+0x1e4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <HAL_GPIO_Init+0x2cc>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_GPIO_Init+0x1e0>
 8002310:	2303      	movs	r3, #3
 8002312:	e006      	b.n	8002322 <HAL_GPIO_Init+0x1ee>
 8002314:	2304      	movs	r3, #4
 8002316:	e004      	b.n	8002322 <HAL_GPIO_Init+0x1ee>
 8002318:	2302      	movs	r3, #2
 800231a:	e002      	b.n	8002322 <HAL_GPIO_Init+0x1ee>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_GPIO_Init+0x1ee>
 8002320:	2300      	movs	r3, #0
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	f002 0203 	and.w	r2, r2, #3
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	4093      	lsls	r3, r2
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002332:	492f      	ldr	r1, [pc, #188]	; (80023f0 <HAL_GPIO_Init+0x2bc>)
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800234c:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	492c      	ldr	r1, [pc, #176]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800235a:	4b2a      	ldr	r3, [pc, #168]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	43db      	mvns	r3, r3
 8002362:	4928      	ldr	r1, [pc, #160]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002364:	4013      	ands	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4922      	ldr	r1, [pc, #136]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	43db      	mvns	r3, r3
 800238a:	491e      	ldr	r1, [pc, #120]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 800238c:	4013      	ands	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4918      	ldr	r1, [pc, #96]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	4914      	ldr	r1, [pc, #80]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d021      	beq.n	8002408 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e021      	b.n	8002416 <HAL_GPIO_Init+0x2e2>
 80023d2:	bf00      	nop
 80023d4:	10320000 	.word	0x10320000
 80023d8:	10310000 	.word	0x10310000
 80023dc:	10220000 	.word	0x10220000
 80023e0:	10210000 	.word	0x10210000
 80023e4:	10120000 	.word	0x10120000
 80023e8:	10110000 	.word	0x10110000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010000 	.word	0x40010000
 80023f4:	40010800 	.word	0x40010800
 80023f8:	40010c00 	.word	0x40010c00
 80023fc:	40011000 	.word	0x40011000
 8002400:	40011400 	.word	0x40011400
 8002404:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_GPIO_Init+0x304>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	43db      	mvns	r3, r3
 8002410:	4909      	ldr	r1, [pc, #36]	; (8002438 <HAL_GPIO_Init+0x304>)
 8002412:	4013      	ands	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	3301      	adds	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	f47f ae8e 	bne.w	8002148 <HAL_GPIO_Init+0x14>
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	372c      	adds	r7, #44	; 0x2c
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	40010400 	.word	0x40010400

0800243c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	e001      	b.n	800245e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]
 8002476:	4613      	mov	r3, r2
 8002478:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247a:	787b      	ldrb	r3, [r7, #1]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002480:	887a      	ldrh	r2, [r7, #2]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002486:	e003      	b.n	8002490 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	041a      	lsls	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ac:	887a      	ldrh	r2, [r7, #2]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	400b      	ands	r3, r1
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e12b      	b.n	8002736 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fecc 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2224      	movs	r2, #36	; 0x24
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002530:	f001 fbf0 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 8002534:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a81      	ldr	r2, [pc, #516]	; (8002740 <HAL_I2C_Init+0x274>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d807      	bhi.n	8002550 <HAL_I2C_Init+0x84>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a80      	ldr	r2, [pc, #512]	; (8002744 <HAL_I2C_Init+0x278>)
 8002544:	4293      	cmp	r3, r2
 8002546:	bf94      	ite	ls
 8002548:	2301      	movls	r3, #1
 800254a:	2300      	movhi	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e006      	b.n	800255e <HAL_I2C_Init+0x92>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <HAL_I2C_Init+0x27c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	bf94      	ite	ls
 8002558:	2301      	movls	r3, #1
 800255a:	2300      	movhi	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0e7      	b.n	8002736 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4a78      	ldr	r2, [pc, #480]	; (800274c <HAL_I2C_Init+0x280>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	0c9b      	lsrs	r3, r3, #18
 8002570:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	430a      	orrs	r2, r1
 8002584:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4a6a      	ldr	r2, [pc, #424]	; (8002740 <HAL_I2C_Init+0x274>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d802      	bhi.n	80025a0 <HAL_I2C_Init+0xd4>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	3301      	adds	r3, #1
 800259e:	e009      	b.n	80025b4 <HAL_I2C_Init+0xe8>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <HAL_I2C_Init+0x284>)
 80025ac:	fba2 2303 	umull	r2, r3, r2, r3
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	3301      	adds	r3, #1
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	495c      	ldr	r1, [pc, #368]	; (8002740 <HAL_I2C_Init+0x274>)
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d819      	bhi.n	8002608 <HAL_I2C_Init+0x13c>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e59      	subs	r1, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e2:	1c59      	adds	r1, r3, #1
 80025e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025e8:	400b      	ands	r3, r1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_I2C_Init+0x138>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1e59      	subs	r1, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	e051      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002604:	2304      	movs	r3, #4
 8002606:	e04f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d111      	bne.n	8002634 <HAL_I2C_Init+0x168>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e012      	b.n	800265a <HAL_I2C_Init+0x18e>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x196>
 800265e:	2301      	movs	r3, #1
 8002660:	e022      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10e      	bne.n	8002688 <HAL_I2C_Init+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	1e58      	subs	r0, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	440b      	add	r3, r1
 8002678:	fbb0 f3f3 	udiv	r3, r0, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002686:	e00f      	b.n	80026a8 <HAL_I2C_Init+0x1dc>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	6809      	ldr	r1, [r1, #0]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69da      	ldr	r2, [r3, #28]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6911      	ldr	r1, [r2, #16]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68d2      	ldr	r2, [r2, #12]
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	430b      	orrs	r3, r1
 80026ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	000186a0 	.word	0x000186a0
 8002744:	001e847f 	.word	0x001e847f
 8002748:	003d08ff 	.word	0x003d08ff
 800274c:	431bde83 	.word	0x431bde83
 8002750:	10624dd3 	.word	0x10624dd3

08002754 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	817b      	strh	r3, [r7, #10]
 8002766:	460b      	mov	r3, r1
 8002768:	813b      	strh	r3, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800276e:	f7ff fbf7 	bl	8001f60 <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b20      	cmp	r3, #32
 800277e:	f040 80d9 	bne.w	8002934 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	2319      	movs	r3, #25
 8002788:	2201      	movs	r2, #1
 800278a:	496d      	ldr	r1, [pc, #436]	; (8002940 <HAL_I2C_Mem_Write+0x1ec>)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fcc1 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
 800279a:	e0cc      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Mem_Write+0x56>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e0c5      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d007      	beq.n	80027d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2221      	movs	r2, #33	; 0x21
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2240      	movs	r2, #64	; 0x40
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a3a      	ldr	r2, [r7, #32]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a4d      	ldr	r2, [pc, #308]	; (8002944 <HAL_I2C_Mem_Write+0x1f0>)
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002812:	88f8      	ldrh	r0, [r7, #6]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	8979      	ldrh	r1, [r7, #10]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4603      	mov	r3, r0
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 faf8 	bl	8002e18 <I2C_RequestMemoryWrite>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d052      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e081      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 fd86 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2b04      	cmp	r3, #4
 8002848:	d107      	bne.n	800285a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002858:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d11b      	bne.n	80028d4 <HAL_I2C_Mem_Write+0x180>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1aa      	bne.n	8002832 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fd79 	bl	80033d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e016      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	e000      	b.n	8002936 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002934:	2302      	movs	r3, #2
  }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000

08002948 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4603      	mov	r3, r0
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	460b      	mov	r3, r1
 800295c:	813b      	strh	r3, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002966:	f7ff fafb 	bl	8001f60 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b20      	cmp	r3, #32
 8002976:	f040 8244 	bne.w	8002e02 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2319      	movs	r3, #25
 8002980:	2201      	movs	r2, #1
 8002982:	4982      	ldr	r1, [pc, #520]	; (8002b8c <HAL_I2C_Mem_Read+0x244>)
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fbc5 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
 8002992:	e237      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Mem_Read+0x5a>
 800299e:	2302      	movs	r3, #2
 80029a0:	e230      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d007      	beq.n	80029c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2222      	movs	r2, #34	; 0x22
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a62      	ldr	r2, [pc, #392]	; (8002b90 <HAL_I2C_Mem_Read+0x248>)
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a0a:	88f8      	ldrh	r0, [r7, #6]
 8002a0c:	893a      	ldrh	r2, [r7, #8]
 8002a0e:	8979      	ldrh	r1, [r7, #10]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4603      	mov	r3, r0
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fa92 	bl	8002f44 <I2C_RequestMemoryRead>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e1ec      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d113      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e1c0      	b.n	8002ddc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d11e      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a72:	b672      	cpsid	i
}
 8002a74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a9c:	b662      	cpsie	i
}
 8002a9e:	e035      	b.n	8002b0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d11e      	bne.n	8002ae6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ab6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab8:	b672      	cpsid	i
}
 8002aba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae2:	b662      	cpsie	i
}
 8002ae4:	e012      	b.n	8002b0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b0c:	e166      	b.n	8002ddc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	f200 811f 	bhi.w	8002d56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d123      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fc9f 	bl	8003468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e167      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b66:	e139      	b.n	8002ddc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d152      	bne.n	8002c16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	2200      	movs	r2, #0
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <HAL_I2C_Mem_Read+0x24c>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 faca 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e13c      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
 8002b8a:	bf00      	nop
 8002b8c:	00100002 	.word	0x00100002
 8002b90:	ffff0000 	.word	0xffff0000
 8002b94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
}
 8002b9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002baa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bde:	b662      	cpsie	i
}
 8002be0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c14:	e0e2      	b.n	8002ddc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	497b      	ldr	r1, [pc, #492]	; (8002e0c <HAL_I2C_Mem_Read+0x4c4>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa77 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0e9      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_I2C_Mem_Read+0x4c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	08db      	lsrs	r3, r3, #3
 8002c7c:	4a65      	ldr	r2, [pc, #404]	; (8002e14 <HAL_I2C_Mem_Read+0x4cc>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0a1a      	lsrs	r2, r3, #8
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00da      	lsls	r2, r3, #3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d118      	bne.n	8002cce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cbe:	b662      	cpsie	i
}
 8002cc0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e09a      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d1d9      	bne.n	8002c90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d1e:	b662      	cpsie	i
}
 8002d20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d54:	e042      	b.n	8002ddc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 fb84 	bl	8003468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e04c      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d118      	bne.n	8002ddc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f ae94 	bne.w	8002b0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3728      	adds	r7, #40	; 0x28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	00010004 	.word	0x00010004
 8002e10:	20000000 	.word	0x20000000
 8002e14:	14f8b589 	.word	0x14f8b589

08002e18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f960 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d103      	bne.n	8002e72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e05f      	b.n	8002f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	492d      	ldr	r1, [pc, #180]	; (8002f40 <I2C_RequestMemoryWrite+0x128>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f9bb 	bl	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04c      	b.n	8002f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa46 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00d      	beq.n	8002ede <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d107      	bne.n	8002eda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e02b      	b.n	8002f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ee4:	893b      	ldrh	r3, [r7, #8]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	611a      	str	r2, [r3, #16]
 8002eee:	e021      	b.n	8002f34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	6a39      	ldr	r1, [r7, #32]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fa20 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e005      	b.n	8002f36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2a:	893b      	ldrh	r3, [r7, #8]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	00010002 	.word	0x00010002

08002f44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f8c2 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d103      	bne.n	8002fae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0aa      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	4952      	ldr	r1, [pc, #328]	; (8003110 <I2C_RequestMemoryRead+0x1cc>)
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f91d 	bl	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e097      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f9a8 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e076      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003020:	893b      	ldrh	r3, [r7, #8]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]
 800302a:	e021      	b.n	8003070 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f982 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e050      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003066:	893b      	ldrh	r3, [r7, #8]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	6a39      	ldr	r1, [r7, #32]
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f967 	bl	8003348 <I2C_WaitOnTXEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00d      	beq.n	800309c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003096:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e035      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f82b 	bl	8003114 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d103      	bne.n	80030dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e013      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030e0:	897b      	ldrh	r3, [r7, #10]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	6a3a      	ldr	r2, [r7, #32]
 80030f4:	4906      	ldr	r1, [pc, #24]	; (8003110 <I2C_RequestMemoryRead+0x1cc>)
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f886 	bl	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	00010002 	.word	0x00010002

08003114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003124:	e048      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d044      	beq.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fe ff17 	bl	8001f60 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d139      	bne.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d10d      	bne.n	800316a <I2C_WaitOnFlagUntilTimeout+0x56>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	e00c      	b.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	43da      	mvns	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e023      	b.n	8003200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d10d      	bne.n	80031de <I2C_WaitOnFlagUntilTimeout+0xca>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	e00c      	b.n	80031f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d093      	beq.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003216:	e071      	b.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003226:	d123      	bne.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e067      	b.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d041      	beq.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003278:	f7fe fe72 	bl	8001f60 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	d302      	bcc.n	800328e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d136      	bne.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	e00b      	b.n	80032ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e021      	b.n	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d10c      	bne.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	43da      	mvns	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e00b      	b.n	8003338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf14      	ite	ne
 8003332:	2301      	movne	r3, #1
 8003334:	2300      	moveq	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	f47f af6d 	bne.w	8003218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003354:	e034      	b.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8e3 	bl	8003522 <I2C_IsAcknowledgeFailed>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e034      	b.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d028      	beq.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fe fdf7 	bl	8001f60 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11d      	bne.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d016      	beq.n	80033c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d1c3      	bne.n	8003356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033e4:	e034      	b.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f89b 	bl	8003522 <I2C_IsAcknowledgeFailed>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e034      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d028      	beq.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7fe fdaf 	bl	8001f60 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d302      	bcc.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11d      	bne.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d016      	beq.n	8003450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0304 	and.w	r3, r3, #4
 800345a:	2b04      	cmp	r3, #4
 800345c:	d1c3      	bne.n	80033e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003474:	e049      	b.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b10      	cmp	r3, #16
 8003482:	d119      	bne.n	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0210 	mvn.w	r2, #16
 800348c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e030      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b8:	f7fe fd52 	bl	8001f60 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d302      	bcc.n	80034ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11d      	bne.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d016      	beq.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e007      	b.n	800351a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d1ae      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003538:	d11b      	bne.n	8003572 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003542:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e272      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8087 	beq.w	80036ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035a0:	4b92      	ldr	r3, [pc, #584]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d00c      	beq.n	80035c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ac:	4b8f      	ldr	r3, [pc, #572]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d112      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
 80035b8:	4b8c      	ldr	r3, [pc, #560]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d10b      	bne.n	80035de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d06c      	beq.n	80036ac <HAL_RCC_OscConfig+0x12c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d168      	bne.n	80036ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e24c      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x76>
 80035e8:	4b80      	ldr	r3, [pc, #512]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a7f      	ldr	r2, [pc, #508]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	e02e      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7a      	ldr	r2, [pc, #488]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a77      	ldr	r2, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e01d      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0xbc>
 8003622:	4b72      	ldr	r3, [pc, #456]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a71      	ldr	r2, [pc, #452]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a6e      	ldr	r2, [pc, #440]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e00b      	b.n	8003654 <HAL_RCC_OscConfig+0xd4>
 800363c:	4b6b      	ldr	r3, [pc, #428]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a6a      	ldr	r2, [pc, #424]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a67      	ldr	r2, [pc, #412]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 800364e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003652:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d013      	beq.n	8003684 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fc80 	bl	8001f60 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003664:	f7fe fc7c 	bl	8001f60 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e200      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	4b5d      	ldr	r3, [pc, #372]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0xe4>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe fc6c 	bl	8001f60 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe fc68 	bl	8001f60 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	; 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e1ec      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x10c>
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d063      	beq.n	8003782 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ba:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d11c      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
 80036d2:	4b46      	ldr	r3, [pc, #280]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d116      	bne.n	800370c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036de:	4b43      	ldr	r3, [pc, #268]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e1c0      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4939      	ldr	r1, [pc, #228]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	e03a      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d020      	beq.n	8003756 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003714:	4b36      	ldr	r3, [pc, #216]	; (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fc21 	bl	8001f60 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7fe fc1d 	bl	8001f60 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1a1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4927      	ldr	r1, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
 8003754:	e015      	b.n	8003782 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x270>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fc00 	bl	8001f60 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003764:	f7fe fbfc 	bl	8001f60 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e180      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d03a      	beq.n	8003804 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d019      	beq.n	80037ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800379c:	f7fe fbe0 	bl	8001f60 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fe fbdc 	bl	8001f60 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e160      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <HAL_RCC_OscConfig+0x26c>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f000 fafe 	bl	8003dc4 <RCC_Delay>
 80037c8:	e01c      	b.n	8003804 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_RCC_OscConfig+0x274>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fbc6 	bl	8001f60 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d6:	e00f      	b.n	80037f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fe fbc2 	bl	8001f60 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d908      	bls.n	80037f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e146      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	42420000 	.word	0x42420000
 80037f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	4b92      	ldr	r3, [pc, #584]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e9      	bne.n	80037d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 80a6 	beq.w	800395e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4a87      	ldr	r2, [pc, #540]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	61d3      	str	r3, [r2, #28]
 800382e:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d118      	bne.n	800387c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7e      	ldr	r2, [pc, #504]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003856:	f7fe fb83 	bl	8001f60 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800385e:	f7fe fb7f 	bl	8001f60 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b64      	cmp	r3, #100	; 0x64
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e103      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x4c8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d106      	bne.n	8003892 <HAL_RCC_OscConfig+0x312>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	4a6e      	ldr	r2, [pc, #440]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6213      	str	r3, [r2, #32]
 8003890:	e02d      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10c      	bne.n	80038b4 <HAL_RCC_OscConfig+0x334>
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	f023 0301 	bic.w	r3, r3, #1
 80038a4:	6213      	str	r3, [r2, #32]
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a66      	ldr	r2, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	6213      	str	r3, [r2, #32]
 80038b2:	e01c      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_OscConfig+0x356>
 80038bc:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a60      	ldr	r2, [pc, #384]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	f043 0304 	orr.w	r3, r3, #4
 80038c6:	6213      	str	r3, [r2, #32]
 80038c8:	4b5e      	ldr	r3, [pc, #376]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a5d      	ldr	r2, [pc, #372]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6213      	str	r3, [r2, #32]
 80038d4:	e00b      	b.n	80038ee <HAL_RCC_OscConfig+0x36e>
 80038d6:	4b5b      	ldr	r3, [pc, #364]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6213      	str	r3, [r2, #32]
 80038e2:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a57      	ldr	r2, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d015      	beq.n	8003922 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe fb33 	bl	8001f60 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fe:	f7fe fb2f 	bl	8001f60 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0b1      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ee      	beq.n	80038fe <HAL_RCC_OscConfig+0x37e>
 8003920:	e014      	b.n	800394c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fe fb1d 	bl	8001f60 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fb19 	bl	8001f60 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e09b      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003940:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ee      	bne.n	800392a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003952:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d061      	beq.n	8003a38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d146      	bne.n	8003a0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe faed 	bl	8001f60 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe fae9 	bl	8001f60 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e06d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d108      	bne.n	80039c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039b2:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a19      	ldr	r1, [r3, #32]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	430b      	orrs	r3, r1
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe fabd 	bl	8001f60 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe fab9 	bl	8001f60 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03d      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x46a>
 8003a08:	e035      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RCC_OscConfig+0x4cc>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe faa6 	bl	8001f60 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe faa2 	bl	8001f60 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e026      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0x498>
 8003a36:	e01e      	b.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d107      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e019      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_OscConfig+0x500>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e0d0      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b6a      	ldr	r3, [pc, #424]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b67      	ldr	r3, [pc, #412]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4965      	ldr	r1, [pc, #404]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b8      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae0:	4b59      	ldr	r3, [pc, #356]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a58      	ldr	r2, [pc, #352]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a52      	ldr	r2, [pc, #328]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b04:	4b50      	ldr	r3, [pc, #320]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	494d      	ldr	r1, [pc, #308]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d040      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d115      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e07f      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d107      	bne.n	8003b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d109      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e073      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b52:	4b3d      	ldr	r3, [pc, #244]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06b      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f023 0203 	bic.w	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4936      	ldr	r1, [pc, #216]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b74:	f7fe f9f4 	bl	8001f60 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7c:	f7fe f9f0 	bl	8001f60 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e053      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b92:	4b2d      	ldr	r3, [pc, #180]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 020c 	and.w	r2, r3, #12
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1eb      	bne.n	8003b7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d210      	bcs.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4922      	ldr	r1, [pc, #136]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e032      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be0:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4916      	ldr	r1, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	490e      	ldr	r1, [pc, #56]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c12:	f000 f821 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	091b      	lsrs	r3, r3, #4
 8003c1e:	f003 030f 	and.w	r3, r3, #15
 8003c22:	490a      	ldr	r1, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	5ccb      	ldrb	r3, [r1, r3]
 8003c26:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1cc>)
 8003c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1d0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe f802 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08007de0 	.word	0x08007de0
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d002      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x30>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_GetSysClockFreq+0x36>
 8003c86:	e027      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8a:	613b      	str	r3, [r7, #16]
      break;
 8003c8c:	e027      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	0c9b      	lsrs	r3, r3, #18
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCC_GetSysClockFreq+0x94>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	0c5b      	lsrs	r3, r3, #17
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cba:	fb03 f202 	mul.w	r2, r3, r2
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e004      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ccc:	fb02 f303 	mul.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	613b      	str	r3, [r7, #16]
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cda:	613b      	str	r3, [r7, #16]
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	693b      	ldr	r3, [r7, #16]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	007a1200 	.word	0x007a1200
 8003cf4:	08007df8 	.word	0x08007df8
 8003cf8:	08007e08 	.word	0x08007e08
 8003cfc:	003d0900 	.word	0x003d0900

08003d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b02      	ldr	r3, [pc, #8]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	20000000 	.word	0x20000000

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d18:	f7ff fff2 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	08007df0 	.word	0x08007df0

08003d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d40:	f7ff ffde 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	0adb      	lsrs	r3, r3, #11
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4903      	ldr	r1, [pc, #12]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	08007df0 	.word	0x08007df0

08003d64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	220f      	movs	r2, #15
 8003d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_GetClockConfig+0x58>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_RCC_GetClockConfig+0x58>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_GetClockConfig+0x58>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_RCC_GetClockConfig+0x58>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	08db      	lsrs	r3, r3, #3
 8003d9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0207 	and.w	r2, r3, #7
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40022000 	.word	0x40022000

08003dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dcc:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <RCC_Delay+0x34>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <RCC_Delay+0x38>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	0a5b      	lsrs	r3, r3, #9
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003de0:	bf00      	nop
  }
  while (Delay --);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	60fa      	str	r2, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1f9      	bne.n	8003de0 <RCC_Delay+0x1c>
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	20000000 	.word	0x20000000
 8003dfc:	10624dd3 	.word	0x10624dd3

08003e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e041      	b.n	8003e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f839 	bl	8003e9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f000 f9b4 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d001      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e03a      	b.n	8003f3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <HAL_TIM_Base_Start_IT+0x98>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00e      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x58>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef2:	d009      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x58>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <HAL_TIM_Base_Start_IT+0x9c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0x58>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_TIM_Base_Start_IT+0xa0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d111      	bne.n	8003f2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d010      	beq.n	8003f3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	e007      	b.n	8003f3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0201 	orr.w	r2, r2, #1
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800

08003f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0202 	mvn.w	r2, #2
 8003f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8ed 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f8e0 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8ef 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d122      	bne.n	8004004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b04      	cmp	r3, #4
 8003fca:	d11b      	bne.n	8004004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0204 	mvn.w	r2, #4
 8003fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8c3 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8003ff0:	e005      	b.n	8003ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8b6 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f8c5 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b08      	cmp	r3, #8
 8004010:	d122      	bne.n	8004058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d11b      	bne.n	8004058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0208 	mvn.w	r2, #8
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2204      	movs	r2, #4
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f899 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f88c 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f89b 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b10      	cmp	r3, #16
 8004064:	d122      	bne.n	80040ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b10      	cmp	r3, #16
 8004072:	d11b      	bne.n	80040ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0210 	mvn.w	r2, #16
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2208      	movs	r2, #8
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f86f 	bl	8004176 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f862 	bl	8004164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f871 	bl	8004188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10e      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0201 	mvn.w	r2, #1
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd f972 	bl	80013bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	d10e      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f8bf 	bl	8004282 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d10e      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d107      	bne.n	8004130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f835 	bl	800419a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b20      	cmp	r3, #32
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0220 	mvn.w	r2, #32
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f88a 	bl	8004270 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a29      	ldr	r2, [pc, #164]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d007      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0xc0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00b      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fc:	d007      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <TIM_Base_SetConfig+0xbc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_Base_SetConfig+0xc0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d108      	bne.n	8004220 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <TIM_Base_SetConfig+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	40012c00 	.word	0x40012c00
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800

08004270 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e042      	b.n	800432c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fdb6 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f91d 	bl	8004518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800430c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d16d      	bne.n	8004430 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <HAL_UART_Transmit+0x2c>
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e066      	b.n	8004432 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2221      	movs	r2, #33	; 0x21
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004372:	f7fd fdf5 	bl	8001f60 <HAL_GetTick>
 8004376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	88fa      	ldrh	r2, [r7, #6]
 800437c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	88fa      	ldrh	r2, [r7, #6]
 8004382:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d108      	bne.n	80043a0 <HAL_UART_Transmit+0x6c>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d104      	bne.n	80043a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	e003      	b.n	80043a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043a8:	e02a      	b.n	8004400 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2180      	movs	r1, #128	; 0x80
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f840 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e036      	b.n	8004432 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	3302      	adds	r3, #2
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e007      	b.n	80043f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	3301      	adds	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1cf      	bne.n	80043aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2140      	movs	r1, #64	; 0x40
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f810 	bl	800443a <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e006      	b.n	8004432 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	e000      	b.n	8004432 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004430:	2302      	movs	r3, #2
  }
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b090      	sub	sp, #64	; 0x40
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	603b      	str	r3, [r7, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	e050      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d04c      	beq.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x30>
 800445a:	f7fd fd81 	bl	8001f60 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	429a      	cmp	r2, r3
 8004468:	d241      	bcs.n	80044ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800448a:	637a      	str	r2, [r7, #52]	; 0x34
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044be:	623a      	str	r2, [r7, #32]
 80044c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4013      	ands	r3, r2
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	bf0c      	ite	eq
 80044fe:	2301      	moveq	r3, #1
 8004500:	2300      	movne	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	429a      	cmp	r2, r3
 800450a:	d09f      	beq.n	800444c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3740      	adds	r7, #64	; 0x40
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004552:	f023 030c 	bic.w	r3, r3, #12
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	430b      	orrs	r3, r1
 800455e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <UART_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d103      	bne.n	8004588 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7ff fbdc 	bl	8003d3c <HAL_RCC_GetPCLK2Freq>
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	e002      	b.n	800458e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004588:	f7ff fbc4 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 800458c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <UART_SetConfig+0x118>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	0119      	lsls	r1, r3, #4
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009a      	lsls	r2, r3, #2
 80045b8:	441a      	add	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <UART_SetConfig+0x118>)
 80045c6:	fba3 0302 	umull	r0, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	2064      	movs	r0, #100	; 0x64
 80045ce:	fb00 f303 	mul.w	r3, r0, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	3332      	adds	r3, #50	; 0x32
 80045d8:	4a15      	ldr	r2, [pc, #84]	; (8004630 <UART_SetConfig+0x118>)
 80045da:	fba2 2303 	umull	r2, r3, r2, r3
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e4:	4419      	add	r1, r3
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009a      	lsls	r2, r3, #2
 80045f0:	441a      	add	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fc:	4b0c      	ldr	r3, [pc, #48]	; (8004630 <UART_SetConfig+0x118>)
 80045fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2064      	movs	r0, #100	; 0x64
 8004606:	fb00 f303 	mul.w	r3, r0, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	3332      	adds	r3, #50	; 0x32
 8004610:	4a07      	ldr	r2, [pc, #28]	; (8004630 <UART_SetConfig+0x118>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	440a      	add	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40013800 	.word	0x40013800
 8004630:	51eb851f 	.word	0x51eb851f

08004634 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463a:	f3ef 8305 	mrs	r3, IPSR
 800463e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004640:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10f      	bne.n	8004666 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	607b      	str	r3, [r7, #4]
  return(result);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <osKernelInitialize+0x32>
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <osKernelInitialize+0x60>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d109      	bne.n	800466e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800465a:	f3ef 8311 	mrs	r3, BASEPRI
 800465e:	603b      	str	r3, [r7, #0]
  return(result);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004666:	f06f 0305 	mvn.w	r3, #5
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e00c      	b.n	8004688 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <osKernelInitialize+0x60>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <osKernelInitialize+0x60>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e002      	b.n	8004688 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	20000394 	.word	0x20000394

08004698 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469e:	f3ef 8305 	mrs	r3, IPSR
 80046a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10f      	bne.n	80046ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046aa:	f3ef 8310 	mrs	r3, PRIMASK
 80046ae:	607b      	str	r3, [r7, #4]
  return(result);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <osKernelStart+0x32>
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <osKernelStart+0x64>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d109      	bne.n	80046d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046be:	f3ef 8311 	mrs	r3, BASEPRI
 80046c2:	603b      	str	r3, [r7, #0]
  return(result);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80046ca:	f06f 0305 	mvn.w	r3, #5
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e00e      	b.n	80046f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <osKernelStart+0x64>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d107      	bne.n	80046ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80046da:	4b08      	ldr	r3, [pc, #32]	; (80046fc <osKernelStart+0x64>)
 80046dc:	2202      	movs	r2, #2
 80046de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80046e0:	f001 fcf4 	bl	80060cc <vTaskStartScheduler>
      stat = osOK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	e002      	b.n	80046f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000394 	.word	0x20000394

08004700 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b092      	sub	sp, #72	; 0x48
 8004704:	af04      	add	r7, sp, #16
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004710:	f3ef 8305 	mrs	r3, IPSR
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 8094 	bne.w	8004846 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471e:	f3ef 8310 	mrs	r3, PRIMASK
 8004722:	623b      	str	r3, [r7, #32]
  return(result);
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 808d 	bne.w	8004846 <osThreadNew+0x146>
 800472c:	4b48      	ldr	r3, [pc, #288]	; (8004850 <osThreadNew+0x150>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d106      	bne.n	8004742 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004734:	f3ef 8311 	mrs	r3, BASEPRI
 8004738:	61fb      	str	r3, [r7, #28]
  return(result);
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f040 8082 	bne.w	8004846 <osThreadNew+0x146>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d07e      	beq.n	8004846 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800474c:	2318      	movs	r3, #24
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004750:	2300      	movs	r3, #0
 8004752:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004754:	f107 031b 	add.w	r3, r7, #27
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d045      	beq.n	80047f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <osThreadNew+0x74>
        name = attr->name;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <osThreadNew+0x9a>
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b38      	cmp	r3, #56	; 0x38
 800478c:	d805      	bhi.n	800479a <osThreadNew+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <osThreadNew+0x9e>
        return (NULL);
 800479a:	2300      	movs	r3, #0
 800479c:	e054      	b.n	8004848 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <osThreadNew+0xd4>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2bbb      	cmp	r3, #187	; 0xbb
 80047bc:	d90a      	bls.n	80047d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d006      	beq.n	80047d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <osThreadNew+0xd4>
        mem = 1;
 80047ce:	2301      	movs	r3, #1
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d2:	e010      	b.n	80047f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10c      	bne.n	80047f6 <osThreadNew+0xf6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d108      	bne.n	80047f6 <osThreadNew+0xf6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <osThreadNew+0xf6>
          mem = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f0:	e001      	b.n	80047f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d110      	bne.n	800481e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004804:	9202      	str	r2, [sp, #8]
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f001 fa76 	bl	8005d04 <xTaskCreateStatic>
 8004818:	4603      	mov	r3, r0
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e013      	b.n	8004846 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	d110      	bne.n	8004846 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	b29a      	uxth	r2, r3
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 fac0 	bl	8005dbc <xTaskCreate>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <osThreadNew+0x146>
          hTask = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004846:	697b      	ldr	r3, [r7, #20]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3738      	adds	r7, #56	; 0x38
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000394 	.word	0x20000394

08004854 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800485c:	f3ef 8305 	mrs	r3, IPSR
 8004860:	613b      	str	r3, [r7, #16]
  return(result);
 8004862:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10f      	bne.n	8004888 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004868:	f3ef 8310 	mrs	r3, PRIMASK
 800486c:	60fb      	str	r3, [r7, #12]
  return(result);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <osDelay+0x34>
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <osDelay+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d109      	bne.n	8004890 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800487c:	f3ef 8311 	mrs	r3, BASEPRI
 8004880:	60bb      	str	r3, [r7, #8]
  return(result);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <osDelay+0x3c>
    stat = osErrorISR;
 8004888:	f06f 0305 	mvn.w	r3, #5
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e007      	b.n	80048a0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 fbe2 	bl	8006064 <vTaskDelay>
    }
  }

  return (stat);
 80048a0:	697b      	ldr	r3, [r7, #20]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000394 	.word	0x20000394

080048b0 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f002 fceb 	bl	8007294 <pvTimerGetTimerID>
 80048be:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <TimerCallback+0x22>
    callb->func (callb->arg);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6852      	ldr	r2, [r2, #4]
 80048ce:	4610      	mov	r0, r2
 80048d0:	4798      	blx	r3
  }
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08e      	sub	sp, #56	; 0x38
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	460b      	mov	r3, r1
 80048ea:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f0:	f3ef 8305 	mrs	r3, IPSR
 80048f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80048f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d16a      	bne.n	80049d2 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004900:	617b      	str	r3, [r7, #20]
  return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d164      	bne.n	80049d2 <osTimerNew+0xf6>
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <osTimerNew+0x100>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d105      	bne.n	800491c <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004910:	f3ef 8311 	mrs	r3, BASEPRI
 8004914:	613b      	str	r3, [r7, #16]
  return(result);
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d15a      	bne.n	80049d2 <osTimerNew+0xf6>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d057      	beq.n	80049d2 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004922:	2008      	movs	r0, #8
 8004924:	f000 f890 	bl	8004a48 <pvPortMalloc>
 8004928:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d050      	beq.n	80049d2 <osTimerNew+0xf6>
      callb->func = func;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800493c:	7afb      	ldrb	r3, [r7, #11]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <osTimerNew+0x6c>
        reload = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	e001      	b.n	800494c <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01c      	beq.n	8004996 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <osTimerNew+0x8e>
          name = attr->name;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <osTimerNew+0xa4>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2b2f      	cmp	r3, #47	; 0x2f
 8004978:	d902      	bls.n	8004980 <osTimerNew+0xa4>
          mem = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	e00c      	b.n	800499a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d108      	bne.n	800499a <osTimerNew+0xbe>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <osTimerNew+0xbe>
            mem = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	e001      	b.n	800499a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10c      	bne.n	80049ba <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <osTimerNew+0x104>)
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ae:	2101      	movs	r1, #1
 80049b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049b2:	f002 f936 	bl	8006c22 <xTimerCreateStatic>
 80049b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80049b8:	e00b      	b.n	80049d2 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d108      	bne.n	80049d2 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <osTimerNew+0x104>)
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	2101      	movs	r1, #1
 80049ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049cc:	f002 f908 	bl	8006be0 <xTimerCreate>
 80049d0:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3730      	adds	r7, #48	; 0x30
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000394 	.word	0x20000394
 80049e0:	080048b1 	.word	0x080048b1

080049e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a06      	ldr	r2, [pc, #24]	; (8004a0c <vApplicationGetIdleTaskMemory+0x28>)
 80049f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80049fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2280      	movs	r2, #128	; 0x80
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000398 	.word	0x20000398
 8004a10:	20000454 	.word	0x20000454

08004a14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <vApplicationGetTimerTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a32:	601a      	str	r2, [r3, #0]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000654 	.word	0x20000654
 8004a44:	20000710 	.word	0x20000710

08004a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a54:	f001 fbaa 	bl	80061ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a58:	4b58      	ldr	r3, [pc, #352]	; (8004bbc <pvPortMalloc+0x174>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a60:	f000 f910 	bl	8004c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a64:	4b56      	ldr	r3, [pc, #344]	; (8004bc0 <pvPortMalloc+0x178>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 808e 	bne.w	8004b8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	3308      	adds	r3, #8
 8004a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d069      	beq.n	8004b8e <pvPortMalloc+0x146>
 8004aba:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <pvPortMalloc+0x17c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d864      	bhi.n	8004b8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ac4:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <pvPortMalloc+0x180>)
 8004ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <pvPortMalloc+0x180>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ace:	e004      	b.n	8004ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d903      	bls.n	8004aec <pvPortMalloc+0xa4>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f1      	bne.n	8004ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <pvPortMalloc+0x174>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d04b      	beq.n	8004b8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2208      	movs	r2, #8
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	2308      	movs	r3, #8
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d91f      	bls.n	8004b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <pvPortMalloc+0xf8>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	613b      	str	r3, [r7, #16]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b52:	69b8      	ldr	r0, [r7, #24]
 8004b54:	f000 f8f8 	bl	8004d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <pvPortMalloc+0x17c>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <pvPortMalloc+0x17c>)
 8004b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b66:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <pvPortMalloc+0x17c>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <pvPortMalloc+0x184>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d203      	bcs.n	8004b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <pvPortMalloc+0x17c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <pvPortMalloc+0x184>)
 8004b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <pvPortMalloc+0x178>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b8e:	f001 fb1b 	bl	80061c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <pvPortMalloc+0x16a>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	60fb      	str	r3, [r7, #12]
}
 8004bae:	bf00      	nop
 8004bb0:	e7fe      	b.n	8004bb0 <pvPortMalloc+0x168>
	return pvReturn;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3728      	adds	r7, #40	; 0x28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20001718 	.word	0x20001718
 8004bc0:	20001724 	.word	0x20001724
 8004bc4:	2000171c 	.word	0x2000171c
 8004bc8:	20001710 	.word	0x20001710
 8004bcc:	20001720 	.word	0x20001720

08004bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d048      	beq.n	8004c74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004be2:	2308      	movs	r3, #8
 8004be4:	425b      	negs	r3, r3
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <vPortFree+0xac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <vPortFree+0x44>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60fb      	str	r3, [r7, #12]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <vPortFree+0x62>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60bb      	str	r3, [r7, #8]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <vPortFree+0xac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d019      	beq.n	8004c74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d115      	bne.n	8004c74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <vPortFree+0xac>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c58:	f001 faa8 	bl	80061ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <vPortFree+0xb0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <vPortFree+0xb0>)
 8004c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 f86c 	bl	8004d48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c70:	f001 faaa 	bl	80061c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20001724 	.word	0x20001724
 8004c80:	2000171c 	.word	0x2000171c

08004c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <prvHeapInit+0xac>)
 8004c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <prvHeapInit+0xac>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <prvHeapInit+0xb0>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <prvHeapInit+0xb0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <prvHeapInit+0xb4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <prvHeapInit+0xb4>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <prvHeapInit+0xb8>)
 8004d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <prvHeapInit+0xbc>)
 8004d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvHeapInit+0xc0>)
 8004d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000b10 	.word	0x20000b10
 8004d34:	20001710 	.word	0x20001710
 8004d38:	20001718 	.word	0x20001718
 8004d3c:	20001720 	.word	0x20001720
 8004d40:	2000171c 	.word	0x2000171c
 8004d44:	20001724 	.word	0x20001724

08004d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <prvInsertBlockIntoFreeList+0xa8>)
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <prvInsertBlockIntoFreeList+0x14>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d8f7      	bhi.n	8004d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d108      	bne.n	8004d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	441a      	add	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d118      	bne.n	8004dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <prvInsertBlockIntoFreeList+0xac>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d00d      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e008      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <prvInsertBlockIntoFreeList+0xac>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e003      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d002      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	20001710 	.word	0x20001710
 8004df4:	20001718 	.word	0x20001718

08004df8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f103 0208 	add.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f103 0208 	add.w	r2, r3, #8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f103 0208 	add.w	r2, r3, #8
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr

08004e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e00c      	b.n	8004ece <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	e002      	b.n	8004ec2 <vListInsert+0x2e>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d2f6      	bcs.n	8004ebc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6892      	ldr	r2, [r2, #8]
 8004f1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6852      	ldr	r2, [r2, #4]
 8004f24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d103      	bne.n	8004f38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	1e5a      	subs	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
	...

08004f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b04      	subs	r3, #4
 8004f68:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b04      	subs	r3, #4
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f023 0201 	bic.w	r2, r3, #1
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f88:	4a08      	ldr	r2, [pc, #32]	; (8004fac <pxPortInitialiseStack+0x54>)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b14      	subs	r3, #20
 8004f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3b20      	subs	r3, #32
 8004f9e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	08004fb1 	.word	0x08004fb1

08004fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <prvTaskExitError+0x54>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d00a      	beq.n	8004fda <prvTaskExitError+0x2a>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60fb      	str	r3, [r7, #12]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <prvTaskExitError+0x28>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60bb      	str	r3, [r7, #8]
}
 8004fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fee:	bf00      	nop
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0fc      	beq.n	8004ff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
	...

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	f04e 0e0d 	orr.w	lr, lr, #13
 800502e:	4770      	bx	lr

08005030 <pxCurrentTCBConst2>:
 8005030:	20001770 	.word	0x20001770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005038:	4806      	ldr	r0, [pc, #24]	; (8005054 <prvPortStartFirstTask+0x1c>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	b662      	cpsie	i
 8005044:	b661      	cpsie	f
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	df00      	svc	0
 8005050:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005052:	bf00      	nop
 8005054:	e000ed08 	.word	0xe000ed08

08005058 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800505e:	4b32      	ldr	r3, [pc, #200]	; (8005128 <xPortStartScheduler+0xd0>)
 8005060:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4b2a      	ldr	r3, [pc, #168]	; (800512c <xPortStartScheduler+0xd4>)
 8005084:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005086:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <xPortStartScheduler+0xd8>)
 8005088:	2207      	movs	r2, #7
 800508a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508c:	e009      	b.n	80050a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800508e:	4b28      	ldr	r3, [pc, #160]	; (8005130 <xPortStartScheduler+0xd8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3b01      	subs	r3, #1
 8005094:	4a26      	ldr	r2, [pc, #152]	; (8005130 <xPortStartScheduler+0xd8>)
 8005096:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b80      	cmp	r3, #128	; 0x80
 80050ac:	d0ef      	beq.n	800508e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ae:	4b20      	ldr	r3, [pc, #128]	; (8005130 <xPortStartScheduler+0xd8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1c3 0307 	rsb	r3, r3, #7
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d00a      	beq.n	80050d0 <xPortStartScheduler+0x78>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60bb      	str	r3, [r7, #8]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050d0:	4b17      	ldr	r3, [pc, #92]	; (8005130 <xPortStartScheduler+0xd8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <xPortStartScheduler+0xd8>)
 80050d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050da:	4b15      	ldr	r3, [pc, #84]	; (8005130 <xPortStartScheduler+0xd8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e2:	4a13      	ldr	r2, [pc, #76]	; (8005130 <xPortStartScheduler+0xd8>)
 80050e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050ee:	4b11      	ldr	r3, [pc, #68]	; (8005134 <xPortStartScheduler+0xdc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <xPortStartScheduler+0xdc>)
 80050f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <xPortStartScheduler+0xdc>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a0d      	ldr	r2, [pc, #52]	; (8005134 <xPortStartScheduler+0xdc>)
 8005100:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005104:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005106:	f000 f8b9 	bl	800527c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <xPortStartScheduler+0xe0>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005110:	f7ff ff92 	bl	8005038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005114:	f001 f9c2 	bl	800649c <vTaskSwitchContext>
	prvTaskExitError();
 8005118:	f7ff ff4a 	bl	8004fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	e000e400 	.word	0xe000e400
 800512c:	20001728 	.word	0x20001728
 8005130:	2000172c 	.word	0x2000172c
 8005134:	e000ed20 	.word	0xe000ed20
 8005138:	2000000c 	.word	0x2000000c

0800513c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	607b      	str	r3, [r7, #4]
}
 8005154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <vPortEnterCritical+0x58>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <vPortEnterCritical+0x58>)
 800515e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <vPortEnterCritical+0x58>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d10f      	bne.n	8005188 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <vPortEnterCritical+0x5c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <vPortEnterCritical+0x4c>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	603b      	str	r3, [r7, #0]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vPortEnterCritical+0x4a>
	}
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	bc80      	pop	{r7}
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	2000000c 	.word	0x2000000c
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <vPortExitCritical+0x4c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <vPortExitCritical+0x24>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
 80051be:	e7fe      	b.n	80051be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <vPortExitCritical+0x4c>)
 80051c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <vPortExitCritical+0x4c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <vPortExitCritical+0x42>
 80051d2:	2300      	movs	r3, #0
 80051d4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	2000000c 	.word	0x2000000c
 80051ec:	00000000 	.word	0x00000000

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005200:	6010      	str	r0, [r2, #0]
 8005202:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005206:	f04f 0050 	mov.w	r0, #80	; 0x50
 800520a:	f380 8811 	msr	BASEPRI, r0
 800520e:	f001 f945 	bl	800649c <vTaskSwitchContext>
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8811 	msr	BASEPRI, r0
 800521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	6808      	ldr	r0, [r1, #0]
 8005222:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005226:	f380 8809 	msr	PSP, r0
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	4770      	bx	lr

08005230 <pxCurrentTCBConst>:
 8005230:	20001770 	.word	0x20001770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005252:	f001 f865 	bl	8006320 <xTaskIncrementTick>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <SysTick_Handler+0x40>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <vPortSetupTimerInterrupt+0x30>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005286:	4b0a      	ldr	r3, [pc, #40]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <vPortSetupTimerInterrupt+0x38>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <vPortSetupTimerInterrupt+0x3c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <vPortSetupTimerInterrupt+0x40>)
 800529a:	3b01      	subs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <vPortSetupTimerInterrupt+0x30>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	e000e010 	.word	0xe000e010
 80052b0:	e000e018 	.word	0xe000e018
 80052b4:	20000000 	.word	0x20000000
 80052b8:	10624dd3 	.word	0x10624dd3
 80052bc:	e000e014 	.word	0xe000e014

080052c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052c6:	f3ef 8305 	mrs	r3, IPSR
 80052ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d914      	bls.n	80052fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <vPortValidateInterruptPriority+0x6c>)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <vPortValidateInterruptPriority+0x70>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	7afa      	ldrb	r2, [r7, #11]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d20a      	bcs.n	80052fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	607b      	str	r3, [r7, #4]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <vPortValidateInterruptPriority+0x74>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <vPortValidateInterruptPriority+0x78>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d90a      	bls.n	8005322 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	603b      	str	r3, [r7, #0]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <vPortValidateInterruptPriority+0x60>
	}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	e000e3f0 	.word	0xe000e3f0
 8005330:	20001728 	.word	0x20001728
 8005334:	e000ed0c 	.word	0xe000ed0c
 8005338:	2000172c 	.word	0x2000172c

0800533c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <xQueueGenericReset+0x2a>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60bb      	str	r3, [r7, #8]
}
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005366:	f7ff fee9 	bl	800513c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	3b01      	subs	r3, #1
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	441a      	add	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	22ff      	movs	r2, #255	; 0xff
 80053aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d114      	bne.n	80053e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01a      	beq.n	80053fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3310      	adds	r3, #16
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f91b 	bl	8006604 <xTaskRemoveFromEventList>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <xQueueGenericReset+0xcc>)
 80053d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	e009      	b.n	80053fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3310      	adds	r3, #16
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff fd04 	bl	8004df8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3324      	adds	r3, #36	; 0x24
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fcff 	bl	8004df8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053fa:	f7ff fecf 	bl	800519c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053fe:	2301      	movs	r3, #1
}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <xQueueGenericCreateStatic+0x52>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <xQueueGenericCreateStatic+0x56>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericCreateStatic+0x58>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d102      	bne.n	800548a <xQueueGenericCreateStatic+0x7e>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <xQueueGenericCreateStatic+0x82>
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <xQueueGenericCreateStatic+0x84>
 800548e:	2300      	movs	r3, #0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	61fb      	str	r3, [r7, #28]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054aa:	2350      	movs	r3, #80	; 0x50
 80054ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b50      	cmp	r3, #80	; 0x50
 80054b2:	d00a      	beq.n	80054ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	61bb      	str	r3, [r7, #24]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00d      	beq.n	80054f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4613      	mov	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f805 	bl	80054fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3730      	adds	r7, #48	; 0x30
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e002      	b.n	800551c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005528:	2101      	movs	r1, #1
 800552a:	69b8      	ldr	r0, [r7, #24]
 800552c:	f7ff ff06 	bl	800533c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800554e:	2300      	movs	r3, #0
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xQueueGenericSend+0x32>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d103      	bne.n	8005580 <xQueueGenericSend+0x40>
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <xQueueGenericSend+0x44>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <xQueueGenericSend+0x46>
 8005584:	2300      	movs	r3, #0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <xQueueGenericSend+0x60>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800559c:	bf00      	nop
 800559e:	e7fe      	b.n	800559e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d103      	bne.n	80055ae <xQueueGenericSend+0x6e>
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <xQueueGenericSend+0x72>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <xQueueGenericSend+0x74>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <xQueueGenericSend+0x8e>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	623b      	str	r3, [r7, #32]
}
 80055ca:	bf00      	nop
 80055cc:	e7fe      	b.n	80055cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ce:	f001 f9df 	bl	8006990 <xTaskGetSchedulerState>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <xQueueGenericSend+0x9e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <xQueueGenericSend+0xa2>
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <xQueueGenericSend+0xa4>
 80055e2:	2300      	movs	r3, #0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <xQueueGenericSend+0xbe>
	__asm volatile
 80055e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ec:	f383 8811 	msr	BASEPRI, r3
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	f3bf 8f4f 	dsb	sy
 80055f8:	61fb      	str	r3, [r7, #28]
}
 80055fa:	bf00      	nop
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055fe:	f7ff fd9d 	bl	800513c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <xQueueGenericSend+0xd4>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d129      	bne.n	8005668 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561a:	f000 fa07 	bl	8005a2c <prvCopyDataToQueue>
 800561e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b00      	cmp	r3, #0
 8005626:	d010      	beq.n	800564a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	3324      	adds	r3, #36	; 0x24
 800562c:	4618      	mov	r0, r3
 800562e:	f000 ffe9 	bl	8006604 <xTaskRemoveFromEventList>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d013      	beq.n	8005660 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005638:	4b3f      	ldr	r3, [pc, #252]	; (8005738 <xQueueGenericSend+0x1f8>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	e00a      	b.n	8005660 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005650:	4b39      	ldr	r3, [pc, #228]	; (8005738 <xQueueGenericSend+0x1f8>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005660:	f7ff fd9c 	bl	800519c <vPortExitCritical>
				return pdPASS;
 8005664:	2301      	movs	r3, #1
 8005666:	e063      	b.n	8005730 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800566e:	f7ff fd95 	bl	800519c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005672:	2300      	movs	r3, #0
 8005674:	e05c      	b.n	8005730 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	4618      	mov	r0, r3
 8005682:	f001 f823 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005686:	2301      	movs	r3, #1
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800568a:	f7ff fd87 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800568e:	f000 fd8d 	bl	80061ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005692:	f7ff fd53 	bl	800513c <vPortEnterCritical>
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d103      	bne.n	80056ac <xQueueGenericSend+0x16c>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d103      	bne.n	80056c2 <xQueueGenericSend+0x182>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c2:	f7ff fd6b 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056c6:	1d3a      	adds	r2, r7, #4
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	4611      	mov	r1, r2
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 f812 	bl	80066f8 <xTaskCheckForTimeOut>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d124      	bne.n	8005724 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056dc:	f000 fa9e 	bl	8005c1c <prvIsQueueFull>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	3310      	adds	r3, #16
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4611      	mov	r1, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 ff38 	bl	8006564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f6:	f000 fa29 	bl	8005b4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056fa:	f000 fd65 	bl	80061c8 <xTaskResumeAll>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f af7c 	bne.w	80055fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <xQueueGenericSend+0x1f8>)
 8005708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	e772      	b.n	80055fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571a:	f000 fa17 	bl	8005b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800571e:	f000 fd53 	bl	80061c8 <xTaskResumeAll>
 8005722:	e76c      	b.n	80055fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005726:	f000 fa11 	bl	8005b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800572a:	f000 fd4d 	bl	80061c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800572e:	2300      	movs	r3, #0
		}
	}
}
 8005730:	4618      	mov	r0, r3
 8005732:	3738      	adds	r7, #56	; 0x38
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08e      	sub	sp, #56	; 0x38
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <xQueueGenericSendFromISR+0x3c>
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <xQueueGenericSendFromISR+0x40>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <xQueueGenericSendFromISR+0x42>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	623b      	str	r3, [r7, #32]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b02      	cmp	r3, #2
 800579c:	d103      	bne.n	80057a6 <xQueueGenericSendFromISR+0x6a>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <xQueueGenericSendFromISR+0x6e>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <xQueueGenericSendFromISR+0x70>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61fb      	str	r3, [r7, #28]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057c6:	f7ff fd7b 	bl	80052c0 <vPortValidateInterruptPriority>
	__asm volatile
 80057ca:	f3ef 8211 	mrs	r2, BASEPRI
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	61ba      	str	r2, [r7, #24]
 80057e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80057e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <xQueueGenericSendFromISR+0xbc>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d12c      	bne.n	8005852 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005808:	f000 f910 	bl	8005a2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800580c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d112      	bne.n	800583c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	3324      	adds	r3, #36	; 0x24
 8005822:	4618      	mov	r0, r3
 8005824:	f000 feee 	bl	8006604 <xTaskRemoveFromEventList>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e007      	b.n	800584c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800583c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005840:	3301      	adds	r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	b25a      	sxtb	r2, r3
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005850:	e001      	b.n	8005856 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	613b      	str	r3, [r7, #16]
	__asm volatile
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f383 8811 	msr	BASEPRI, r3
}
 8005860:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005864:	4618      	mov	r0, r3
 8005866:	3738      	adds	r7, #56	; 0x38
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	; 0x30
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <xQueueReceive+0x30>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	623b      	str	r3, [r7, #32]
}
 8005898:	bf00      	nop
 800589a:	e7fe      	b.n	800589a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d103      	bne.n	80058aa <xQueueReceive+0x3e>
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <xQueueReceive+0x42>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <xQueueReceive+0x44>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10a      	bne.n	80058ca <xQueueReceive+0x5e>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61fb      	str	r3, [r7, #28]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058ca:	f001 f861 	bl	8006990 <xTaskGetSchedulerState>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d102      	bne.n	80058da <xQueueReceive+0x6e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <xQueueReceive+0x72>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <xQueueReceive+0x74>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xQueueReceive+0x8e>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	61bb      	str	r3, [r7, #24]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058fa:	f7ff fc1f 	bl	800513c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d01f      	beq.n	800594a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590e:	f000 f8f7 	bl	8005b00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	1e5a      	subs	r2, r3, #1
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00f      	beq.n	8005942 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	3310      	adds	r3, #16
 8005926:	4618      	mov	r0, r3
 8005928:	f000 fe6c 	bl	8006604 <xTaskRemoveFromEventList>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005932:	4b3d      	ldr	r3, [pc, #244]	; (8005a28 <xQueueReceive+0x1bc>)
 8005934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005942:	f7ff fc2b 	bl	800519c <vPortExitCritical>
				return pdPASS;
 8005946:	2301      	movs	r3, #1
 8005948:	e069      	b.n	8005a1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d103      	bne.n	8005958 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005950:	f7ff fc24 	bl	800519c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005954:	2300      	movs	r3, #0
 8005956:	e062      	b.n	8005a1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800595e:	f107 0310 	add.w	r3, r7, #16
 8005962:	4618      	mov	r0, r3
 8005964:	f000 feb2 	bl	80066cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800596c:	f7ff fc16 	bl	800519c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005970:	f000 fc1c 	bl	80061ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005974:	f7ff fbe2 	bl	800513c <vPortEnterCritical>
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800597e:	b25b      	sxtb	r3, r3
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d103      	bne.n	800598e <xQueueReceive+0x122>
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005994:	b25b      	sxtb	r3, r3
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d103      	bne.n	80059a4 <xQueueReceive+0x138>
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059a4:	f7ff fbfa 	bl	800519c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a8:	1d3a      	adds	r2, r7, #4
 80059aa:	f107 0310 	add.w	r3, r7, #16
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fea1 	bl	80066f8 <xTaskCheckForTimeOut>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d123      	bne.n	8005a04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059be:	f000 f917 	bl	8005bf0 <prvIsQueueEmpty>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fdc7 	bl	8006564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059d8:	f000 f8b8 	bl	8005b4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059dc:	f000 fbf4 	bl	80061c8 <xTaskResumeAll>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d189      	bne.n	80058fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <xQueueReceive+0x1bc>)
 80059e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	e780      	b.n	80058fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80059f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fa:	f000 f8a7 	bl	8005b4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059fe:	f000 fbe3 	bl	80061c8 <xTaskResumeAll>
 8005a02:	e77a      	b.n	80058fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a06:	f000 f8a1 	bl	8005b4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a0a:	f000 fbdd 	bl	80061c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a10:	f000 f8ee 	bl	8005bf0 <prvIsQueueEmpty>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f43f af6f 	beq.w	80058fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3730      	adds	r7, #48	; 0x30
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	e000ed04 	.word	0xe000ed04

08005a2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10d      	bne.n	8005a66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d14d      	bne.n	8005aee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 ffb8 	bl	80069cc <xTaskPriorityDisinherit>
 8005a5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	e043      	b.n	8005aee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d119      	bne.n	8005aa0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6898      	ldr	r0, [r3, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	461a      	mov	r2, r3
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	f001 fc58 	bl	800732c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d32b      	bcc.n	8005aee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	609a      	str	r2, [r3, #8]
 8005a9e:	e026      	b.n	8005aee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	68d8      	ldr	r0, [r3, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	f001 fc3e 	bl	800732c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	425b      	negs	r3, r3
 8005aba:	441a      	add	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68da      	ldr	r2, [r3, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d207      	bcs.n	8005adc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	425b      	negs	r3, r3
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d105      	bne.n	8005aee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005af6:	697b      	ldr	r3, [r7, #20]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d303      	bcc.n	8005b34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68d9      	ldr	r1, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6838      	ldr	r0, [r7, #0]
 8005b40:	f001 fbf4 	bl	800732c <memcpy>
	}
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b54:	f7ff faf2 	bl	800513c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b60:	e011      	b.n	8005b86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d012      	beq.n	8005b90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd48 	bl	8006604 <xTaskRemoveFromEventList>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b7a:	f000 fe1f 	bl	80067bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dce9      	bgt.n	8005b62 <prvUnlockQueue+0x16>
 8005b8e:	e000      	b.n	8005b92 <prvUnlockQueue+0x46>
					break;
 8005b90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	22ff      	movs	r2, #255	; 0xff
 8005b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b9a:	f7ff faff 	bl	800519c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b9e:	f7ff facd 	bl	800513c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005baa:	e011      	b.n	8005bd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fd23 	bl	8006604 <xTaskRemoveFromEventList>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bc4:	f000 fdfa 	bl	80067bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bc8:	7bbb      	ldrb	r3, [r7, #14]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dce9      	bgt.n	8005bac <prvUnlockQueue+0x60>
 8005bd8:	e000      	b.n	8005bdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005be4:	f7ff fada 	bl	800519c <vPortExitCritical>
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf8:	f7ff faa0 	bl	800513c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e001      	b.n	8005c0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c0e:	f7ff fac5 	bl	800519c <vPortExitCritical>

	return xReturn;
 8005c12:	68fb      	ldr	r3, [r7, #12]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c24:	f7ff fa8a 	bl	800513c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d102      	bne.n	8005c3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	e001      	b.n	8005c3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c3e:	f7ff faad 	bl	800519c <vPortExitCritical>

	return xReturn;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e014      	b.n	8005c86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c5c:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c68:	490b      	ldr	r1, [pc, #44]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <vQueueAddToRegistry+0x4c>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c7e:	e006      	b.n	8005c8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d9e7      	bls.n	8005c5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	20001730 	.word	0x20001730

08005c9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005cac:	f7ff fa46 	bl	800513c <vPortEnterCritical>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cb6:	b25b      	sxtb	r3, r3
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d103      	bne.n	8005cc6 <vQueueWaitForMessageRestricted+0x2a>
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ccc:	b25b      	sxtb	r3, r3
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d103      	bne.n	8005cdc <vQueueWaitForMessageRestricted+0x40>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cdc:	f7ff fa5e 	bl	800519c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	3324      	adds	r3, #36	; 0x24
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fc5b 	bl	80065ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff28 	bl	8005b4c <prvUnlockQueue>
	}
 8005cfc:	bf00      	nop
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08e      	sub	sp, #56	; 0x38
 8005d08:	af04      	add	r7, sp, #16
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	61fb      	str	r3, [r7, #28]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d4a:	23bc      	movs	r3, #188	; 0xbc
 8005d4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2bbc      	cmp	r3, #188	; 0xbc
 8005d52:	d00a      	beq.n	8005d6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	61bb      	str	r3, [r7, #24]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01e      	beq.n	8005dae <xTaskCreateStatic+0xaa>
 8005d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d01b      	beq.n	8005dae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9303      	str	r3, [sp, #12]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	f107 0314 	add.w	r3, r7, #20
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 f851 	bl	8005e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005da6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005da8:	f000 f8ec 	bl	8005f84 <prvAddNewTaskToReadyList>
 8005dac:	e001      	b.n	8005db2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005db2:	697b      	ldr	r3, [r7, #20]
	}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	; 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af04      	add	r7, sp, #16
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	603b      	str	r3, [r7, #0]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7fe fe39 	bl	8004a48 <pvPortMalloc>
 8005dd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00e      	beq.n	8005dfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005dde:	20bc      	movs	r0, #188	; 0xbc
 8005de0:	f7fe fe32 	bl	8004a48 <pvPortMalloc>
 8005de4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
 8005df2:	e005      	b.n	8005e00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005df4:	6978      	ldr	r0, [r7, #20]
 8005df6:	f7fe feeb 	bl	8004bd0 <vPortFree>
 8005dfa:	e001      	b.n	8005e00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	2300      	movs	r3, #0
 8005e12:	9303      	str	r3, [sp, #12]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	9302      	str	r3, [sp, #8]
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	9301      	str	r3, [sp, #4]
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f80f 	bl	8005e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e2a:	69f8      	ldr	r0, [r7, #28]
 8005e2c:	f000 f8aa 	bl	8005f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e30:	2301      	movs	r3, #1
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e002      	b.n	8005e3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	461a      	mov	r2, r3
 8005e60:	21a5      	movs	r1, #165	; 0xa5
 8005e62:	f001 fa71 	bl	8007348 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	3b01      	subs	r3, #1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f023 0307 	bic.w	r3, r3, #7
 8005e7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	617b      	str	r3, [r7, #20]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e012      	b.n	8005ecc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	7819      	ldrb	r1, [r3, #0]
 8005eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3334      	adds	r3, #52	; 0x34
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d006      	beq.n	8005ed4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	2b0f      	cmp	r3, #15
 8005ed0:	d9e9      	bls.n	8005ea6 <prvInitialiseNewTask+0x5e>
 8005ed2:	e000      	b.n	8005ed6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005ed4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee0:	2b37      	cmp	r3, #55	; 0x37
 8005ee2:	d901      	bls.n	8005ee8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ee4:	2337      	movs	r3, #55	; 0x37
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe ff99 	bl	8004e36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	3318      	adds	r3, #24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe ff94 	bl	8004e36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	3354      	adds	r3, #84	; 0x54
 8005f38:	2260      	movs	r2, #96	; 0x60
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 fa03 	bl	8007348 <memset>
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <prvInitialiseNewTask+0x130>)
 8005f46:	659a      	str	r2, [r3, #88]	; 0x58
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	4a0c      	ldr	r2, [pc, #48]	; (8005f7c <prvInitialiseNewTask+0x134>)
 8005f4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f50:	4a0b      	ldr	r2, [pc, #44]	; (8005f80 <prvInitialiseNewTask+0x138>)
 8005f52:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	69b8      	ldr	r0, [r7, #24]
 8005f5a:	f7fe fffd 	bl	8004f58 <pxPortInitialiseStack>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f70:	bf00      	nop
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	08007e2c 	.word	0x08007e2c
 8005f7c:	08007e4c 	.word	0x08007e4c
 8005f80:	08007e0c 	.word	0x08007e0c

08005f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f8c:	f7ff f8d6 	bl	800513c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f90:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <prvAddNewTaskToReadyList+0xc4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	4a2c      	ldr	r2, [pc, #176]	; (8006048 <prvAddNewTaskToReadyList+0xc4>)
 8005f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fa8:	4b27      	ldr	r3, [pc, #156]	; (8006048 <prvAddNewTaskToReadyList+0xc4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d110      	bne.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fb0:	f000 fc28 	bl	8006804 <prvInitialiseTaskLists>
 8005fb4:	e00d      	b.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fb6:	4b26      	ldr	r3, [pc, #152]	; (8006050 <prvAddNewTaskToReadyList+0xcc>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d802      	bhi.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fd2:	4b20      	ldr	r3, [pc, #128]	; (8006054 <prvAddNewTaskToReadyList+0xd0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <prvAddNewTaskToReadyList+0xd0>)
 8005fda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <prvAddNewTaskToReadyList+0xd0>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <prvAddNewTaskToReadyList+0xd4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d903      	bls.n	8005ff8 <prvAddNewTaskToReadyList+0x74>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a18      	ldr	r2, [pc, #96]	; (8006058 <prvAddNewTaskToReadyList+0xd4>)
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4a15      	ldr	r2, [pc, #84]	; (800605c <prvAddNewTaskToReadyList+0xd8>)
 8006006:	441a      	add	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f7fe ff1d 	bl	8004e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006014:	f7ff f8c2 	bl	800519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <prvAddNewTaskToReadyList+0xcc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d207      	bcs.n	800603e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <prvAddNewTaskToReadyList+0xdc>)
 8006030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20001c44 	.word	0x20001c44
 800604c:	20001770 	.word	0x20001770
 8006050:	20001c50 	.word	0x20001c50
 8006054:	20001c60 	.word	0x20001c60
 8006058:	20001c4c 	.word	0x20001c4c
 800605c:	20001774 	.word	0x20001774
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d017      	beq.n	80060a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <vTaskDelay+0x60>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <vTaskDelay+0x30>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60bb      	str	r3, [r7, #8]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006094:	f000 f88a 	bl	80061ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006098:	2100      	movs	r1, #0
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fd04 	bl	8006aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060a0:	f000 f892 	bl	80061c8 <xTaskResumeAll>
 80060a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d107      	bne.n	80060bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <vTaskDelay+0x64>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20001c6c 	.word	0x20001c6c
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060da:	463a      	mov	r2, r7
 80060dc:	1d39      	adds	r1, r7, #4
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fc7e 	bl	80049e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	9202      	str	r2, [sp, #8]
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2300      	movs	r3, #0
 80060f8:	460a      	mov	r2, r1
 80060fa:	4924      	ldr	r1, [pc, #144]	; (800618c <vTaskStartScheduler+0xc0>)
 80060fc:	4824      	ldr	r0, [pc, #144]	; (8006190 <vTaskStartScheduler+0xc4>)
 80060fe:	f7ff fe01 	bl	8005d04 <xTaskCreateStatic>
 8006102:	4603      	mov	r3, r0
 8006104:	4a23      	ldr	r2, [pc, #140]	; (8006194 <vTaskStartScheduler+0xc8>)
 8006106:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006108:	4b22      	ldr	r3, [pc, #136]	; (8006194 <vTaskStartScheduler+0xc8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e001      	b.n	800611a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d102      	bne.n	8006126 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006120:	f000 fd16 	bl	8006b50 <xTimerCreateTimerTask>
 8006124:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d11b      	bne.n	8006164 <vTaskStartScheduler+0x98>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	613b      	str	r3, [r7, #16]
}
 800613e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006140:	4b15      	ldr	r3, [pc, #84]	; (8006198 <vTaskStartScheduler+0xcc>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3354      	adds	r3, #84	; 0x54
 8006146:	4a15      	ldr	r2, [pc, #84]	; (800619c <vTaskStartScheduler+0xd0>)
 8006148:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800614a:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <vTaskStartScheduler+0xd4>)
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006152:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <vTaskStartScheduler+0xd8>)
 8006154:	2201      	movs	r2, #1
 8006156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <vTaskStartScheduler+0xdc>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800615e:	f7fe ff7b 	bl	8005058 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006162:	e00e      	b.n	8006182 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d10a      	bne.n	8006182 <vTaskStartScheduler+0xb6>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	60fb      	str	r3, [r7, #12]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <vTaskStartScheduler+0xb4>
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	08007d70 	.word	0x08007d70
 8006190:	080067d5 	.word	0x080067d5
 8006194:	20001c68 	.word	0x20001c68
 8006198:	20001770 	.word	0x20001770
 800619c:	20000010 	.word	0x20000010
 80061a0:	20001c64 	.word	0x20001c64
 80061a4:	20001c50 	.word	0x20001c50
 80061a8:	20001c48 	.word	0x20001c48

080061ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <vTaskSuspendAll+0x18>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	4a03      	ldr	r2, [pc, #12]	; (80061c4 <vTaskSuspendAll+0x18>)
 80061b8:	6013      	str	r3, [r2, #0]
}
 80061ba:	bf00      	nop
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20001c6c 	.word	0x20001c6c

080061c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061d6:	4b42      	ldr	r3, [pc, #264]	; (80062e0 <xTaskResumeAll+0x118>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	603b      	str	r3, [r7, #0]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061f4:	f7fe ffa2 	bl	800513c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061f8:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <xTaskResumeAll+0x118>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a38      	ldr	r2, [pc, #224]	; (80062e0 <xTaskResumeAll+0x118>)
 8006200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006202:	4b37      	ldr	r3, [pc, #220]	; (80062e0 <xTaskResumeAll+0x118>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d162      	bne.n	80062d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800620a:	4b36      	ldr	r3, [pc, #216]	; (80062e4 <xTaskResumeAll+0x11c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d05e      	beq.n	80062d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006212:	e02f      	b.n	8006274 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006214:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <xTaskResumeAll+0x120>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3318      	adds	r3, #24
 8006220:	4618      	mov	r0, r3
 8006222:	f7fe fe6f 	bl	8004f04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe fe6a 	bl	8004f04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006234:	4b2d      	ldr	r3, [pc, #180]	; (80062ec <xTaskResumeAll+0x124>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d903      	bls.n	8006244 <xTaskResumeAll+0x7c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a2a      	ldr	r2, [pc, #168]	; (80062ec <xTaskResumeAll+0x124>)
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <xTaskResumeAll+0x128>)
 8006252:	441a      	add	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7fe fdf7 	bl	8004e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006264:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <xTaskResumeAll+0x12c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <xTaskResumeAll+0x130>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <xTaskResumeAll+0x120>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1cb      	bne.n	8006214 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006282:	f000 fb61 	bl	8006948 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <xTaskResumeAll+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d010      	beq.n	80062b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006292:	f000 f845 	bl	8006320 <xTaskIncrementTick>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800629c:	4b16      	ldr	r3, [pc, #88]	; (80062f8 <xTaskResumeAll+0x130>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f1      	bne.n	8006292 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <xTaskResumeAll+0x134>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80062b4:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <xTaskResumeAll+0x130>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062bc:	2301      	movs	r3, #1
 80062be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062c0:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <xTaskResumeAll+0x138>)
 80062c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062d0:	f7fe ff64 	bl	800519c <vPortExitCritical>

	return xAlreadyYielded;
 80062d4:	68bb      	ldr	r3, [r7, #8]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20001c6c 	.word	0x20001c6c
 80062e4:	20001c44 	.word	0x20001c44
 80062e8:	20001c04 	.word	0x20001c04
 80062ec:	20001c4c 	.word	0x20001c4c
 80062f0:	20001774 	.word	0x20001774
 80062f4:	20001770 	.word	0x20001770
 80062f8:	20001c58 	.word	0x20001c58
 80062fc:	20001c54 	.word	0x20001c54
 8006300:	e000ed04 	.word	0xe000ed04

08006304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <xTaskGetTickCount+0x18>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006310:	687b      	ldr	r3, [r7, #4]
}
 8006312:	4618      	mov	r0, r3
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr
 800631c:	20001c48 	.word	0x20001c48

08006320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800632a:	4b51      	ldr	r3, [pc, #324]	; (8006470 <xTaskIncrementTick+0x150>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 808e 	bne.w	8006450 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006334:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <xTaskIncrementTick+0x154>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3301      	adds	r3, #1
 800633a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800633c:	4a4d      	ldr	r2, [pc, #308]	; (8006474 <xTaskIncrementTick+0x154>)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d120      	bne.n	800638a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006348:	4b4b      	ldr	r3, [pc, #300]	; (8006478 <xTaskIncrementTick+0x158>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <xTaskIncrementTick+0x48>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	603b      	str	r3, [r7, #0]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <xTaskIncrementTick+0x46>
 8006368:	4b43      	ldr	r3, [pc, #268]	; (8006478 <xTaskIncrementTick+0x158>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <xTaskIncrementTick+0x15c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a41      	ldr	r2, [pc, #260]	; (8006478 <xTaskIncrementTick+0x158>)
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	4a41      	ldr	r2, [pc, #260]	; (800647c <xTaskIncrementTick+0x15c>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	4b40      	ldr	r3, [pc, #256]	; (8006480 <xTaskIncrementTick+0x160>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	4a3f      	ldr	r2, [pc, #252]	; (8006480 <xTaskIncrementTick+0x160>)
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	f000 fadf 	bl	8006948 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800638a:	4b3e      	ldr	r3, [pc, #248]	; (8006484 <xTaskIncrementTick+0x164>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	429a      	cmp	r2, r3
 8006392:	d34e      	bcc.n	8006432 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006394:	4b38      	ldr	r3, [pc, #224]	; (8006478 <xTaskIncrementTick+0x158>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <xTaskIncrementTick+0x82>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <xTaskIncrementTick+0x84>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a8:	4b36      	ldr	r3, [pc, #216]	; (8006484 <xTaskIncrementTick+0x164>)
 80063aa:	f04f 32ff 	mov.w	r2, #4294967295
 80063ae:	601a      	str	r2, [r3, #0]
					break;
 80063b0:	e03f      	b.n	8006432 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063b2:	4b31      	ldr	r3, [pc, #196]	; (8006478 <xTaskIncrementTick+0x158>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d203      	bcs.n	80063d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063ca:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <xTaskIncrementTick+0x164>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]
						break;
 80063d0:	e02f      	b.n	8006432 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fd94 	bl	8004f04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe fd8b 	bl	8004f04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f2:	4b25      	ldr	r3, [pc, #148]	; (8006488 <xTaskIncrementTick+0x168>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d903      	bls.n	8006402 <xTaskIncrementTick+0xe2>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	4a22      	ldr	r2, [pc, #136]	; (8006488 <xTaskIncrementTick+0x168>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <xTaskIncrementTick+0x16c>)
 8006410:	441a      	add	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe fd18 	bl	8004e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <xTaskIncrementTick+0x170>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	429a      	cmp	r2, r3
 800642a:	d3b3      	bcc.n	8006394 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006430:	e7b0      	b.n	8006394 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006432:	4b17      	ldr	r3, [pc, #92]	; (8006490 <xTaskIncrementTick+0x170>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4914      	ldr	r1, [pc, #80]	; (800648c <xTaskIncrementTick+0x16c>)
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d907      	bls.n	800645a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800644a:	2301      	movs	r3, #1
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e004      	b.n	800645a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006450:	4b10      	ldr	r3, [pc, #64]	; (8006494 <xTaskIncrementTick+0x174>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <xTaskIncrementTick+0x174>)
 8006458:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <xTaskIncrementTick+0x178>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006466:	697b      	ldr	r3, [r7, #20]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20001c6c 	.word	0x20001c6c
 8006474:	20001c48 	.word	0x20001c48
 8006478:	20001bfc 	.word	0x20001bfc
 800647c:	20001c00 	.word	0x20001c00
 8006480:	20001c5c 	.word	0x20001c5c
 8006484:	20001c64 	.word	0x20001c64
 8006488:	20001c4c 	.word	0x20001c4c
 800648c:	20001774 	.word	0x20001774
 8006490:	20001770 	.word	0x20001770
 8006494:	20001c54 	.word	0x20001c54
 8006498:	20001c58 	.word	0x20001c58

0800649c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80064a2:	4b2a      	ldr	r3, [pc, #168]	; (800654c <vTaskSwitchContext+0xb0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80064aa:	4b29      	ldr	r3, [pc, #164]	; (8006550 <vTaskSwitchContext+0xb4>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064b0:	e046      	b.n	8006540 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064b2:	4b27      	ldr	r3, [pc, #156]	; (8006550 <vTaskSwitchContext+0xb4>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80064b8:	4b26      	ldr	r3, [pc, #152]	; (8006554 <vTaskSwitchContext+0xb8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e010      	b.n	80064e2 <vTaskSwitchContext+0x46>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <vTaskSwitchContext+0x40>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	607b      	str	r3, [r7, #4]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <vTaskSwitchContext+0x3e>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3b01      	subs	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	491d      	ldr	r1, [pc, #116]	; (8006558 <vTaskSwitchContext+0xbc>)
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0e4      	beq.n	80064c0 <vTaskSwitchContext+0x24>
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4a15      	ldr	r2, [pc, #84]	; (8006558 <vTaskSwitchContext+0xbc>)
 8006502:	4413      	add	r3, r2
 8006504:	60bb      	str	r3, [r7, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3308      	adds	r3, #8
 8006518:	429a      	cmp	r2, r3
 800651a:	d104      	bne.n	8006526 <vTaskSwitchContext+0x8a>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	4a0b      	ldr	r2, [pc, #44]	; (800655c <vTaskSwitchContext+0xc0>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4a08      	ldr	r2, [pc, #32]	; (8006554 <vTaskSwitchContext+0xb8>)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <vTaskSwitchContext+0xc0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3354      	adds	r3, #84	; 0x54
 800653c:	4a08      	ldr	r2, [pc, #32]	; (8006560 <vTaskSwitchContext+0xc4>)
 800653e:	6013      	str	r3, [r2, #0]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20001c6c 	.word	0x20001c6c
 8006550:	20001c58 	.word	0x20001c58
 8006554:	20001c4c 	.word	0x20001c4c
 8006558:	20001774 	.word	0x20001774
 800655c:	20001770 	.word	0x20001770
 8006560:	20000010 	.word	0x20000010

08006564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <vTaskPlaceOnEventList+0x44>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3318      	adds	r3, #24
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe fc7e 	bl	8004e94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006598:	2101      	movs	r1, #1
 800659a:	6838      	ldr	r0, [r7, #0]
 800659c:	f000 fa84 	bl	8006aa8 <prvAddCurrentTaskToDelayedList>
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20001770 	.word	0x20001770

080065ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	617b      	str	r3, [r7, #20]
}
 80065d0:	bf00      	nop
 80065d2:	e7fe      	b.n	80065d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <vTaskPlaceOnEventListRestricted+0x54>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3318      	adds	r3, #24
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fe fc36 	bl	8004e4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065e8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	68b8      	ldr	r0, [r7, #8]
 80065f2:	f000 fa59 	bl	8006aa8 <prvAddCurrentTaskToDelayedList>
	}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20001770 	.word	0x20001770

08006604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60fb      	str	r3, [r7, #12]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3318      	adds	r3, #24
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fc65 	bl	8004f04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800663a:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xTaskRemoveFromEventList+0xb0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11d      	bne.n	800667e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fc5c 	bl	8004f04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <xTaskRemoveFromEventList+0xb4>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d903      	bls.n	8006660 <xTaskRemoveFromEventList+0x5c>
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <xTaskRemoveFromEventList+0xb4>)
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4613      	mov	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <xTaskRemoveFromEventList+0xb8>)
 800666e:	441a      	add	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f7fe fbe9 	bl	8004e4e <vListInsertEnd>
 800667c:	e005      	b.n	800668a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3318      	adds	r3, #24
 8006682:	4619      	mov	r1, r3
 8006684:	480e      	ldr	r0, [pc, #56]	; (80066c0 <xTaskRemoveFromEventList+0xbc>)
 8006686:	f7fe fbe2 	bl	8004e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <xTaskRemoveFromEventList+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	429a      	cmp	r2, r3
 8006696:	d905      	bls.n	80066a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <xTaskRemoveFromEventList+0xc4>)
 800669e:	2201      	movs	r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e001      	b.n	80066a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20001c6c 	.word	0x20001c6c
 80066b8:	20001c4c 	.word	0x20001c4c
 80066bc:	20001774 	.word	0x20001774
 80066c0:	20001c04 	.word	0x20001c04
 80066c4:	20001770 	.word	0x20001770
 80066c8:	20001c58 	.word	0x20001c58

080066cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <vTaskInternalSetTimeOutState+0x24>)
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <vTaskInternalSetTimeOutState+0x28>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20001c5c 	.word	0x20001c5c
 80066f4:	20001c48 	.word	0x20001c48

080066f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10a      	bne.n	800671e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	613b      	str	r3, [r7, #16]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	60fb      	str	r3, [r7, #12]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800673a:	f7fe fcff 	bl	800513c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800673e:	4b1d      	ldr	r3, [pc, #116]	; (80067b4 <xTaskCheckForTimeOut+0xbc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006756:	d102      	bne.n	800675e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e023      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <xTaskCheckForTimeOut+0xc0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d007      	beq.n	800677a <xTaskCheckForTimeOut+0x82>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e015      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d20b      	bcs.n	800679c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	1ad2      	subs	r2, r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff ff9b 	bl	80066cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	e004      	b.n	80067a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067a2:	2301      	movs	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067a6:	f7fe fcf9 	bl	800519c <vPortExitCritical>

	return xReturn;
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20001c48 	.word	0x20001c48
 80067b8:	20001c5c 	.word	0x20001c5c

080067bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067c0:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <vTaskMissedYield+0x14>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20001c58 	.word	0x20001c58

080067d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067dc:	f000 f852 	bl	8006884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067e0:	4b06      	ldr	r3, [pc, #24]	; (80067fc <prvIdleTask+0x28>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d9f9      	bls.n	80067dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80067e8:	4b05      	ldr	r3, [pc, #20]	; (8006800 <prvIdleTask+0x2c>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067f8:	e7f0      	b.n	80067dc <prvIdleTask+0x8>
 80067fa:	bf00      	nop
 80067fc:	20001774 	.word	0x20001774
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800680a:	2300      	movs	r3, #0
 800680c:	607b      	str	r3, [r7, #4]
 800680e:	e00c      	b.n	800682a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a12      	ldr	r2, [pc, #72]	; (8006864 <prvInitialiseTaskLists+0x60>)
 800681c:	4413      	add	r3, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe faea 	bl	8004df8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b37      	cmp	r3, #55	; 0x37
 800682e:	d9ef      	bls.n	8006810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006830:	480d      	ldr	r0, [pc, #52]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006832:	f7fe fae1 	bl	8004df8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006836:	480d      	ldr	r0, [pc, #52]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006838:	f7fe fade 	bl	8004df8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800683c:	480c      	ldr	r0, [pc, #48]	; (8006870 <prvInitialiseTaskLists+0x6c>)
 800683e:	f7fe fadb 	bl	8004df8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006842:	480c      	ldr	r0, [pc, #48]	; (8006874 <prvInitialiseTaskLists+0x70>)
 8006844:	f7fe fad8 	bl	8004df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006848:	480b      	ldr	r0, [pc, #44]	; (8006878 <prvInitialiseTaskLists+0x74>)
 800684a:	f7fe fad5 	bl	8004df8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <prvInitialiseTaskLists+0x78>)
 8006850:	4a05      	ldr	r2, [pc, #20]	; (8006868 <prvInitialiseTaskLists+0x64>)
 8006852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006854:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <prvInitialiseTaskLists+0x7c>)
 8006856:	4a05      	ldr	r2, [pc, #20]	; (800686c <prvInitialiseTaskLists+0x68>)
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20001774 	.word	0x20001774
 8006868:	20001bd4 	.word	0x20001bd4
 800686c:	20001be8 	.word	0x20001be8
 8006870:	20001c04 	.word	0x20001c04
 8006874:	20001c18 	.word	0x20001c18
 8006878:	20001c30 	.word	0x20001c30
 800687c:	20001bfc 	.word	0x20001bfc
 8006880:	20001c00 	.word	0x20001c00

08006884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800688a:	e019      	b.n	80068c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800688c:	f7fe fc56 	bl	800513c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006890:	4b10      	ldr	r3, [pc, #64]	; (80068d4 <prvCheckTasksWaitingTermination+0x50>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe fb31 	bl	8004f04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a0b      	ldr	r2, [pc, #44]	; (80068d8 <prvCheckTasksWaitingTermination+0x54>)
 80068aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068b6:	f7fe fc71 	bl	800519c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f810 	bl	80068e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <prvCheckTasksWaitingTermination+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e1      	bne.n	800688c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001c18 	.word	0x20001c18
 80068d8:	20001c44 	.word	0x20001c44
 80068dc:	20001c2c 	.word	0x20001c2c

080068e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3354      	adds	r3, #84	; 0x54
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fdd5 	bl	800749c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe f965 	bl	8004bd0 <vPortFree>
				vPortFree( pxTCB );
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fe f962 	bl	8004bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800690c:	e018      	b.n	8006940 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006914:	2b01      	cmp	r3, #1
 8006916:	d103      	bne.n	8006920 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe f959 	bl	8004bd0 <vPortFree>
	}
 800691e:	e00f      	b.n	8006940 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006926:	2b02      	cmp	r3, #2
 8006928:	d00a      	beq.n	8006940 <prvDeleteTCB+0x60>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	60fb      	str	r3, [r7, #12]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <prvDeleteTCB+0x5e>
	}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <prvResetNextTaskUnblockTime+0x40>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <prvResetNextTaskUnblockTime+0x14>
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <prvResetNextTaskUnblockTime+0x16>
 800695c:	2300      	movs	r3, #0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <prvResetNextTaskUnblockTime+0x44>)
 8006964:	f04f 32ff 	mov.w	r2, #4294967295
 8006968:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800696a:	e008      	b.n	800697e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <prvResetNextTaskUnblockTime+0x40>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4a04      	ldr	r2, [pc, #16]	; (800698c <prvResetNextTaskUnblockTime+0x44>)
 800697c:	6013      	str	r3, [r2, #0]
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	20001bfc 	.word	0x20001bfc
 800698c:	20001c64 	.word	0x20001c64

08006990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <xTaskGetSchedulerState+0x34>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800699e:	2301      	movs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e008      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <xTaskGetSchedulerState+0x38>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ac:	2302      	movs	r3, #2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e001      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069b6:	687b      	ldr	r3, [r7, #4]
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20001c50 	.word	0x20001c50
 80069c8:	20001c6c 	.word	0x20001c6c

080069cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d056      	beq.n	8006a90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069e2:	4b2e      	ldr	r3, [pc, #184]	; (8006a9c <xTaskPriorityDisinherit+0xd0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d00a      	beq.n	8006a02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	60fb      	str	r3, [r7, #12]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60bb      	str	r3, [r7, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d02c      	beq.n	8006a90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d128      	bne.n	8006a90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fa5e 	bl	8004f04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <xTaskPriorityDisinherit+0xd4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d903      	bls.n	8006a70 <xTaskPriorityDisinherit+0xa4>
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <xTaskPriorityDisinherit+0xd4>)
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a74:	4613      	mov	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <xTaskPriorityDisinherit+0xd8>)
 8006a7e:	441a      	add	r2, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f7fe f9e1 	bl	8004e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a90:	697b      	ldr	r3, [r7, #20]
	}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20001770 	.word	0x20001770
 8006aa0:	20001c4c 	.word	0x20001c4c
 8006aa4:	20001774 	.word	0x20001774

08006aa8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ab2:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ab8:	4b20      	ldr	r3, [pc, #128]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3304      	adds	r3, #4
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fa20 	bl	8004f04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d10a      	bne.n	8006ae2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ad2:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4819      	ldr	r0, [pc, #100]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x98>)
 8006adc:	f7fe f9b7 	bl	8004e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ae0:	e026      	b.n	8006b30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006aea:	4b14      	ldr	r3, [pc, #80]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d209      	bcs.n	8006b0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe f9c4 	bl	8004e94 <vListInsert>
}
 8006b0c:	e010      	b.n	8006b30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4b0a      	ldr	r3, [pc, #40]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7fe f9ba 	bl	8004e94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d202      	bcs.n	8006b30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b2a:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6013      	str	r3, [r2, #0]
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20001c48 	.word	0x20001c48
 8006b3c:	20001770 	.word	0x20001770
 8006b40:	20001c30 	.word	0x20001c30
 8006b44:	20001c00 	.word	0x20001c00
 8006b48:	20001bfc 	.word	0x20001bfc
 8006b4c:	20001c64 	.word	0x20001c64

08006b50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b5a:	f000 fb5b 	bl	8007214 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b5e:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <xTimerCreateTimerTask+0x80>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d021      	beq.n	8006baa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b6e:	1d3a      	adds	r2, r7, #4
 8006b70:	f107 0108 	add.w	r1, r7, #8
 8006b74:	f107 030c 	add.w	r3, r7, #12
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fd ff4b 	bl	8004a14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	2302      	movs	r3, #2
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	460a      	mov	r2, r1
 8006b90:	4910      	ldr	r1, [pc, #64]	; (8006bd4 <xTimerCreateTimerTask+0x84>)
 8006b92:	4811      	ldr	r0, [pc, #68]	; (8006bd8 <xTimerCreateTimerTask+0x88>)
 8006b94:	f7ff f8b6 	bl	8005d04 <xTaskCreateStatic>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4a10      	ldr	r2, [pc, #64]	; (8006bdc <xTimerCreateTimerTask+0x8c>)
 8006b9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <xTimerCreateTimerTask+0x8c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10a      	bne.n	8006bc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	613b      	str	r3, [r7, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bc6:	697b      	ldr	r3, [r7, #20]
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3718      	adds	r7, #24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20001ca0 	.word	0x20001ca0
 8006bd4:	08007d78 	.word	0x08007d78
 8006bd8:	08006e1d 	.word	0x08006e1d
 8006bdc:	20001ca4 	.word	0x20001ca4

08006be0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006bee:	2030      	movs	r0, #48	; 0x30
 8006bf0:	f7fd ff2a 	bl	8004a48 <pvPortMalloc>
 8006bf4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00d      	beq.n	8006c18 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f846 	bl	8006c9c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006c18:	697b      	ldr	r3, [r7, #20]
	}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b08a      	sub	sp, #40	; 0x28
 8006c26:	af02      	add	r7, sp, #8
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006c30:	2330      	movs	r3, #48	; 0x30
 8006c32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b30      	cmp	r3, #48	; 0x30
 8006c38:	d00a      	beq.n	8006c50 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	61bb      	str	r3, [r7, #24]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <xTimerCreateStatic+0x4a>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	9301      	str	r3, [sp, #4]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68b9      	ldr	r1, [r7, #8]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f809 	bl	8006c9c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006c92:	69fb      	ldr	r3, [r7, #28]
	}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3720      	adds	r7, #32
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	617b      	str	r3, [r7, #20]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d015      	beq.n	8006cf8 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006ccc:	f000 faa2 	bl	8007214 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe f89f 	bl	8004e36 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	623b      	str	r3, [r7, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d2e:	4b1a      	ldr	r3, [pc, #104]	; (8006d98 <xTimerGenericCommand+0x98>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d02a      	beq.n	8006d8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	dc18      	bgt.n	8006d7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d48:	f7ff fe22 	bl	8006990 <xTaskGetSchedulerState>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d109      	bne.n	8006d66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d52:	4b11      	ldr	r3, [pc, #68]	; (8006d98 <xTimerGenericCommand+0x98>)
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	f107 0110 	add.w	r1, r7, #16
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5e:	f7fe fbef 	bl	8005540 <xQueueGenericSend>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24
 8006d64:	e012      	b.n	8006d8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <xTimerGenericCommand+0x98>)
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	f107 0110 	add.w	r1, r7, #16
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2200      	movs	r2, #0
 8006d72:	f7fe fbe5 	bl	8005540 <xQueueGenericSend>
 8006d76:	6278      	str	r0, [r7, #36]	; 0x24
 8006d78:	e008      	b.n	8006d8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <xTimerGenericCommand+0x98>)
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f107 0110 	add.w	r1, r7, #16
 8006d82:	2300      	movs	r3, #0
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	f7fe fcd9 	bl	800573c <xQueueGenericSendFromISR>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20001ca0 	.word	0x20001ca0

08006d9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b088      	sub	sp, #32
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da6:	4b1c      	ldr	r3, [pc, #112]	; (8006e18 <prvProcessExpiredTimer+0x7c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe f8a5 	bl	8004f04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d122      	bne.n	8006e08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	18d1      	adds	r1, r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	6978      	ldr	r0, [r7, #20]
 8006dd0:	f000 f8c8 	bl	8006f64 <prvInsertTimerInActiveList>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2300      	movs	r3, #0
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	2100      	movs	r1, #0
 8006de4:	6978      	ldr	r0, [r7, #20]
 8006de6:	f7ff ff8b 	bl	8006d00 <xTimerGenericCommand>
 8006dea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	6978      	ldr	r0, [r7, #20]
 8006e0e:	4798      	blx	r3
}
 8006e10:	bf00      	nop
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	20001c98 	.word	0x20001c98

08006e1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f857 	bl	8006edc <prvGetNextExpireTime>
 8006e2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4619      	mov	r1, r3
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f803 	bl	8006e40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e3a:	f000 f8d5 	bl	8006fe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e3e:	e7f1      	b.n	8006e24 <prvTimerTask+0x8>

08006e40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e4a:	f7ff f9af 	bl	80061ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e4e:	f107 0308 	add.w	r3, r7, #8
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 f866 	bl	8006f24 <prvSampleTimeNow>
 8006e58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d130      	bne.n	8006ec2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <prvProcessTimerOrBlockTask+0x3c>
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d806      	bhi.n	8006e7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e6e:	f7ff f9ab 	bl	80061c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ff91 	bl	8006d9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e7a:	e024      	b.n	8006ec6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e82:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <prvProcessTimerOrBlockTask+0x90>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bf0c      	ite	eq
 8006e8c:	2301      	moveq	r3, #1
 8006e8e:	2300      	movne	r3, #0
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e94:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <prvProcessTimerOrBlockTask+0x94>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f7fe fefb 	bl	8005c9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ea6:	f7ff f98f 	bl	80061c8 <xTaskResumeAll>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eb0:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <prvProcessTimerOrBlockTask+0x98>)
 8006eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
}
 8006ec0:	e001      	b.n	8006ec6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ec2:	f7ff f981 	bl	80061c8 <xTaskResumeAll>
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20001c9c 	.word	0x20001c9c
 8006ed4:	20001ca0 	.word	0x20001ca0
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <prvGetNextExpireTime+0x44>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d105      	bne.n	8006f0e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <prvGetNextExpireTime+0x44>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e001      	b.n	8006f12 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bc80      	pop	{r7}
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20001c98 	.word	0x20001c98

08006f24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f2c:	f7ff f9ea 	bl	8006304 <xTaskGetTickCount>
 8006f30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <prvSampleTimeNow+0x3c>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d205      	bcs.n	8006f48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f3c:	f000 f908 	bl	8007150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f4e:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <prvSampleTimeNow+0x3c>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f54:	68fb      	ldr	r3, [r7, #12]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3710      	adds	r7, #16
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20001ca8 	.word	0x20001ca8

08006f64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d812      	bhi.n	8006fb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d302      	bcc.n	8006f9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e01b      	b.n	8006fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <prvInsertTimerInActiveList+0x7c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4610      	mov	r0, r2
 8006faa:	f7fd ff73 	bl	8004e94 <vListInsert>
 8006fae:	e012      	b.n	8006fd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d206      	bcs.n	8006fc6 <prvInsertTimerInActiveList+0x62>
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d302      	bcc.n	8006fc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	e007      	b.n	8006fd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <prvInsertTimerInActiveList+0x80>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f7fd ff5f 	bl	8004e94 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fd6:	697b      	ldr	r3, [r7, #20]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20001c9c 	.word	0x20001c9c
 8006fe4:	20001c98 	.word	0x20001c98

08006fe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	; 0x38
 8006fec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fee:	e09d      	b.n	800712c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da18      	bge.n	8007028 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	61fb      	str	r3, [r7, #28]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800701e:	6850      	ldr	r0, [r2, #4]
 8007020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007022:	6892      	ldr	r2, [r2, #8]
 8007024:	4611      	mov	r1, r2
 8007026:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	db7d      	blt.n	800712a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fd ff60 	bl	8004f04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007044:	463b      	mov	r3, r7
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff ff6c 	bl	8006f24 <prvSampleTimeNow>
 800704c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b09      	cmp	r3, #9
 8007052:	d86b      	bhi.n	800712c <prvProcessReceivedCommands+0x144>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <prvProcessReceivedCommands+0x74>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	08007085 	.word	0x08007085
 8007060:	08007085 	.word	0x08007085
 8007064:	08007085 	.word	0x08007085
 8007068:	0800712d 	.word	0x0800712d
 800706c:	080070e1 	.word	0x080070e1
 8007070:	08007119 	.word	0x08007119
 8007074:	08007085 	.word	0x08007085
 8007078:	08007085 	.word	0x08007085
 800707c:	0800712d 	.word	0x0800712d
 8007080:	080070e1 	.word	0x080070e1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	18d1      	adds	r1, r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007092:	f7ff ff67 	bl	8006f64 <prvInsertTimerInActiveList>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d047      	beq.n	800712c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d13f      	bne.n	800712c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	441a      	add	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2300      	movs	r3, #0
 80070ba:	2100      	movs	r1, #0
 80070bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070be:	f7ff fe1f 	bl	8006d00 <xTimerGenericCommand>
 80070c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d130      	bne.n	800712c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	61bb      	str	r3, [r7, #24]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	617b      	str	r3, [r7, #20]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	699a      	ldr	r2, [r3, #24]
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	18d1      	adds	r1, r2, r3
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007110:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007112:	f7ff ff27 	bl	8006f64 <prvInsertTimerInActiveList>
					break;
 8007116:	e009      	b.n	800712c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d104      	bne.n	800712c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f7fd fd54 	bl	8004bd0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007128:	e000      	b.n	800712c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800712a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <prvProcessReceivedCommands+0x164>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	1d39      	adds	r1, r7, #4
 8007132:	2200      	movs	r2, #0
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe fb99 	bl	800586c <xQueueReceive>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	f47f af57 	bne.w	8006ff0 <prvProcessReceivedCommands+0x8>
	}
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	3730      	adds	r7, #48	; 0x30
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20001ca0 	.word	0x20001ca0

08007150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007156:	e045      	b.n	80071e4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007158:	4b2c      	ldr	r3, [pc, #176]	; (800720c <prvSwitchTimerLists+0xbc>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007162:	4b2a      	ldr	r3, [pc, #168]	; (800720c <prvSwitchTimerLists+0xbc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3304      	adds	r3, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f7fd fec7 	bl	8004f04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d12e      	bne.n	80071e4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	429a      	cmp	r2, r3
 8007196:	d90e      	bls.n	80071b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071a4:	4b19      	ldr	r3, [pc, #100]	; (800720c <prvSwitchTimerLists+0xbc>)
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3304      	adds	r3, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	4610      	mov	r0, r2
 80071b0:	f7fd fe70 	bl	8004e94 <vListInsert>
 80071b4:	e016      	b.n	80071e4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071b6:	2300      	movs	r3, #0
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	2100      	movs	r1, #0
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f7ff fd9d 	bl	8006d00 <xTimerGenericCommand>
 80071c6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	603b      	str	r3, [r7, #0]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071e4:	4b09      	ldr	r3, [pc, #36]	; (800720c <prvSwitchTimerLists+0xbc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1b4      	bne.n	8007158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <prvSwitchTimerLists+0xbc>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071f4:	4b06      	ldr	r3, [pc, #24]	; (8007210 <prvSwitchTimerLists+0xc0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a04      	ldr	r2, [pc, #16]	; (800720c <prvSwitchTimerLists+0xbc>)
 80071fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071fc:	4a04      	ldr	r2, [pc, #16]	; (8007210 <prvSwitchTimerLists+0xc0>)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6013      	str	r3, [r2, #0]
}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20001c98 	.word	0x20001c98
 8007210:	20001c9c 	.word	0x20001c9c

08007214 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800721a:	f7fd ff8f 	bl	800513c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d120      	bne.n	8007268 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007226:	4814      	ldr	r0, [pc, #80]	; (8007278 <prvCheckForValidListAndQueue+0x64>)
 8007228:	f7fd fde6 	bl	8004df8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800722c:	4813      	ldr	r0, [pc, #76]	; (800727c <prvCheckForValidListAndQueue+0x68>)
 800722e:	f7fd fde3 	bl	8004df8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007232:	4b13      	ldr	r3, [pc, #76]	; (8007280 <prvCheckForValidListAndQueue+0x6c>)
 8007234:	4a10      	ldr	r2, [pc, #64]	; (8007278 <prvCheckForValidListAndQueue+0x64>)
 8007236:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007238:	4b12      	ldr	r3, [pc, #72]	; (8007284 <prvCheckForValidListAndQueue+0x70>)
 800723a:	4a10      	ldr	r2, [pc, #64]	; (800727c <prvCheckForValidListAndQueue+0x68>)
 800723c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800723e:	2300      	movs	r3, #0
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4b11      	ldr	r3, [pc, #68]	; (8007288 <prvCheckForValidListAndQueue+0x74>)
 8007244:	4a11      	ldr	r2, [pc, #68]	; (800728c <prvCheckForValidListAndQueue+0x78>)
 8007246:	2110      	movs	r1, #16
 8007248:	200a      	movs	r0, #10
 800724a:	f7fe f8df 	bl	800540c <xQueueGenericCreateStatic>
 800724e:	4603      	mov	r3, r0
 8007250:	4a08      	ldr	r2, [pc, #32]	; (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007252:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007254:	4b07      	ldr	r3, [pc, #28]	; (8007274 <prvCheckForValidListAndQueue+0x60>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <prvCheckForValidListAndQueue+0x60>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	490b      	ldr	r1, [pc, #44]	; (8007290 <prvCheckForValidListAndQueue+0x7c>)
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fcf2 	bl	8005c4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007268:	f7fd ff98 	bl	800519c <vPortExitCritical>
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20001ca0 	.word	0x20001ca0
 8007278:	20001c70 	.word	0x20001c70
 800727c:	20001c84 	.word	0x20001c84
 8007280:	20001c98 	.word	0x20001c98
 8007284:	20001c9c 	.word	0x20001c9c
 8007288:	20001d4c 	.word	0x20001d4c
 800728c:	20001cac 	.word	0x20001cac
 8007290:	08007d80 	.word	0x08007d80

08007294 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <pvTimerGetTimerID+0x28>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60fb      	str	r3, [r7, #12]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80072bc:	f7fd ff3e 	bl	800513c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80072c6:	f7fd ff69 	bl	800519c <vPortExitCritical>

	return pvReturn;
 80072ca:	693b      	ldr	r3, [r7, #16]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <__errno>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <__errno+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000010 	.word	0x20000010

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	2600      	movs	r6, #0
 80072e4:	4d0c      	ldr	r5, [pc, #48]	; (8007318 <__libc_init_array+0x38>)
 80072e6:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e8:	1b64      	subs	r4, r4, r5
 80072ea:	10a4      	asrs	r4, r4, #2
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	f000 fd06 	bl	8007d00 <_init>
 80072f4:	2600      	movs	r6, #0
 80072f6:	4d0a      	ldr	r5, [pc, #40]	; (8007320 <__libc_init_array+0x40>)
 80072f8:	4c0a      	ldr	r4, [pc, #40]	; (8007324 <__libc_init_array+0x44>)
 80072fa:	1b64      	subs	r4, r4, r5
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	08007ea0 	.word	0x08007ea0
 800731c:	08007ea0 	.word	0x08007ea0
 8007320:	08007ea0 	.word	0x08007ea0
 8007324:	08007ea4 	.word	0x08007ea4

08007328 <__retarget_lock_acquire_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_release_recursive>:
 800732a:	4770      	bx	lr

0800732c <memcpy>:
 800732c:	440a      	add	r2, r1
 800732e:	4291      	cmp	r1, r2
 8007330:	f100 33ff 	add.w	r3, r0, #4294967295
 8007334:	d100      	bne.n	8007338 <memcpy+0xc>
 8007336:	4770      	bx	lr
 8007338:	b510      	push	{r4, lr}
 800733a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800733e:	4291      	cmp	r1, r2
 8007340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007344:	d1f9      	bne.n	800733a <memcpy+0xe>
 8007346:	bd10      	pop	{r4, pc}

08007348 <memset>:
 8007348:	4603      	mov	r3, r0
 800734a:	4402      	add	r2, r0
 800734c:	4293      	cmp	r3, r2
 800734e:	d100      	bne.n	8007352 <memset+0xa>
 8007350:	4770      	bx	lr
 8007352:	f803 1b01 	strb.w	r1, [r3], #1
 8007356:	e7f9      	b.n	800734c <memset+0x4>

08007358 <sbrk_aligned>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4e0e      	ldr	r6, [pc, #56]	; (8007394 <sbrk_aligned+0x3c>)
 800735c:	460c      	mov	r4, r1
 800735e:	6831      	ldr	r1, [r6, #0]
 8007360:	4605      	mov	r5, r0
 8007362:	b911      	cbnz	r1, 800736a <sbrk_aligned+0x12>
 8007364:	f000 f8f6 	bl	8007554 <_sbrk_r>
 8007368:	6030      	str	r0, [r6, #0]
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f8f1 	bl	8007554 <_sbrk_r>
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	d00a      	beq.n	800738c <sbrk_aligned+0x34>
 8007376:	1cc4      	adds	r4, r0, #3
 8007378:	f024 0403 	bic.w	r4, r4, #3
 800737c:	42a0      	cmp	r0, r4
 800737e:	d007      	beq.n	8007390 <sbrk_aligned+0x38>
 8007380:	1a21      	subs	r1, r4, r0
 8007382:	4628      	mov	r0, r5
 8007384:	f000 f8e6 	bl	8007554 <_sbrk_r>
 8007388:	3001      	adds	r0, #1
 800738a:	d101      	bne.n	8007390 <sbrk_aligned+0x38>
 800738c:	f04f 34ff 	mov.w	r4, #4294967295
 8007390:	4620      	mov	r0, r4
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	20001da4 	.word	0x20001da4

08007398 <_malloc_r>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	1ccd      	adds	r5, r1, #3
 800739e:	f025 0503 	bic.w	r5, r5, #3
 80073a2:	3508      	adds	r5, #8
 80073a4:	2d0c      	cmp	r5, #12
 80073a6:	bf38      	it	cc
 80073a8:	250c      	movcc	r5, #12
 80073aa:	2d00      	cmp	r5, #0
 80073ac:	4607      	mov	r7, r0
 80073ae:	db01      	blt.n	80073b4 <_malloc_r+0x1c>
 80073b0:	42a9      	cmp	r1, r5
 80073b2:	d905      	bls.n	80073c0 <_malloc_r+0x28>
 80073b4:	230c      	movs	r3, #12
 80073b6:	2600      	movs	r6, #0
 80073b8:	603b      	str	r3, [r7, #0]
 80073ba:	4630      	mov	r0, r6
 80073bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c0:	4e2e      	ldr	r6, [pc, #184]	; (800747c <_malloc_r+0xe4>)
 80073c2:	f000 f8f7 	bl	80075b4 <__malloc_lock>
 80073c6:	6833      	ldr	r3, [r6, #0]
 80073c8:	461c      	mov	r4, r3
 80073ca:	bb34      	cbnz	r4, 800741a <_malloc_r+0x82>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4638      	mov	r0, r7
 80073d0:	f7ff ffc2 	bl	8007358 <sbrk_aligned>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	4604      	mov	r4, r0
 80073d8:	d14d      	bne.n	8007476 <_malloc_r+0xde>
 80073da:	6834      	ldr	r4, [r6, #0]
 80073dc:	4626      	mov	r6, r4
 80073de:	2e00      	cmp	r6, #0
 80073e0:	d140      	bne.n	8007464 <_malloc_r+0xcc>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	4631      	mov	r1, r6
 80073e6:	4638      	mov	r0, r7
 80073e8:	eb04 0803 	add.w	r8, r4, r3
 80073ec:	f000 f8b2 	bl	8007554 <_sbrk_r>
 80073f0:	4580      	cmp	r8, r0
 80073f2:	d13a      	bne.n	800746a <_malloc_r+0xd2>
 80073f4:	6821      	ldr	r1, [r4, #0]
 80073f6:	3503      	adds	r5, #3
 80073f8:	1a6d      	subs	r5, r5, r1
 80073fa:	f025 0503 	bic.w	r5, r5, #3
 80073fe:	3508      	adds	r5, #8
 8007400:	2d0c      	cmp	r5, #12
 8007402:	bf38      	it	cc
 8007404:	250c      	movcc	r5, #12
 8007406:	4638      	mov	r0, r7
 8007408:	4629      	mov	r1, r5
 800740a:	f7ff ffa5 	bl	8007358 <sbrk_aligned>
 800740e:	3001      	adds	r0, #1
 8007410:	d02b      	beq.n	800746a <_malloc_r+0xd2>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	442b      	add	r3, r5
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	e00e      	b.n	8007438 <_malloc_r+0xa0>
 800741a:	6822      	ldr	r2, [r4, #0]
 800741c:	1b52      	subs	r2, r2, r5
 800741e:	d41e      	bmi.n	800745e <_malloc_r+0xc6>
 8007420:	2a0b      	cmp	r2, #11
 8007422:	d916      	bls.n	8007452 <_malloc_r+0xba>
 8007424:	1961      	adds	r1, r4, r5
 8007426:	42a3      	cmp	r3, r4
 8007428:	6025      	str	r5, [r4, #0]
 800742a:	bf18      	it	ne
 800742c:	6059      	strne	r1, [r3, #4]
 800742e:	6863      	ldr	r3, [r4, #4]
 8007430:	bf08      	it	eq
 8007432:	6031      	streq	r1, [r6, #0]
 8007434:	5162      	str	r2, [r4, r5]
 8007436:	604b      	str	r3, [r1, #4]
 8007438:	4638      	mov	r0, r7
 800743a:	f104 060b 	add.w	r6, r4, #11
 800743e:	f000 f8bf 	bl	80075c0 <__malloc_unlock>
 8007442:	f026 0607 	bic.w	r6, r6, #7
 8007446:	1d23      	adds	r3, r4, #4
 8007448:	1af2      	subs	r2, r6, r3
 800744a:	d0b6      	beq.n	80073ba <_malloc_r+0x22>
 800744c:	1b9b      	subs	r3, r3, r6
 800744e:	50a3      	str	r3, [r4, r2]
 8007450:	e7b3      	b.n	80073ba <_malloc_r+0x22>
 8007452:	6862      	ldr	r2, [r4, #4]
 8007454:	42a3      	cmp	r3, r4
 8007456:	bf0c      	ite	eq
 8007458:	6032      	streq	r2, [r6, #0]
 800745a:	605a      	strne	r2, [r3, #4]
 800745c:	e7ec      	b.n	8007438 <_malloc_r+0xa0>
 800745e:	4623      	mov	r3, r4
 8007460:	6864      	ldr	r4, [r4, #4]
 8007462:	e7b2      	b.n	80073ca <_malloc_r+0x32>
 8007464:	4634      	mov	r4, r6
 8007466:	6876      	ldr	r6, [r6, #4]
 8007468:	e7b9      	b.n	80073de <_malloc_r+0x46>
 800746a:	230c      	movs	r3, #12
 800746c:	4638      	mov	r0, r7
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	f000 f8a6 	bl	80075c0 <__malloc_unlock>
 8007474:	e7a1      	b.n	80073ba <_malloc_r+0x22>
 8007476:	6025      	str	r5, [r4, #0]
 8007478:	e7de      	b.n	8007438 <_malloc_r+0xa0>
 800747a:	bf00      	nop
 800747c:	20001da0 	.word	0x20001da0

08007480 <cleanup_glue>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	460c      	mov	r4, r1
 8007484:	6809      	ldr	r1, [r1, #0]
 8007486:	4605      	mov	r5, r0
 8007488:	b109      	cbz	r1, 800748e <cleanup_glue+0xe>
 800748a:	f7ff fff9 	bl	8007480 <cleanup_glue>
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007496:	f000 b899 	b.w	80075cc <_free_r>
	...

0800749c <_reclaim_reent>:
 800749c:	4b2c      	ldr	r3, [pc, #176]	; (8007550 <_reclaim_reent+0xb4>)
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4604      	mov	r4, r0
 80074a4:	4283      	cmp	r3, r0
 80074a6:	d051      	beq.n	800754c <_reclaim_reent+0xb0>
 80074a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80074aa:	b143      	cbz	r3, 80074be <_reclaim_reent+0x22>
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d14a      	bne.n	8007548 <_reclaim_reent+0xac>
 80074b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074b4:	6819      	ldr	r1, [r3, #0]
 80074b6:	b111      	cbz	r1, 80074be <_reclaim_reent+0x22>
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 f887 	bl	80075cc <_free_r>
 80074be:	6961      	ldr	r1, [r4, #20]
 80074c0:	b111      	cbz	r1, 80074c8 <_reclaim_reent+0x2c>
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f882 	bl	80075cc <_free_r>
 80074c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074ca:	b111      	cbz	r1, 80074d2 <_reclaim_reent+0x36>
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 f87d 	bl	80075cc <_free_r>
 80074d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074d4:	b111      	cbz	r1, 80074dc <_reclaim_reent+0x40>
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 f878 	bl	80075cc <_free_r>
 80074dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80074de:	b111      	cbz	r1, 80074e6 <_reclaim_reent+0x4a>
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 f873 	bl	80075cc <_free_r>
 80074e6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80074e8:	b111      	cbz	r1, 80074f0 <_reclaim_reent+0x54>
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 f86e 	bl	80075cc <_free_r>
 80074f0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80074f2:	b111      	cbz	r1, 80074fa <_reclaim_reent+0x5e>
 80074f4:	4620      	mov	r0, r4
 80074f6:	f000 f869 	bl	80075cc <_free_r>
 80074fa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80074fc:	b111      	cbz	r1, 8007504 <_reclaim_reent+0x68>
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f864 	bl	80075cc <_free_r>
 8007504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007506:	b111      	cbz	r1, 800750e <_reclaim_reent+0x72>
 8007508:	4620      	mov	r0, r4
 800750a:	f000 f85f 	bl	80075cc <_free_r>
 800750e:	69a3      	ldr	r3, [r4, #24]
 8007510:	b1e3      	cbz	r3, 800754c <_reclaim_reent+0xb0>
 8007512:	4620      	mov	r0, r4
 8007514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007516:	4798      	blx	r3
 8007518:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800751a:	b1b9      	cbz	r1, 800754c <_reclaim_reent+0xb0>
 800751c:	4620      	mov	r0, r4
 800751e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007522:	f7ff bfad 	b.w	8007480 <cleanup_glue>
 8007526:	5949      	ldr	r1, [r1, r5]
 8007528:	b941      	cbnz	r1, 800753c <_reclaim_reent+0xa0>
 800752a:	3504      	adds	r5, #4
 800752c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752e:	2d80      	cmp	r5, #128	; 0x80
 8007530:	68d9      	ldr	r1, [r3, #12]
 8007532:	d1f8      	bne.n	8007526 <_reclaim_reent+0x8a>
 8007534:	4620      	mov	r0, r4
 8007536:	f000 f849 	bl	80075cc <_free_r>
 800753a:	e7ba      	b.n	80074b2 <_reclaim_reent+0x16>
 800753c:	680e      	ldr	r6, [r1, #0]
 800753e:	4620      	mov	r0, r4
 8007540:	f000 f844 	bl	80075cc <_free_r>
 8007544:	4631      	mov	r1, r6
 8007546:	e7ef      	b.n	8007528 <_reclaim_reent+0x8c>
 8007548:	2500      	movs	r5, #0
 800754a:	e7ef      	b.n	800752c <_reclaim_reent+0x90>
 800754c:	bd70      	pop	{r4, r5, r6, pc}
 800754e:	bf00      	nop
 8007550:	20000010 	.word	0x20000010

08007554 <_sbrk_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	2300      	movs	r3, #0
 8007558:	4d05      	ldr	r5, [pc, #20]	; (8007570 <_sbrk_r+0x1c>)
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7fa fbfe 	bl	8001d60 <_sbrk>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_sbrk_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_sbrk_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	20001da8 	.word	0x20001da8

08007574 <siprintf>:
 8007574:	b40e      	push	{r1, r2, r3}
 8007576:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800757a:	b500      	push	{lr}
 800757c:	b09c      	sub	sp, #112	; 0x70
 800757e:	ab1d      	add	r3, sp, #116	; 0x74
 8007580:	9002      	str	r0, [sp, #8]
 8007582:	9006      	str	r0, [sp, #24]
 8007584:	9107      	str	r1, [sp, #28]
 8007586:	9104      	str	r1, [sp, #16]
 8007588:	4808      	ldr	r0, [pc, #32]	; (80075ac <siprintf+0x38>)
 800758a:	4909      	ldr	r1, [pc, #36]	; (80075b0 <siprintf+0x3c>)
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	9105      	str	r1, [sp, #20]
 8007592:	6800      	ldr	r0, [r0, #0]
 8007594:	a902      	add	r1, sp, #8
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	f000 f8bc 	bl	8007714 <_svfiprintf_r>
 800759c:	2200      	movs	r2, #0
 800759e:	9b02      	ldr	r3, [sp, #8]
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	b01c      	add	sp, #112	; 0x70
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b003      	add	sp, #12
 80075aa:	4770      	bx	lr
 80075ac:	20000010 	.word	0x20000010
 80075b0:	ffff0208 	.word	0xffff0208

080075b4 <__malloc_lock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__malloc_lock+0x8>)
 80075b6:	f7ff beb7 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	20001d9c 	.word	0x20001d9c

080075c0 <__malloc_unlock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__malloc_unlock+0x8>)
 80075c2:	f7ff beb2 	b.w	800732a <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	20001d9c 	.word	0x20001d9c

080075cc <_free_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4605      	mov	r5, r0
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d040      	beq.n	8007656 <_free_r+0x8a>
 80075d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d8:	1f0c      	subs	r4, r1, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bfb8      	it	lt
 80075de:	18e4      	addlt	r4, r4, r3
 80075e0:	f7ff ffe8 	bl	80075b4 <__malloc_lock>
 80075e4:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <_free_r+0x8c>)
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	b933      	cbnz	r3, 80075f8 <_free_r+0x2c>
 80075ea:	6063      	str	r3, [r4, #4]
 80075ec:	6014      	str	r4, [r2, #0]
 80075ee:	4628      	mov	r0, r5
 80075f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f4:	f7ff bfe4 	b.w	80075c0 <__malloc_unlock>
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d908      	bls.n	800760e <_free_r+0x42>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	1821      	adds	r1, r4, r0
 8007600:	428b      	cmp	r3, r1
 8007602:	bf01      	itttt	eq
 8007604:	6819      	ldreq	r1, [r3, #0]
 8007606:	685b      	ldreq	r3, [r3, #4]
 8007608:	1809      	addeq	r1, r1, r0
 800760a:	6021      	streq	r1, [r4, #0]
 800760c:	e7ed      	b.n	80075ea <_free_r+0x1e>
 800760e:	461a      	mov	r2, r3
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b10b      	cbz	r3, 8007618 <_free_r+0x4c>
 8007614:	42a3      	cmp	r3, r4
 8007616:	d9fa      	bls.n	800760e <_free_r+0x42>
 8007618:	6811      	ldr	r1, [r2, #0]
 800761a:	1850      	adds	r0, r2, r1
 800761c:	42a0      	cmp	r0, r4
 800761e:	d10b      	bne.n	8007638 <_free_r+0x6c>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	4401      	add	r1, r0
 8007624:	1850      	adds	r0, r2, r1
 8007626:	4283      	cmp	r3, r0
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	d1e0      	bne.n	80075ee <_free_r+0x22>
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4401      	add	r1, r0
 8007632:	6011      	str	r1, [r2, #0]
 8007634:	6053      	str	r3, [r2, #4]
 8007636:	e7da      	b.n	80075ee <_free_r+0x22>
 8007638:	d902      	bls.n	8007640 <_free_r+0x74>
 800763a:	230c      	movs	r3, #12
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	e7d6      	b.n	80075ee <_free_r+0x22>
 8007640:	6820      	ldr	r0, [r4, #0]
 8007642:	1821      	adds	r1, r4, r0
 8007644:	428b      	cmp	r3, r1
 8007646:	bf01      	itttt	eq
 8007648:	6819      	ldreq	r1, [r3, #0]
 800764a:	685b      	ldreq	r3, [r3, #4]
 800764c:	1809      	addeq	r1, r1, r0
 800764e:	6021      	streq	r1, [r4, #0]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6054      	str	r4, [r2, #4]
 8007654:	e7cb      	b.n	80075ee <_free_r+0x22>
 8007656:	bd38      	pop	{r3, r4, r5, pc}
 8007658:	20001da0 	.word	0x20001da0

0800765c <__ssputs_r>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	688e      	ldr	r6, [r1, #8]
 8007662:	4682      	mov	sl, r0
 8007664:	429e      	cmp	r6, r3
 8007666:	460c      	mov	r4, r1
 8007668:	4690      	mov	r8, r2
 800766a:	461f      	mov	r7, r3
 800766c:	d838      	bhi.n	80076e0 <__ssputs_r+0x84>
 800766e:	898a      	ldrh	r2, [r1, #12]
 8007670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007674:	d032      	beq.n	80076dc <__ssputs_r+0x80>
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	6909      	ldr	r1, [r1, #16]
 800767a:	3301      	adds	r3, #1
 800767c:	eba5 0901 	sub.w	r9, r5, r1
 8007680:	6965      	ldr	r5, [r4, #20]
 8007682:	444b      	add	r3, r9
 8007684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800768c:	106d      	asrs	r5, r5, #1
 800768e:	429d      	cmp	r5, r3
 8007690:	bf38      	it	cc
 8007692:	461d      	movcc	r5, r3
 8007694:	0553      	lsls	r3, r2, #21
 8007696:	d531      	bpl.n	80076fc <__ssputs_r+0xa0>
 8007698:	4629      	mov	r1, r5
 800769a:	f7ff fe7d 	bl	8007398 <_malloc_r>
 800769e:	4606      	mov	r6, r0
 80076a0:	b950      	cbnz	r0, 80076b8 <__ssputs_r+0x5c>
 80076a2:	230c      	movs	r3, #12
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	f8ca 3000 	str.w	r3, [sl]
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	464a      	mov	r2, r9
 80076ba:	6921      	ldr	r1, [r4, #16]
 80076bc:	f7ff fe36 	bl	800732c <memcpy>
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ca:	81a3      	strh	r3, [r4, #12]
 80076cc:	6126      	str	r6, [r4, #16]
 80076ce:	444e      	add	r6, r9
 80076d0:	6026      	str	r6, [r4, #0]
 80076d2:	463e      	mov	r6, r7
 80076d4:	6165      	str	r5, [r4, #20]
 80076d6:	eba5 0509 	sub.w	r5, r5, r9
 80076da:	60a5      	str	r5, [r4, #8]
 80076dc:	42be      	cmp	r6, r7
 80076de:	d900      	bls.n	80076e2 <__ssputs_r+0x86>
 80076e0:	463e      	mov	r6, r7
 80076e2:	4632      	mov	r2, r6
 80076e4:	4641      	mov	r1, r8
 80076e6:	6820      	ldr	r0, [r4, #0]
 80076e8:	f000 fab8 	bl	8007c5c <memmove>
 80076ec:	68a3      	ldr	r3, [r4, #8]
 80076ee:	2000      	movs	r0, #0
 80076f0:	1b9b      	subs	r3, r3, r6
 80076f2:	60a3      	str	r3, [r4, #8]
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	4433      	add	r3, r6
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	e7db      	b.n	80076b4 <__ssputs_r+0x58>
 80076fc:	462a      	mov	r2, r5
 80076fe:	f000 fac7 	bl	8007c90 <_realloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	2800      	cmp	r0, #0
 8007706:	d1e1      	bne.n	80076cc <__ssputs_r+0x70>
 8007708:	4650      	mov	r0, sl
 800770a:	6921      	ldr	r1, [r4, #16]
 800770c:	f7ff ff5e 	bl	80075cc <_free_r>
 8007710:	e7c7      	b.n	80076a2 <__ssputs_r+0x46>
	...

08007714 <_svfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4698      	mov	r8, r3
 800771a:	898b      	ldrh	r3, [r1, #12]
 800771c:	4607      	mov	r7, r0
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	460d      	mov	r5, r1
 8007722:	4614      	mov	r4, r2
 8007724:	b09d      	sub	sp, #116	; 0x74
 8007726:	d50e      	bpl.n	8007746 <_svfiprintf_r+0x32>
 8007728:	690b      	ldr	r3, [r1, #16]
 800772a:	b963      	cbnz	r3, 8007746 <_svfiprintf_r+0x32>
 800772c:	2140      	movs	r1, #64	; 0x40
 800772e:	f7ff fe33 	bl	8007398 <_malloc_r>
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6128      	str	r0, [r5, #16]
 8007736:	b920      	cbnz	r0, 8007742 <_svfiprintf_r+0x2e>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	e0d1      	b.n	80078e6 <_svfiprintf_r+0x1d2>
 8007742:	2340      	movs	r3, #64	; 0x40
 8007744:	616b      	str	r3, [r5, #20]
 8007746:	2300      	movs	r3, #0
 8007748:	9309      	str	r3, [sp, #36]	; 0x24
 800774a:	2320      	movs	r3, #32
 800774c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007750:	2330      	movs	r3, #48	; 0x30
 8007752:	f04f 0901 	mov.w	r9, #1
 8007756:	f8cd 800c 	str.w	r8, [sp, #12]
 800775a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007900 <_svfiprintf_r+0x1ec>
 800775e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007762:	4623      	mov	r3, r4
 8007764:	469a      	mov	sl, r3
 8007766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776a:	b10a      	cbz	r2, 8007770 <_svfiprintf_r+0x5c>
 800776c:	2a25      	cmp	r2, #37	; 0x25
 800776e:	d1f9      	bne.n	8007764 <_svfiprintf_r+0x50>
 8007770:	ebba 0b04 	subs.w	fp, sl, r4
 8007774:	d00b      	beq.n	800778e <_svfiprintf_r+0x7a>
 8007776:	465b      	mov	r3, fp
 8007778:	4622      	mov	r2, r4
 800777a:	4629      	mov	r1, r5
 800777c:	4638      	mov	r0, r7
 800777e:	f7ff ff6d 	bl	800765c <__ssputs_r>
 8007782:	3001      	adds	r0, #1
 8007784:	f000 80aa 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800778a:	445a      	add	r2, fp
 800778c:	9209      	str	r2, [sp, #36]	; 0x24
 800778e:	f89a 3000 	ldrb.w	r3, [sl]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80a2 	beq.w	80078dc <_svfiprintf_r+0x1c8>
 8007798:	2300      	movs	r3, #0
 800779a:	f04f 32ff 	mov.w	r2, #4294967295
 800779e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a2:	f10a 0a01 	add.w	sl, sl, #1
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ae:	931a      	str	r3, [sp, #104]	; 0x68
 80077b0:	4654      	mov	r4, sl
 80077b2:	2205      	movs	r2, #5
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	4851      	ldr	r0, [pc, #324]	; (8007900 <_svfiprintf_r+0x1ec>)
 80077ba:	f000 fa41 	bl	8007c40 <memchr>
 80077be:	9a04      	ldr	r2, [sp, #16]
 80077c0:	b9d8      	cbnz	r0, 80077fa <_svfiprintf_r+0xe6>
 80077c2:	06d0      	lsls	r0, r2, #27
 80077c4:	bf44      	itt	mi
 80077c6:	2320      	movmi	r3, #32
 80077c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077cc:	0711      	lsls	r1, r2, #28
 80077ce:	bf44      	itt	mi
 80077d0:	232b      	movmi	r3, #43	; 0x2b
 80077d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d6:	f89a 3000 	ldrb.w	r3, [sl]
 80077da:	2b2a      	cmp	r3, #42	; 0x2a
 80077dc:	d015      	beq.n	800780a <_svfiprintf_r+0xf6>
 80077de:	4654      	mov	r4, sl
 80077e0:	2000      	movs	r0, #0
 80077e2:	f04f 0c0a 	mov.w	ip, #10
 80077e6:	9a07      	ldr	r2, [sp, #28]
 80077e8:	4621      	mov	r1, r4
 80077ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ee:	3b30      	subs	r3, #48	; 0x30
 80077f0:	2b09      	cmp	r3, #9
 80077f2:	d94e      	bls.n	8007892 <_svfiprintf_r+0x17e>
 80077f4:	b1b0      	cbz	r0, 8007824 <_svfiprintf_r+0x110>
 80077f6:	9207      	str	r2, [sp, #28]
 80077f8:	e014      	b.n	8007824 <_svfiprintf_r+0x110>
 80077fa:	eba0 0308 	sub.w	r3, r0, r8
 80077fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007802:	4313      	orrs	r3, r2
 8007804:	46a2      	mov	sl, r4
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	e7d2      	b.n	80077b0 <_svfiprintf_r+0x9c>
 800780a:	9b03      	ldr	r3, [sp, #12]
 800780c:	1d19      	adds	r1, r3, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	9103      	str	r1, [sp, #12]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfbb      	ittet	lt
 8007816:	425b      	neglt	r3, r3
 8007818:	f042 0202 	orrlt.w	r2, r2, #2
 800781c:	9307      	strge	r3, [sp, #28]
 800781e:	9307      	strlt	r3, [sp, #28]
 8007820:	bfb8      	it	lt
 8007822:	9204      	strlt	r2, [sp, #16]
 8007824:	7823      	ldrb	r3, [r4, #0]
 8007826:	2b2e      	cmp	r3, #46	; 0x2e
 8007828:	d10c      	bne.n	8007844 <_svfiprintf_r+0x130>
 800782a:	7863      	ldrb	r3, [r4, #1]
 800782c:	2b2a      	cmp	r3, #42	; 0x2a
 800782e:	d135      	bne.n	800789c <_svfiprintf_r+0x188>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	3402      	adds	r4, #2
 8007834:	1d1a      	adds	r2, r3, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	9203      	str	r2, [sp, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	bfb8      	it	lt
 800783e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007904 <_svfiprintf_r+0x1f0>
 8007848:	2203      	movs	r2, #3
 800784a:	4650      	mov	r0, sl
 800784c:	7821      	ldrb	r1, [r4, #0]
 800784e:	f000 f9f7 	bl	8007c40 <memchr>
 8007852:	b140      	cbz	r0, 8007866 <_svfiprintf_r+0x152>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	eba0 000a 	sub.w	r0, r0, sl
 800785a:	fa03 f000 	lsl.w	r0, r3, r0
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	3401      	adds	r4, #1
 8007862:	4303      	orrs	r3, r0
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	2206      	movs	r2, #6
 800786c:	4826      	ldr	r0, [pc, #152]	; (8007908 <_svfiprintf_r+0x1f4>)
 800786e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007872:	f000 f9e5 	bl	8007c40 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d038      	beq.n	80078ec <_svfiprintf_r+0x1d8>
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <_svfiprintf_r+0x1f8>)
 800787c:	bb1b      	cbnz	r3, 80078c6 <_svfiprintf_r+0x1b2>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	f023 0307 	bic.w	r3, r3, #7
 8007886:	3308      	adds	r3, #8
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	4433      	add	r3, r6
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
 8007890:	e767      	b.n	8007762 <_svfiprintf_r+0x4e>
 8007892:	460c      	mov	r4, r1
 8007894:	2001      	movs	r0, #1
 8007896:	fb0c 3202 	mla	r2, ip, r2, r3
 800789a:	e7a5      	b.n	80077e8 <_svfiprintf_r+0xd4>
 800789c:	2300      	movs	r3, #0
 800789e:	f04f 0c0a 	mov.w	ip, #10
 80078a2:	4619      	mov	r1, r3
 80078a4:	3401      	adds	r4, #1
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ae:	3a30      	subs	r2, #48	; 0x30
 80078b0:	2a09      	cmp	r2, #9
 80078b2:	d903      	bls.n	80078bc <_svfiprintf_r+0x1a8>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c5      	beq.n	8007844 <_svfiprintf_r+0x130>
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	e7c3      	b.n	8007844 <_svfiprintf_r+0x130>
 80078bc:	4604      	mov	r4, r0
 80078be:	2301      	movs	r3, #1
 80078c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c4:	e7f0      	b.n	80078a8 <_svfiprintf_r+0x194>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4638      	mov	r0, r7
 80078ce:	4b10      	ldr	r3, [pc, #64]	; (8007910 <_svfiprintf_r+0x1fc>)
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	f3af 8000 	nop.w
 80078d6:	1c42      	adds	r2, r0, #1
 80078d8:	4606      	mov	r6, r0
 80078da:	d1d6      	bne.n	800788a <_svfiprintf_r+0x176>
 80078dc:	89ab      	ldrh	r3, [r5, #12]
 80078de:	065b      	lsls	r3, r3, #25
 80078e0:	f53f af2c 	bmi.w	800773c <_svfiprintf_r+0x28>
 80078e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078e6:	b01d      	add	sp, #116	; 0x74
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	ab03      	add	r3, sp, #12
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	462a      	mov	r2, r5
 80078f2:	4638      	mov	r0, r7
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <_svfiprintf_r+0x1fc>)
 80078f6:	a904      	add	r1, sp, #16
 80078f8:	f000 f87c 	bl	80079f4 <_printf_i>
 80078fc:	e7eb      	b.n	80078d6 <_svfiprintf_r+0x1c2>
 80078fe:	bf00      	nop
 8007900:	08007e6c 	.word	0x08007e6c
 8007904:	08007e72 	.word	0x08007e72
 8007908:	08007e76 	.word	0x08007e76
 800790c:	00000000 	.word	0x00000000
 8007910:	0800765d 	.word	0x0800765d

08007914 <_printf_common>:
 8007914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007918:	4616      	mov	r6, r2
 800791a:	4699      	mov	r9, r3
 800791c:	688a      	ldr	r2, [r1, #8]
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	4607      	mov	r7, r0
 8007922:	4293      	cmp	r3, r2
 8007924:	bfb8      	it	lt
 8007926:	4613      	movlt	r3, r2
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800792e:	460c      	mov	r4, r1
 8007930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007934:	b10a      	cbz	r2, 800793a <_printf_common+0x26>
 8007936:	3301      	adds	r3, #1
 8007938:	6033      	str	r3, [r6, #0]
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	0699      	lsls	r1, r3, #26
 800793e:	bf42      	ittt	mi
 8007940:	6833      	ldrmi	r3, [r6, #0]
 8007942:	3302      	addmi	r3, #2
 8007944:	6033      	strmi	r3, [r6, #0]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	f015 0506 	ands.w	r5, r5, #6
 800794c:	d106      	bne.n	800795c <_printf_common+0x48>
 800794e:	f104 0a19 	add.w	sl, r4, #25
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	6832      	ldr	r2, [r6, #0]
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	42ab      	cmp	r3, r5
 800795a:	dc28      	bgt.n	80079ae <_printf_common+0x9a>
 800795c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007960:	1e13      	subs	r3, r2, #0
 8007962:	6822      	ldr	r2, [r4, #0]
 8007964:	bf18      	it	ne
 8007966:	2301      	movne	r3, #1
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d42d      	bmi.n	80079c8 <_printf_common+0xb4>
 800796c:	4649      	mov	r1, r9
 800796e:	4638      	mov	r0, r7
 8007970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d020      	beq.n	80079bc <_printf_common+0xa8>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	68e5      	ldr	r5, [r4, #12]
 800797e:	f003 0306 	and.w	r3, r3, #6
 8007982:	2b04      	cmp	r3, #4
 8007984:	bf18      	it	ne
 8007986:	2500      	movne	r5, #0
 8007988:	6832      	ldr	r2, [r6, #0]
 800798a:	f04f 0600 	mov.w	r6, #0
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	bf08      	it	eq
 8007992:	1aad      	subeq	r5, r5, r2
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	bf08      	it	eq
 8007998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800799c:	4293      	cmp	r3, r2
 800799e:	bfc4      	itt	gt
 80079a0:	1a9b      	subgt	r3, r3, r2
 80079a2:	18ed      	addgt	r5, r5, r3
 80079a4:	341a      	adds	r4, #26
 80079a6:	42b5      	cmp	r5, r6
 80079a8:	d11a      	bne.n	80079e0 <_printf_common+0xcc>
 80079aa:	2000      	movs	r0, #0
 80079ac:	e008      	b.n	80079c0 <_printf_common+0xac>
 80079ae:	2301      	movs	r3, #1
 80079b0:	4652      	mov	r2, sl
 80079b2:	4649      	mov	r1, r9
 80079b4:	4638      	mov	r0, r7
 80079b6:	47c0      	blx	r8
 80079b8:	3001      	adds	r0, #1
 80079ba:	d103      	bne.n	80079c4 <_printf_common+0xb0>
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	3501      	adds	r5, #1
 80079c6:	e7c4      	b.n	8007952 <_printf_common+0x3e>
 80079c8:	2030      	movs	r0, #48	; 0x30
 80079ca:	18e1      	adds	r1, r4, r3
 80079cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079d6:	4422      	add	r2, r4
 80079d8:	3302      	adds	r3, #2
 80079da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079de:	e7c5      	b.n	800796c <_printf_common+0x58>
 80079e0:	2301      	movs	r3, #1
 80079e2:	4622      	mov	r2, r4
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d0e6      	beq.n	80079bc <_printf_common+0xa8>
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7d9      	b.n	80079a6 <_printf_common+0x92>
	...

080079f4 <_printf_i>:
 80079f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	7e0f      	ldrb	r7, [r1, #24]
 80079fa:	4691      	mov	r9, r2
 80079fc:	2f78      	cmp	r7, #120	; 0x78
 80079fe:	4680      	mov	r8, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	469a      	mov	sl, r3
 8007a04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a0a:	d807      	bhi.n	8007a1c <_printf_i+0x28>
 8007a0c:	2f62      	cmp	r7, #98	; 0x62
 8007a0e:	d80a      	bhi.n	8007a26 <_printf_i+0x32>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	f000 80d9 	beq.w	8007bc8 <_printf_i+0x1d4>
 8007a16:	2f58      	cmp	r7, #88	; 0x58
 8007a18:	f000 80a4 	beq.w	8007b64 <_printf_i+0x170>
 8007a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a24:	e03a      	b.n	8007a9c <_printf_i+0xa8>
 8007a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a2a:	2b15      	cmp	r3, #21
 8007a2c:	d8f6      	bhi.n	8007a1c <_printf_i+0x28>
 8007a2e:	a101      	add	r1, pc, #4	; (adr r1, 8007a34 <_printf_i+0x40>)
 8007a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a34:	08007a8d 	.word	0x08007a8d
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007a1d 	.word	0x08007a1d
 8007a40:	08007a1d 	.word	0x08007a1d
 8007a44:	08007a1d 	.word	0x08007a1d
 8007a48:	08007a1d 	.word	0x08007a1d
 8007a4c:	08007aa1 	.word	0x08007aa1
 8007a50:	08007a1d 	.word	0x08007a1d
 8007a54:	08007a1d 	.word	0x08007a1d
 8007a58:	08007a1d 	.word	0x08007a1d
 8007a5c:	08007a1d 	.word	0x08007a1d
 8007a60:	08007baf 	.word	0x08007baf
 8007a64:	08007ad1 	.word	0x08007ad1
 8007a68:	08007b91 	.word	0x08007b91
 8007a6c:	08007a1d 	.word	0x08007a1d
 8007a70:	08007a1d 	.word	0x08007a1d
 8007a74:	08007bd1 	.word	0x08007bd1
 8007a78:	08007a1d 	.word	0x08007a1d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a1d 	.word	0x08007a1d
 8007a84:	08007a1d 	.word	0x08007a1d
 8007a88:	08007b99 	.word	0x08007b99
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	1d1a      	adds	r2, r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e0a4      	b.n	8007bea <_printf_i+0x1f6>
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	6829      	ldr	r1, [r5, #0]
 8007aa4:	0606      	lsls	r6, r0, #24
 8007aa6:	f101 0304 	add.w	r3, r1, #4
 8007aaa:	d50a      	bpl.n	8007ac2 <_printf_i+0xce>
 8007aac:	680e      	ldr	r6, [r1, #0]
 8007aae:	602b      	str	r3, [r5, #0]
 8007ab0:	2e00      	cmp	r6, #0
 8007ab2:	da03      	bge.n	8007abc <_printf_i+0xc8>
 8007ab4:	232d      	movs	r3, #45	; 0x2d
 8007ab6:	4276      	negs	r6, r6
 8007ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007abc:	230a      	movs	r3, #10
 8007abe:	485e      	ldr	r0, [pc, #376]	; (8007c38 <_printf_i+0x244>)
 8007ac0:	e019      	b.n	8007af6 <_printf_i+0x102>
 8007ac2:	680e      	ldr	r6, [r1, #0]
 8007ac4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	bf18      	it	ne
 8007acc:	b236      	sxthne	r6, r6
 8007ace:	e7ef      	b.n	8007ab0 <_printf_i+0xbc>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6029      	str	r1, [r5, #0]
 8007ad8:	0601      	lsls	r1, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xec>
 8007adc:	681e      	ldr	r6, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <_printf_i+0xf2>
 8007ae0:	0646      	lsls	r6, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xe8>
 8007ae4:	881e      	ldrh	r6, [r3, #0]
 8007ae6:	2f6f      	cmp	r7, #111	; 0x6f
 8007ae8:	bf0c      	ite	eq
 8007aea:	2308      	moveq	r3, #8
 8007aec:	230a      	movne	r3, #10
 8007aee:	4852      	ldr	r0, [pc, #328]	; (8007c38 <_printf_i+0x244>)
 8007af0:	2100      	movs	r1, #0
 8007af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007af6:	6865      	ldr	r5, [r4, #4]
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	bfa8      	it	ge
 8007afc:	6821      	ldrge	r1, [r4, #0]
 8007afe:	60a5      	str	r5, [r4, #8]
 8007b00:	bfa4      	itt	ge
 8007b02:	f021 0104 	bicge.w	r1, r1, #4
 8007b06:	6021      	strge	r1, [r4, #0]
 8007b08:	b90e      	cbnz	r6, 8007b0e <_printf_i+0x11a>
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	d04d      	beq.n	8007baa <_printf_i+0x1b6>
 8007b0e:	4615      	mov	r5, r2
 8007b10:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b14:	fb03 6711 	mls	r7, r3, r1, r6
 8007b18:	5dc7      	ldrb	r7, [r0, r7]
 8007b1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b1e:	4637      	mov	r7, r6
 8007b20:	42bb      	cmp	r3, r7
 8007b22:	460e      	mov	r6, r1
 8007b24:	d9f4      	bls.n	8007b10 <_printf_i+0x11c>
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d10b      	bne.n	8007b42 <_printf_i+0x14e>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	07de      	lsls	r6, r3, #31
 8007b2e:	d508      	bpl.n	8007b42 <_printf_i+0x14e>
 8007b30:	6923      	ldr	r3, [r4, #16]
 8007b32:	6861      	ldr	r1, [r4, #4]
 8007b34:	4299      	cmp	r1, r3
 8007b36:	bfde      	ittt	le
 8007b38:	2330      	movle	r3, #48	; 0x30
 8007b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	6122      	str	r2, [r4, #16]
 8007b46:	464b      	mov	r3, r9
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f8cd a000 	str.w	sl, [sp]
 8007b50:	aa03      	add	r2, sp, #12
 8007b52:	f7ff fedf 	bl	8007914 <_printf_common>
 8007b56:	3001      	adds	r0, #1
 8007b58:	d14c      	bne.n	8007bf4 <_printf_i+0x200>
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	b004      	add	sp, #16
 8007b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b64:	4834      	ldr	r0, [pc, #208]	; (8007c38 <_printf_i+0x244>)
 8007b66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b6a:	6829      	ldr	r1, [r5, #0]
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b72:	6029      	str	r1, [r5, #0]
 8007b74:	061d      	lsls	r5, r3, #24
 8007b76:	d514      	bpl.n	8007ba2 <_printf_i+0x1ae>
 8007b78:	07df      	lsls	r7, r3, #31
 8007b7a:	bf44      	itt	mi
 8007b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b80:	6023      	strmi	r3, [r4, #0]
 8007b82:	b91e      	cbnz	r6, 8007b8c <_printf_i+0x198>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	2310      	movs	r3, #16
 8007b8e:	e7af      	b.n	8007af0 <_printf_i+0xfc>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	f043 0320 	orr.w	r3, r3, #32
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	2378      	movs	r3, #120	; 0x78
 8007b9a:	4828      	ldr	r0, [pc, #160]	; (8007c3c <_printf_i+0x248>)
 8007b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ba0:	e7e3      	b.n	8007b6a <_printf_i+0x176>
 8007ba2:	0659      	lsls	r1, r3, #25
 8007ba4:	bf48      	it	mi
 8007ba6:	b2b6      	uxthmi	r6, r6
 8007ba8:	e7e6      	b.n	8007b78 <_printf_i+0x184>
 8007baa:	4615      	mov	r5, r2
 8007bac:	e7bb      	b.n	8007b26 <_printf_i+0x132>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	6826      	ldr	r6, [r4, #0]
 8007bb2:	1d18      	adds	r0, r3, #4
 8007bb4:	6961      	ldr	r1, [r4, #20]
 8007bb6:	6028      	str	r0, [r5, #0]
 8007bb8:	0635      	lsls	r5, r6, #24
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	d501      	bpl.n	8007bc2 <_printf_i+0x1ce>
 8007bbe:	6019      	str	r1, [r3, #0]
 8007bc0:	e002      	b.n	8007bc8 <_printf_i+0x1d4>
 8007bc2:	0670      	lsls	r0, r6, #25
 8007bc4:	d5fb      	bpl.n	8007bbe <_printf_i+0x1ca>
 8007bc6:	8019      	strh	r1, [r3, #0]
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4615      	mov	r5, r2
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	e7ba      	b.n	8007b46 <_printf_i+0x152>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	1d1a      	adds	r2, r3, #4
 8007bd6:	602a      	str	r2, [r5, #0]
 8007bd8:	681d      	ldr	r5, [r3, #0]
 8007bda:	6862      	ldr	r2, [r4, #4]
 8007bdc:	4628      	mov	r0, r5
 8007bde:	f000 f82f 	bl	8007c40 <memchr>
 8007be2:	b108      	cbz	r0, 8007be8 <_printf_i+0x1f4>
 8007be4:	1b40      	subs	r0, r0, r5
 8007be6:	6060      	str	r0, [r4, #4]
 8007be8:	6863      	ldr	r3, [r4, #4]
 8007bea:	6123      	str	r3, [r4, #16]
 8007bec:	2300      	movs	r3, #0
 8007bee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf2:	e7a8      	b.n	8007b46 <_printf_i+0x152>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	47d0      	blx	sl
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0ab      	beq.n	8007b5a <_printf_i+0x166>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	079b      	lsls	r3, r3, #30
 8007c06:	d413      	bmi.n	8007c30 <_printf_i+0x23c>
 8007c08:	68e0      	ldr	r0, [r4, #12]
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	4298      	cmp	r0, r3
 8007c0e:	bfb8      	it	lt
 8007c10:	4618      	movlt	r0, r3
 8007c12:	e7a4      	b.n	8007b5e <_printf_i+0x16a>
 8007c14:	2301      	movs	r3, #1
 8007c16:	4632      	mov	r2, r6
 8007c18:	4649      	mov	r1, r9
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	47d0      	blx	sl
 8007c1e:	3001      	adds	r0, #1
 8007c20:	d09b      	beq.n	8007b5a <_printf_i+0x166>
 8007c22:	3501      	adds	r5, #1
 8007c24:	68e3      	ldr	r3, [r4, #12]
 8007c26:	9903      	ldr	r1, [sp, #12]
 8007c28:	1a5b      	subs	r3, r3, r1
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	dcf2      	bgt.n	8007c14 <_printf_i+0x220>
 8007c2e:	e7eb      	b.n	8007c08 <_printf_i+0x214>
 8007c30:	2500      	movs	r5, #0
 8007c32:	f104 0619 	add.w	r6, r4, #25
 8007c36:	e7f5      	b.n	8007c24 <_printf_i+0x230>
 8007c38:	08007e7d 	.word	0x08007e7d
 8007c3c:	08007e8e 	.word	0x08007e8e

08007c40 <memchr>:
 8007c40:	4603      	mov	r3, r0
 8007c42:	b510      	push	{r4, lr}
 8007c44:	b2c9      	uxtb	r1, r1
 8007c46:	4402      	add	r2, r0
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	d101      	bne.n	8007c52 <memchr+0x12>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	e003      	b.n	8007c5a <memchr+0x1a>
 8007c52:	7804      	ldrb	r4, [r0, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	428c      	cmp	r4, r1
 8007c58:	d1f6      	bne.n	8007c48 <memchr+0x8>
 8007c5a:	bd10      	pop	{r4, pc}

08007c5c <memmove>:
 8007c5c:	4288      	cmp	r0, r1
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	eb01 0402 	add.w	r4, r1, r2
 8007c64:	d902      	bls.n	8007c6c <memmove+0x10>
 8007c66:	4284      	cmp	r4, r0
 8007c68:	4623      	mov	r3, r4
 8007c6a:	d807      	bhi.n	8007c7c <memmove+0x20>
 8007c6c:	1e43      	subs	r3, r0, #1
 8007c6e:	42a1      	cmp	r1, r4
 8007c70:	d008      	beq.n	8007c84 <memmove+0x28>
 8007c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c7a:	e7f8      	b.n	8007c6e <memmove+0x12>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4402      	add	r2, r0
 8007c80:	428a      	cmp	r2, r1
 8007c82:	d100      	bne.n	8007c86 <memmove+0x2a>
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c8e:	e7f7      	b.n	8007c80 <memmove+0x24>

08007c90 <_realloc_r>:
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	4680      	mov	r8, r0
 8007c96:	4614      	mov	r4, r2
 8007c98:	460e      	mov	r6, r1
 8007c9a:	b921      	cbnz	r1, 8007ca6 <_realloc_r+0x16>
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca2:	f7ff bb79 	b.w	8007398 <_malloc_r>
 8007ca6:	b92a      	cbnz	r2, 8007cb4 <_realloc_r+0x24>
 8007ca8:	f7ff fc90 	bl	80075cc <_free_r>
 8007cac:	4625      	mov	r5, r4
 8007cae:	4628      	mov	r0, r5
 8007cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb4:	f000 f81b 	bl	8007cee <_malloc_usable_size_r>
 8007cb8:	4284      	cmp	r4, r0
 8007cba:	4607      	mov	r7, r0
 8007cbc:	d802      	bhi.n	8007cc4 <_realloc_r+0x34>
 8007cbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cc2:	d812      	bhi.n	8007cea <_realloc_r+0x5a>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f7ff fb66 	bl	8007398 <_malloc_r>
 8007ccc:	4605      	mov	r5, r0
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d0ed      	beq.n	8007cae <_realloc_r+0x1e>
 8007cd2:	42bc      	cmp	r4, r7
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	bf28      	it	cs
 8007cda:	463a      	movcs	r2, r7
 8007cdc:	f7ff fb26 	bl	800732c <memcpy>
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7ff fc72 	bl	80075cc <_free_r>
 8007ce8:	e7e1      	b.n	8007cae <_realloc_r+0x1e>
 8007cea:	4635      	mov	r5, r6
 8007cec:	e7df      	b.n	8007cae <_realloc_r+0x1e>

08007cee <_malloc_usable_size_r>:
 8007cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf2:	1f18      	subs	r0, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bfbc      	itt	lt
 8007cf8:	580b      	ldrlt	r3, [r1, r0]
 8007cfa:	18c0      	addlt	r0, r0, r3
 8007cfc:	4770      	bx	lr
	...

08007d00 <_init>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	bf00      	nop
 8007d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d06:	bc08      	pop	{r3}
 8007d08:	469e      	mov	lr, r3
 8007d0a:	4770      	bx	lr

08007d0c <_fini>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr
